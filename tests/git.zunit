#!/usr/bin/env zunit

@setup {
    load ../fzf-zsh-completions.plugin.zsh
    pushd tests/_support/git

    {
        rm -rf .git
        cp -r _git .git

        echo file1 >> file1
        echo file2 >> directory1/file2
    } &> /dev/null

    preview() {
        for opt in ${(Q)${(Z+n+)fzf_options}}; do
            if [[ $opt = --preview=* ]]; then
                eval ${${opt/--preview=/}/\{\}/${(q)@}} 2>&1
            fi
        done
    }
}

@teardown {
    {
        git reset --hard master
        git clean -d -f
    } &> /dev/null

    rm -rf .git
}

@test 'Testing completion: git **' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    _fzf_path_completion() {
        assert $# equals 2
        assert $1 same_as ''
        assert $2 same_as 'git '
    }

    prefix=
    _fzf_complete_git 'git '
}

@test 'Testing completion: git checkout **' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git checkout '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)master         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)v1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)v2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=
    _fzf_complete_git 'git checkout '
}

@test 'Testing completion: git checkout -- **' {
    run git checkout another-branch
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'

    _fzf_complete() {
        assert $# equals 2
        assert $1 matches '--ansi --read0 --print0 --multi '
        assert $2 same_as 'git checkout -- '

        run cat
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as " $(tput sgr0)$(tput setaf 1)M$(tput sgr0)  file3 containing space "
        assert ${actual1[2]} same_as " $(tput sgr0)$(tput setaf 1)M$(tput sgr0) directory1/file2"
        assert ${actual1[3]} same_as " $(tput sgr0)$(tput setaf 1)M$(tput sgr0) directory2/file4"

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as " $(tput sgr0)$(tput setaf 1)M$(tput sgr0) file1"
    }

    prefix=
    _fzf_complete_git 'git checkout -- '
}

@test 'Testing completion: git log **' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git log '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)master         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)v1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)v2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=
    _fzf_complete_git 'git log '
}

@test 'Testing completion: git log -- **' {
    run git checkout another-branch
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'

    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --read0 --print0 --multi'
        assert $2 same_as 'git log -- '

        run cat
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as ' file3 containing space '
        assert ${actual1[2]} same_as 'directory1/file2'
        assert ${actual1[3]} same_as 'directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as 'file1'
    }

    prefix=
    _fzf_complete_git 'git log -- '
}

@test 'Testing completion: git rebase **' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git rebase '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)master         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)v1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)v2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=
    _fzf_complete_git 'git rebase '
}

@test 'Testing completion: git reset **' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git reset '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)master         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)v1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)v2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=
    _fzf_complete_git 'git reset '
}

@test 'Testing completion: git reset -- **' {
    run git checkout another-branch
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'

    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --read0 --print0 --multi'
        assert $2 same_as 'git reset -- '

        run cat
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as ' file3 containing space '
        assert ${actual1[2]} same_as 'directory1/file2'
        assert ${actual1[3]} same_as 'directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as 'file1'
    }

    prefix=
    _fzf_complete_git 'git reset -- '
}

@test 'Testing completion: git branch **' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index --multi'
        assert $2 same_as 'git branch -D '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)master         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)v1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)v2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=
    _fzf_complete_git 'git branch -D '
}

@test 'Testing completion: git cherry-pick **' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index --multi'
        assert $2 same_as 'git cherry-pick '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)master         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)v1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)v2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=
    _fzf_complete_git 'git cherry-pick '
}

@test 'Testing completion: git merge **' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index --multi'
        assert $2 same_as 'git merge '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)master         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)v1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)v2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=
    _fzf_complete_git 'git merge '
}

@test 'Testing completion: git revert **' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index --multi'
        assert $2 same_as 'git revert '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)master         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)v1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)v2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=
    _fzf_complete_git 'git revert '
}

@test 'Testing completion: git commit --fixup=**' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git commit '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)${prefix}another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)${prefix}master         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)${prefix}v1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)${prefix}v2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)${prefix}3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=--fixup=
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit --reedit-message=**' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git commit '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)${prefix}another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)${prefix}master         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)${prefix}v1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)${prefix}v2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)${prefix}3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=--reedit-message=
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit --reuse-message=**' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git commit '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)${prefix}another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)${prefix}master         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)${prefix}v1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)${prefix}v2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)${prefix}3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=--reuse-message=
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit --squash=**' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git commit '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)${prefix}another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)${prefix}master         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)${prefix}v1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)${prefix}v2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)${prefix}3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=--squash=
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit -c **' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git commit -c '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)master         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)v1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)v2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=
    _fzf_complete_git 'git commit -c '
}

@test 'Testing completion: git commit -c**' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git commit '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)-canother-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)-cmaster         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)-cv1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)-cv2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)-c3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=-c
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit -qc **' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git commit -qc '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)master         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)v1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)v2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=
    _fzf_complete_git 'git commit -qc '
}

@test 'Testing completion: git commit -qc**' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git commit '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)-qcanother-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)-qcmaster         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)-qcv1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)-qcv2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)-qc3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=-qc
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit -C **' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git commit -C '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)master         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)v1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)v2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=
    _fzf_complete_git 'git commit -C '
}

@test 'Testing completion: git commit -C**' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git commit '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)-Canother-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)-Cmaster         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)-Cv1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)-Cv2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)-C3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=-C
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit -qC **' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git commit -qC '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)master         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)v1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)v2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=
    _fzf_complete_git 'git commit -qC '
}

@test 'Testing completion: git commit -qC**' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git commit '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)-qCanother-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)-qCmaster         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)-qCv1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)-qCv2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)-qC3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=-qC
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit --fixup **' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git commit --fixup '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)master         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)v1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)v2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=
    _fzf_complete_git 'git commit --fixup '
}

@test 'Testing completion: git commit --reedit-message **' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git commit --reedit-message '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)master         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)v1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)v2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=
    _fzf_complete_git 'git commit --reedit-message '
}

@test 'Testing completion: git commit --reuse-message **' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git commit --reuse-message '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)master         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)v1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)v2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=
    _fzf_complete_git 'git commit --reuse-message '
}

@test 'Testing completion: git commit --squash **' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git commit --squash '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)master         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)v1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)v2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=
    _fzf_complete_git 'git commit --squash '
}

@test 'Testing completion: git commit --message=**' {
    run git checkout another-branch

    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git commit '

        run cat
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "$(tput setaf 3)6088ecf $(tput sgr0) ${prefix} 2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)3e209a3 $(tput sgr0) ${prefix}1st commit"
    }

    prefix=--message=
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit -m **' {
    run git checkout another-branch

    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git commit -m '

        run cat
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "$(tput setaf 3)6088ecf $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)3e209a3 $(tput sgr0) 1st commit"
    }

    prefix=
    _fzf_complete_git 'git commit -m '
}

@test 'Testing completion: git commit -m**' {
    run git checkout another-branch

    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git commit '

        run cat
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "$(tput setaf 3)6088ecf $(tput sgr0) -m 2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)3e209a3 $(tput sgr0) -m1st commit"
    }

    prefix=-m
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit -qm **' {
    run git checkout another-branch

    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git commit -qm '

        run cat
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "$(tput setaf 3)6088ecf $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)3e209a3 $(tput sgr0) 1st commit"
    }

    prefix=
    _fzf_complete_git 'git commit -qm '
}

@test 'Testing completion: git commit -qm**' {
    run git checkout another-branch

    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git commit '

        run cat
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "$(tput setaf 3)6088ecf $(tput sgr0) -qm 2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)3e209a3 $(tput sgr0) -qm1st commit"
    }

    prefix=-qm
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit --message **' {
    run git checkout another-branch

    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git commit --message '

        run cat
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "$(tput setaf 3)6088ecf $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)3e209a3 $(tput sgr0) 1st commit"
    }

    prefix=
    _fzf_complete_git 'git commit --message '
}

@test 'Testing completion: git commit --author=**' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=--author=
    _fzf_complete_git 'git commit '

    assert $? equals 0
}

@test 'Testing completion: git commit --date=**' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=--date=
    _fzf_complete_git 'git commit '

    assert $? equals 0
}

@test 'Testing completion: git commit --author **' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git commit --author '

    assert $? equals 0
}

@test 'Testing completion: git commit --date **' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git commit --date '

    assert $? equals 0
}

@test 'Testing completion: git commit --file=**' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit --file='
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=--file=
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit --template=**' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit --template='
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=--template=
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit --pathspec-from-file=**' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit --pathspec-from-file='
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=--pathspec-from-file=
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit -F **' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit -F '
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=
    _fzf_complete_git 'git commit -F '
}

@test 'Testing completion: git commit -F**' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit -F'
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=-F
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit -qF **' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit -qF '
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=
    _fzf_complete_git 'git commit -qF '
}

@test 'Testing completion: git commit -qF**' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit -qF'
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=-qF
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit -t **' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit -t '
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=
    _fzf_complete_git 'git commit -t '
}

@test 'Testing completion: git commit -t**' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit -t'
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=-t
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit -qt **' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit -qt '
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=
    _fzf_complete_git 'git commit -qt '
}

@test 'Testing completion: git commit -qt**' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit -qt'
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=-qt
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit --file **' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit --file '
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=
    _fzf_complete_git 'git commit --file '
}

@test 'Testing completion: git commit --template **' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit --template '
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=
    _fzf_complete_git 'git commit --template '
}

@test 'Testing completion: git commit --pathspec-from-file **' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit --pathspec-from-file '
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=
    _fzf_complete_git 'git commit --pathspec-from-file '
}

@test 'Testing completion: git commit --cleanup=**' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git commit '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as --cleanup=strip
        assert ${lines[2]} same_as --cleanup=whitespace
        assert ${lines[3]} same_as --cleanup=verbatim
        assert ${lines[4]} same_as --cleanup=scissors
        assert ${lines[5]} same_as --cleanup=default
    }

    prefix=--cleanup=
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit --cleanup **' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git commit --cleanup '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as strip
        assert ${lines[2]} same_as whitespace
        assert ${lines[3]} same_as verbatim
        assert ${lines[4]} same_as scissors
        assert ${lines[5]} same_as default
    }

    prefix=
    _fzf_complete_git 'git commit --cleanup '
}

@test 'Testing completion: git commit -u**' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git commit '

        run cat
        assert ${#lines} equals 3
        assert ${lines[1]} same_as -uno
        assert ${lines[2]} same_as -unormal
        assert ${lines[3]} same_as -uall
    }

    prefix=-u
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit -qu**' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git commit '

        run cat
        assert ${#lines} equals 3
        assert ${lines[1]} same_as -quno
        assert ${lines[2]} same_as -qunormal
        assert ${lines[3]} same_as -quall
    }

    prefix=-qu
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit --untracked-files=**' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git commit '

        run cat
        assert ${#lines} equals 3
        assert ${lines[1]} same_as --untracked-files=no
        assert ${lines[2]} same_as --untracked-files=normal
        assert ${lines[3]} same_as --untracked-files=all
    }

    prefix=--untracked-files=
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit --untracked-files **' {
    run git checkout another-branch
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'

    _fzf_complete() {
        assert $# equals 2
        assert $1 matches '--ansi --read0 --print0 --multi '
        assert $2 same_as 'git commit --untracked-files '

        run cat
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as " $(tput sgr0)$(tput setaf 1)M$(tput sgr0)  file3 containing space "
        assert ${actual1[2]} same_as " $(tput sgr0)$(tput setaf 1)M$(tput sgr0) directory1/file2"
        assert ${actual1[3]} same_as " $(tput sgr0)$(tput setaf 1)M$(tput sgr0) directory2/file4"

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as " $(tput sgr0)$(tput setaf 1)M$(tput sgr0) file1"
    }

    prefix=
    _fzf_complete_git 'git commit --untracked-files '
}

@test 'Testing completion: git commit **' {
    run git checkout another-branch
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'

    _fzf_complete() {
        assert $# equals 2
        assert $1 matches '--ansi --read0 --print0 --multi '
        assert $2 same_as 'git commit '

        run cat
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as " $(tput sgr0)$(tput setaf 1)M$(tput sgr0)  file3 containing space "
        assert ${actual1[2]} same_as " $(tput sgr0)$(tput setaf 1)M$(tput sgr0) directory1/file2"
        assert ${actual1[3]} same_as " $(tput sgr0)$(tput setaf 1)M$(tput sgr0) directory2/file4"

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as " $(tput sgr0)$(tput setaf 1)M$(tput sgr0) file1"
    }

    prefix=
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit -- **' {
    run git checkout another-branch
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'

    _fzf_complete() {
        assert $# equals 2
        assert $1 matches '--ansi --read0 --print0 --multi '
        assert $2 same_as 'git commit -- '

        run cat
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as " $(tput sgr0)$(tput setaf 1)M$(tput sgr0)  file3 containing space "
        assert ${actual1[2]} same_as " $(tput sgr0)$(tput setaf 1)M$(tput sgr0) directory1/file2"
        assert ${actual1[3]} same_as " $(tput sgr0)$(tput setaf 1)M$(tput sgr0) directory2/file4"

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as " $(tput sgr0)$(tput setaf 1)M$(tput sgr0) file1"
    }

    prefix=
    _fzf_complete_git 'git commit -- '
}

@test 'Testing completion: git add **' {
    run git checkout another-branch
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'

    _fzf_complete() {
        assert $# equals 2
        assert $1 matches '--ansi --read0 --print0 --multi '
        assert $2 same_as 'git add '

        run cat
        assert ${#lines} equals 5

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as " $(tput sgr0)$(tput setaf 1)M$(tput sgr0)  file3 containing space "
        assert ${actual1[2]} same_as " $(tput sgr0)$(tput setaf 1)M$(tput sgr0) directory1/file2"
        assert ${actual1[3]} same_as " $(tput sgr0)$(tput setaf 1)M$(tput sgr0) directory2/file4"

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 4
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as " $(tput sgr0)$(tput setaf 1)M$(tput sgr0) file1"
        assert ${actual3[3]} same_as "$(tput setaf 1)?$(tput sgr0)$(tput setaf 1)?$(tput sgr0)  file5 containing space "
        assert ${actual3[4]} same_as "$(tput setaf 1)?$(tput sgr0)$(tput setaf 1)?$(tput sgr0) directory2/file6"

        actual4=(${(0)lines[4]})
        assert ${#actual4} equals 1
        assert ${actual4[1]} same_as 'containing'

        actual5=(${(0)lines[5]})
        assert ${#actual5} equals 1
        assert ${actual5[1]} same_as 'newlines'
    }

    prefix=
    _fzf_complete_git 'git add '
}

@test 'Testing completion: git pull --recurse-submodules=**' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git pull '

        run cat
        assert ${#lines} equals 3
        assert ${lines[1]} same_as --recurse-submodules=yes
        assert ${lines[2]} same_as --recurse-submodules=on-demand
        assert ${lines[3]} same_as --recurse-submodules=no
    }

    prefix=--recurse-submodules=
    _fzf_complete_git 'git pull '
}

@test 'Testing completion: git pull --recurse-submodules **' {
    run git remote add origin git@github.com:chitoku-k/fzf-zsh-completions
    run git remote add upstream git@example.com:example/fzf-zsh-completions
    run git remote add example example

    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git pull --recurse-submodules '

        run cat
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "$(tput setaf 3)example  $(tput sgr0) example (fetch)"
        assert ${lines[2]} same_as "$(tput setaf 3)origin   $(tput sgr0) git@github.com:chitoku-k/fzf-zsh-completions (fetch)"
        assert ${lines[3]} same_as "$(tput setaf 3)upstream $(tput sgr0) git@example.com:example/fzf-zsh-completions (fetch)"
    }

    prefix=
    _fzf_complete_git 'git pull --recurse-submodules '
}

@test 'Testing completion: git pull --cleanup=**' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git pull '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as --cleanup=strip
        assert ${lines[2]} same_as --cleanup=whitespace
        assert ${lines[3]} same_as --cleanup=verbatim
        assert ${lines[4]} same_as --cleanup=scissors
        assert ${lines[5]} same_as --cleanup=default
    }

    prefix=--cleanup=
    _fzf_complete_git 'git pull '
}

@test 'Testing completion: git pull --cleanup **' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git pull --cleanup '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as strip
        assert ${lines[2]} same_as whitespace
        assert ${lines[3]} same_as verbatim
        assert ${lines[4]} same_as scissors
        assert ${lines[5]} same_as default
    }

    prefix=
    _fzf_complete_git 'git pull --cleanup '
}

@test 'Testing completion: git pull -s **' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git pull -s '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as octopus
        assert ${lines[2]} same_as ours
        assert ${lines[3]} same_as subtree
        assert ${lines[4]} same_as recursive
        assert ${lines[5]} same_as resolve
    }

    prefix=
    _fzf_complete_git 'git pull -s '
}

@test 'Testing completion: git pull --strategy=**' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git pull '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as --strategy=octopus
        assert ${lines[2]} same_as --strategy=ours
        assert ${lines[3]} same_as --strategy=subtree
        assert ${lines[4]} same_as --strategy=recursive
        assert ${lines[5]} same_as --strategy=resolve
    }

    prefix=--strategy=
    _fzf_complete_git 'git pull '
}

@test 'Testing completion: git pull --strategy **' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git pull --strategy '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as octopus
        assert ${lines[2]} same_as ours
        assert ${lines[3]} same_as subtree
        assert ${lines[4]} same_as recursive
        assert ${lines[5]} same_as resolve
    }

    prefix=
    _fzf_complete_git 'git pull --strategy '
}

@test 'Testing completion: git pull -X **' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git pull -X '

        run cat
        assert ${#lines} equals 19
        assert ${lines[1]} same_as diff-algorithm=histogram
        assert ${lines[2]} same_as diff-algorithm=minimal
        assert ${lines[3]} same_as diff-algorithm=myers
        assert ${lines[4]} same_as diff-algorithm=patience
        assert ${lines[5]} same_as find-renames
        assert ${lines[6]} same_as find-renames=
        assert ${lines[7]} same_as ignore-all-space
        assert ${lines[8]} same_as ignore-cr-at-eol
        assert ${lines[9]} same_as ignore-space-at-eol
        assert ${lines[10]} same_as ignore-space-change
        assert ${lines[11]} same_as no-renames
        assert ${lines[12]} same_as no-renormalize
        assert ${lines[13]} same_as ours
        assert ${lines[14]} same_as patience
        assert ${lines[15]} same_as rename-threshold=
        assert ${lines[16]} same_as renormalize
        assert ${lines[17]} same_as subtree
        assert ${lines[18]} same_as subtree=
        assert ${lines[19]} same_as theirs
    }

    prefix=
    _fzf_complete_git 'git pull -X '
}

@test 'Testing completion: git pull --strategy-option=**' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git pull '

        run cat
        assert ${#lines} equals 19
        assert ${lines[1]} same_as --strategy-option=diff-algorithm=histogram
        assert ${lines[2]} same_as --strategy-option=diff-algorithm=minimal
        assert ${lines[3]} same_as --strategy-option=diff-algorithm=myers
        assert ${lines[5]} same_as --strategy-option=find-renames
        assert ${lines[6]} same_as --strategy-option=find-renames=
        assert ${lines[7]} same_as --strategy-option=ignore-all-space
        assert ${lines[8]} same_as --strategy-option=ignore-cr-at-eol
        assert ${lines[9]} same_as --strategy-option=ignore-space-at-eol
        assert ${lines[10]} same_as --strategy-option=ignore-space-change
        assert ${lines[11]} same_as --strategy-option=no-renames
        assert ${lines[12]} same_as --strategy-option=no-renormalize
        assert ${lines[13]} same_as --strategy-option=ours
        assert ${lines[14]} same_as --strategy-option=patience
        assert ${lines[15]} same_as --strategy-option=rename-threshold=
        assert ${lines[16]} same_as --strategy-option=renormalize
        assert ${lines[17]} same_as --strategy-option=subtree
        assert ${lines[18]} same_as --strategy-option=subtree=
        assert ${lines[19]} same_as --strategy-option=theirs
    }

    prefix=--strategy-option=
    _fzf_complete_git 'git pull '
}

@test 'Testing completion: git pull --strategy-option **' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git pull --strategy-option '

        run cat
        assert ${#lines} equals 19
        assert ${lines[1]} same_as diff-algorithm=histogram
        assert ${lines[2]} same_as diff-algorithm=minimal
        assert ${lines[3]} same_as diff-algorithm=myers
        assert ${lines[4]} same_as diff-algorithm=patience
        assert ${lines[5]} same_as find-renames
        assert ${lines[6]} same_as find-renames=
        assert ${lines[7]} same_as ignore-all-space
        assert ${lines[8]} same_as ignore-cr-at-eol
        assert ${lines[9]} same_as ignore-space-at-eol
        assert ${lines[10]} same_as ignore-space-change
        assert ${lines[11]} same_as no-renames
        assert ${lines[12]} same_as no-renormalize
        assert ${lines[13]} same_as ours
        assert ${lines[14]} same_as patience
        assert ${lines[15]} same_as rename-threshold=
        assert ${lines[16]} same_as renormalize
        assert ${lines[17]} same_as subtree
        assert ${lines[18]} same_as subtree=
        assert ${lines[19]} same_as theirs
    }

    prefix=
    _fzf_complete_git 'git pull --strategy-option '
}

@test 'Testing completion: git pull --rebase=**' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git pull '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as --rebase=false
        assert ${lines[2]} same_as --rebase=interactive
        assert ${lines[3]} same_as --rebase=merges
        assert ${lines[4]} same_as --rebase=preserve
        assert ${lines[5]} same_as --rebase=true
    }

    prefix=--rebase=
    _fzf_complete_git 'git pull '
}

@test 'Testing completion: git pull --rebase **' {
    run git remote add origin git@github.com:chitoku-k/fzf-zsh-completions
    run git remote add upstream git@example.com:example/fzf-zsh-completions
    run git remote add example example

    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git pull --rebase '

        run cat
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "$(tput setaf 3)example  $(tput sgr0) example (fetch)"
        assert ${lines[2]} same_as "$(tput setaf 3)origin   $(tput sgr0) git@github.com:chitoku-k/fzf-zsh-completions (fetch)"
        assert ${lines[3]} same_as "$(tput setaf 3)upstream $(tput sgr0) git@example.com:example/fzf-zsh-completions (fetch)"
    }

    prefix=
    _fzf_complete_git 'git pull --rebase '
}

@test 'Testing completion: git pull --shallow-exclude=**' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git pull '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)--shallow-exclude=another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)--shallow-exclude=master         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)--shallow-exclude=v1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)--shallow-exclude=v2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)--shallow-exclude=3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=--shallow-exclude=
    _fzf_complete_git 'git pull '
}

@test 'Testing completion: git pull --shallow-exclude **' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git pull --shallow-exclude '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)master         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)v1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)v2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=
    _fzf_complete_git 'git pull --shallow-exclude '
}

@test 'Testing completion: git pull --negotiation-tip=**' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git pull '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)--negotiation-tip=another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)--negotiation-tip=master         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)--negotiation-tip=v1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)--negotiation-tip=v2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)--negotiation-tip=3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=--negotiation-tip=
    _fzf_complete_git 'git pull '
}

@test 'Testing completion: git pull --negotiation-tip **' {
    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git pull --negotiation-tip '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)master         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)v1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)v2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=
    _fzf_complete_git 'git pull --negotiation-tip '
}

@test 'Testing completion: git pull -o **' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git pull -o '

    assert $? equals 0
}

@test 'Testing completion: git pull --date=**' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=--date=
    _fzf_complete_git 'git pull '

    assert $? equals 0
}

@test 'Testing completion: git pull --date **' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git pull --date '

    assert $? equals 0
}

@test 'Testing completion: git pull --depth=**' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=--depth=
    _fzf_complete_git 'git pull '

    assert $? equals 0
}

@test 'Testing completion: git pull --depth **' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git pull --depth '

    assert $? equals 0
}

@test 'Testing completion: git pull --deepen=**' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=--deepen=
    _fzf_complete_git 'git pull '

    assert $? equals 0
}

@test 'Testing completion: git pull --deepen **' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git pull --deepen '

    assert $? equals 0
}

@test 'Testing completion: git pull --log=**' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=--log=
    _fzf_complete_git 'git pull '

    assert $? equals 0
}

@test 'Testing completion: git pull --log **' {
    run git remote add origin git@github.com:chitoku-k/fzf-zsh-completions
    run git remote add upstream git@example.com:example/fzf-zsh-completions
    run git remote add example example

    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git pull --log '

        run cat
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "$(tput setaf 3)example  $(tput sgr0) example (fetch)"
        assert ${lines[2]} same_as "$(tput setaf 3)origin   $(tput sgr0) git@github.com:chitoku-k/fzf-zsh-completions (fetch)"
        assert ${lines[3]} same_as "$(tput setaf 3)upstream $(tput sgr0) git@example.com:example/fzf-zsh-completions (fetch)"
    }

    prefix=
    _fzf_complete_git 'git pull --log '
}

@test 'Testing completion: git pull --server-option=**' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=--server-option=
    _fzf_complete_git 'git pull '

    assert $? equals 0
}

@test 'Testing completion: git pull --server-option **' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git pull --server-option '

    assert $? equals 0
}

@test 'Testing completion: git pull --shallow-since=**' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=--shallow-since=
    _fzf_complete_git 'git pull '

    assert $? equals 0
}

@test 'Testing completion: git pull --shallow-since **' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git pull --shallow-since '

    assert $? equals 0
}

@test 'Testing completion: git pull **' {
    run git remote add origin git@github.com:chitoku-k/fzf-zsh-completions
    run git remote add upstream git@example.com:example/fzf-zsh-completions
    run git remote add example example

    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git pull '

        run cat
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "$(tput setaf 3)example  $(tput sgr0) example (fetch)"
        assert ${lines[2]} same_as "$(tput setaf 3)origin   $(tput sgr0) git@github.com:chitoku-k/fzf-zsh-completions (fetch)"
        assert ${lines[3]} same_as "$(tput setaf 3)upstream $(tput sgr0) git@example.com:example/fzf-zsh-completions (fetch)"
    }

    prefix=
    _fzf_complete_git 'git pull '
}

@test 'Testing completion: git pull origin **' {
    run git remote add origin git@github.com:chitoku-k/fzf-zsh-completions
    run git symbolic-ref refs/remotes/origin/master refs/heads/master
    run git symbolic-ref refs/remotes/origin/another-branch refs/heads/another-branch

    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index --multi'
        assert $2 same_as 'git pull origin '

        run cat
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "$(tput setaf 3)origin/another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)origin/master         $(tput sgr0) 1st commit"
    }

    prefix=
    _fzf_complete_git 'git pull origin '
}

@test 'Testing completion: git pull --cleanup strip --rebase **' {
    run git remote add origin git@github.com:chitoku-k/fzf-zsh-completions
    run git remote add upstream git@example.com:example/fzf-zsh-completions
    run git remote add example example

    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git pull --cleanup strip --rebase '

        run cat
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "$(tput setaf 3)example  $(tput sgr0) example (fetch)"
        assert ${lines[2]} same_as "$(tput setaf 3)origin   $(tput sgr0) git@github.com:chitoku-k/fzf-zsh-completions (fetch)"
        assert ${lines[3]} same_as "$(tput setaf 3)upstream $(tput sgr0) git@example.com:example/fzf-zsh-completions (fetch)"
    }

    prefix=
    _fzf_complete_git 'git pull --cleanup strip --rebase '
}

@test 'Testing completion: git pull origin --cleanup strip --quiet **' {
    run git remote add origin git@github.com:chitoku-k/fzf-zsh-completions
    run git symbolic-ref refs/remotes/origin/master refs/heads/master
    run git symbolic-ref refs/remotes/origin/another-branch refs/heads/another-branch

    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index --multi'
        assert $2 same_as 'git pull origin --cleanup strip --quiet '

        run cat
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "$(tput setaf 3)origin/another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)origin/master         $(tput sgr0) 1st commit"
    }

    prefix=
    _fzf_complete_git 'git pull origin --cleanup strip --quiet '
}

@test 'Testing completion: git pull -- **' {
    run git remote add origin git@github.com:chitoku-k/fzf-zsh-completions
    run git remote add upstream git@example.com:example/fzf-zsh-completions
    run git remote add example example

    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git pull -- '

        run cat
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "$(tput setaf 3)example  $(tput sgr0) example (fetch)"
        assert ${lines[2]} same_as "$(tput setaf 3)origin   $(tput sgr0) git@github.com:chitoku-k/fzf-zsh-completions (fetch)"
        assert ${lines[3]} same_as "$(tput setaf 3)upstream $(tput sgr0) git@example.com:example/fzf-zsh-completions (fetch)"
    }

    prefix=
    _fzf_complete_git 'git pull -- '
}

@test 'Testing completion: git pull -- origin **' {
    run git remote add origin git@github.com:chitoku-k/fzf-zsh-completions
    run git symbolic-ref refs/remotes/origin/master refs/heads/master
    run git symbolic-ref refs/remotes/origin/another-branch refs/heads/another-branch

    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index --multi'
        assert $2 same_as 'git pull -- origin '

        run cat
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "$(tput setaf 3)origin/another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)origin/master         $(tput sgr0) 1st commit"
    }

    prefix=
    _fzf_complete_git 'git pull -- origin '
}


@test 'Testing completion (alias): git commit --squash **' {
    run git config alias.squash 'commit --squash'

    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git squash '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)master         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)v1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)v2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=
    _fzf_complete_git 'git squash '
}

@test 'Testing completion (alias): git commit --amend --message **' {
    run git config alias.amend 'commit --amend --message'
    run git checkout another-branch

    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git amend '

        run cat
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "$(tput setaf 3)6088ecf $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)3e209a3 $(tput sgr0) 1st commit"
    }

    prefix=
    _fzf_complete_git 'git amend '
}

@test 'Testing completion (alias): git commit --date **' {
    run git config alias.commit-date 'commit --date'

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git commit-date '

    assert $? equals 0
}

@test 'Testing completion (alias): git commit --pathspec-from-file **' {
    run git config alias.commit-spec 'commit --pathspec-from-file'

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit-spec '
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=
    _fzf_complete_git 'git commit-spec '
}

@test 'Testing completion (alias): git commit --cleanup **' {
    run git config alias.commit-cleanup 'commit --cleanup'

    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git commit-cleanup '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as strip
        assert ${lines[2]} same_as whitespace
        assert ${lines[3]} same_as verbatim
        assert ${lines[4]} same_as scissors
        assert ${lines[5]} same_as default
    }

    prefix=
    _fzf_complete_git 'git commit-cleanup '
}

@test 'Testing completion (alias): git commit --untracked-files **' {
    run git checkout another-branch
    run git config alias.commit-untracked 'commit --untracked-files'

    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'

    _fzf_complete() {
        assert $# equals 2
        assert $1 matches '--ansi --read0 --print0 --multi '
        assert $2 same_as 'git commit-untracked '

        run cat
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as " $(tput sgr0)$(tput setaf 1)M$(tput sgr0)  file3 containing space "
        assert ${actual1[2]} same_as " $(tput sgr0)$(tput setaf 1)M$(tput sgr0) directory1/file2"
        assert ${actual1[3]} same_as " $(tput sgr0)$(tput setaf 1)M$(tput sgr0) directory2/file4"

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as " $(tput sgr0)$(tput setaf 1)M$(tput sgr0) file1"
    }

    prefix=
    _fzf_complete_git 'git commit-untracked '
}

@test 'Testing completion (alias): git commit **' {
    run git checkout another-branch
    run git config alias.commit-all 'commit -a'

    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'

    _fzf_complete() {
        assert $# equals 2
        assert $1 matches '--ansi --read0 --print0 --multi '
        assert $2 same_as 'git commit-all '

        run cat
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as " $(tput sgr0)$(tput setaf 1)M$(tput sgr0)  file3 containing space "
        assert ${actual1[2]} same_as " $(tput sgr0)$(tput setaf 1)M$(tput sgr0) directory1/file2"
        assert ${actual1[3]} same_as " $(tput sgr0)$(tput setaf 1)M$(tput sgr0) directory2/file4"

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as " $(tput sgr0)$(tput setaf 1)M$(tput sgr0) file1"
    }

    prefix=
    _fzf_complete_git 'git commit-all '
}

@test 'Testing completion (recursive alias)' {
    run git config alias.foo bar
    run git config alias.bar 'commit --squash'

    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as 'git foo '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)master         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)v1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)v2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=
    _fzf_complete_git 'git foo '
}

@test 'Testing completion (looped alias)' {
    run git config alias.foo bar
    run git config alias.bar baz
    run git config alias.baz foo

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    _fzf_path_completion() {
        assert $# equals 2
        assert $1 same_as ''
        assert $2 same_as 'git foo '
    }

    prefix=
    _fzf_complete_git 'git foo '
}

@test 'Testing completion (alias and expansion)' {
    run git config alias.squash 'commit --squash'

    _fzf_complete() {
        assert $# equals 2
        assert $1 same_as '--ansi --tiebreak=index '
        assert $2 same_as '"git"  "squash" '

        run cat
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "$(tput setaf 3)another-branch $(tput sgr0)  2nd commit"
        assert ${lines[2]} same_as "$(tput setaf 3)master         $(tput sgr0) 1st commit"
        assert ${lines[3]} same_as "$(tput setaf 3)v1             $(tput sgr0) 1st commit"
        assert ${lines[4]} same_as "$(tput setaf 3)v2             $(tput sgr0)  2nd commit"
        assert ${lines[5]} same_as "$(tput setaf 3)3e209a3        $(tput sgr0) 1st commit"
    }

    prefix=
    _fzf_complete_git '"git"  "squash" '
}

@test 'Testing preview: git checkout -- **' {
    run git checkout another-branch
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'

    _fzf_complete() {
        fzf_options=$1 run preview ' M  file3 containing space '
        assert $output is_not_empty

        fzf_options=$1 run preview ' M directory1/file2'
        assert $output is_not_empty

        fzf_options=$1 run preview $' M directory2/file4\ncontaining\nnewlines'
        assert $output is_not_empty

        fzf_options=$1 run preview ' M file1'
        assert $output is_not_empty
    }

    prefix=
    _fzf_complete_git 'git checkout -- '
}

@test 'Testing preview: git commit -- **' {
    run git checkout another-branch
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'

    _fzf_complete() {
        fzf_options=$1 run preview ' M  file3 containing space '
        assert $output is_not_empty

        fzf_options=$1 run preview ' M directory1/file2'
        assert $output is_not_empty

        fzf_options=$1 run preview $' M directory2/file4\ncontaining\nnewlines'
        assert $output is_not_empty

        fzf_options=$1 run preview ' M file1'
        assert $output is_not_empty
    }

    prefix=
    _fzf_complete_git 'git commit -- '
}

@test 'Testing preview: git add **' {
    run git checkout another-branch
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'

    _fzf_complete() {
        fzf_options=$1 run preview ' M  file3 containing space '
        assert $output is_not_empty

        fzf_options=$1 run preview ' M directory1/file2'
        assert $output is_not_empty

        fzf_options=$1 run preview $' M directory2/file4\ncontaining\nnewlines'
        assert $output is_not_empty

        fzf_options=$1 run preview ' M file1'
        assert $output is_not_empty

        fzf_options=$1 run preview '??  file5 containing space '
        assert $output is_not_empty

        fzf_options=$1 run preview $'?? directory2/file6\ncontaining\nnewlines'
        assert $output is_not_empty
    }

    prefix=
    _fzf_complete_git 'git add '
}

@test 'Testing post: git commits' {
    input=(
        'another-branch   2nd commit'
        'master          1st commit'
        'v1              1st commit'
        'v2               2nd commit'
        '3e209a3         1st commit'
    )

    run _fzf_complete_git-commits_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 5
    assert ${lines[1]} same_as 'another-branch'
    assert ${lines[2]} same_as 'master'
    assert ${lines[3]} same_as 'v1'
    assert ${lines[4]} same_as 'v2'
    assert ${lines[5]} same_as '3e209a3'
}

@test 'Testing post: git commit messages containing space' {
    input=(
        '3e209a3  1st commit'
    )

    run _fzf_complete_git-commit-messages_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as "'1st commit'"
}

@test 'Testing post: git commit messages starting with space' {
    input=(
        '6088ecf   2nd commit'
    )

    run _fzf_complete_git-commit-messages_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as "' 2nd commit'"
}

@test 'Testing post: git unstaged files' {
    input=(
        'M  file1'
        'M  directory1/file2'
        'M   file3 containing space '
        $'M  file4\ncontaining\nnewlines'
        '??  file5 containing space '
        $'?? directory2/file6\ncontaining\nnewlines'
    )

    run _fzf_complete_git-unstaged-files_post <<< ${(pj:\0:)input}

    assert $state equals 0
    assert ${#lines} equals 6

    assert ${lines[1]} same_as 'file1'
    assert ${lines[2]} same_as 'directory1/file2'
    assert ${lines[3]} same_as "' file3 containing space '"
    assert ${lines[4]} same_as "\$'file4\\ncontaining\\nnewlines'"
    assert ${lines[5]} same_as "' file5 containing space '"
    assert ${lines[6]} same_as "\$'directory2/file6\\ncontaining\\nnewlines'"
}

@test 'Testing post: git remotes' {
    input=(
        'origin  git@github.com:chitoku-k/fzf-zsh-completions (fetch)'
    )

    run _fzf_complete_git-remotes_post <<< ${(F)input}


    assert $state equals 0
    assert ${#lines} equals 1

    assert ${lines[1]} same_as 'origin'
}

@test 'Testing post: git refs' {
    input=(
        'origin/another-branch   2nd commit'
        'origin/master  1st commit'
    )

    run _fzf_complete_git-refs_post <<< ${(F)input}


    assert $state equals 0
    assert ${#lines} equals 2

    assert ${lines[1]} same_as 'another-branch'
    assert ${lines[2]} same_as 'master'
}

@test 'Testing post: git constants ending without equal' {
    input=(
        '--strategy-option=subtree'
    )

    run _fzf_complete_git_git_constants_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1

    assert ${lines[1]} same_as '--strategy-option=subtree'
}

@test 'Testing post: git constants ending with equal' {
    input=(
        '--strategy-option=subtree='
    )

    run _fzf_complete_git_git_constants_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1

    assert ${lines[1]} same_as '--strategy-option=subtree='
}
