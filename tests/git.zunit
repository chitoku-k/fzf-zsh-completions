#!/usr/bin/env zunit

@setup {
    load ../fzf-zsh-completions.plugin.zsh
    load _helpers/assertions.zsh
    load _helpers/mock.zsh

    mock git

    pushd tests/_support/git
    DIR=$PWD
    FZF_DEFAULT_OPTS=--reverse

    {
        rm -rf .git
        cp -r _git .git

        echo file1 >> file1
        echo file2 >> directory1/file2
    } &> /dev/null

    preview() {
        for opt in $fzf_options; do
            if [[ $opt = --preview=* ]]; then
                eval ${${opt/--preview=/}/\{\}/${(q)@}} 2>&1
            fi
        done
    }
}

@teardown {
    pushd $DIR

    unmock git

    {
        git reset --hard master
        git clean -d -f
    } &> /dev/null

    rm -rf .git
}

@test 'Testing completion (alias): git "" commit **' {
    git_mock_1() {
        assert $# equals 2
        assert $1 same_as 'checkout'
        assert $2 same_as 'another-branch'

        command git "$@"
    }

    git_mock_2() {
        assert $# equals 3
        assert $1 same_as 'config'
        assert $2 same_as 'alias.commit-all'
        assert $3 same_as '"" commit -a'

        command git "$@"
    }

    git_mock_3() {
        assert $# equals 3
        assert $1 same_as 'config'
        assert $2 same_as '--get-regexp'
        assert $3 same_as '^alias\.'

        command git "$@"
    }

    run git checkout another-branch
    run git config alias.commit-all '"" commit -a'

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    _fzf_path_completion() {
        assert $# equals 2
        assert $1 same_as ''
        assert $2 same_as 'git commit-all '
    }

    prefix=
    _fzf_complete_git 'git commit-all '

    assert git mock_times 0
}
