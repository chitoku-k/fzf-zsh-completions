#!/usr/bin/env zunit

@setup {
    load ../fzf-zsh-completions.plugin.zsh
    load _helpers/mock.zsh
    load _helpers/assertions.zsh
    mock systemctl
    mock xargs
    mock _fzf_complete_systemctl_unknown-subcommand
    mock __fzf_extract_command
    FZF_DEFAULT_OPTS=--reverse

    preview() {
        for opt in $fzf_options; do
            if [[ $opt = --preview=* ]]; then
                eval ${${opt/--preview=/}/\{\}/${(q)@}} 2>&1
            fi
        done
    }
}

@teardown {
    (unmock systemctl)
    (unmock xargs)
    (unmock _fzf_complete_systemctl_status)
    (unmock _fzf_complete_systemctl_unknown-subcommand)
    (unmock __fzf_extract_command)
}

@test 'Testing overridden completion: systemctl status **' {
    mock _fzf_complete_systemctl_status

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'systemctl status '

        echo 'systemctl'
    }

    _fzf_complete_systemctl_status_mock_1() {
        assert $# equals 1
        assert $1 same_as 'systemctl status '
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_systemctl 'systemctl status '

    assert _fzf_complete_systemctl_status mock_times 1
}

@test 'Testing overridden completion: systemctl unknown-subcommand **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'systemctl unknown-subcommand '

        echo 'systemctl'
    }

    _fzf_complete_systemctl_unknown-subcommand_mock_1() {
        assert $# equals 1
        assert $1 same_as 'systemctl unknown-subcommand '
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_systemctl 'systemctl unknown-subcommand '

    assert _fzf_complete_systemctl_unknown-subcommand mock_times 1
}

@test 'Testing completion: systemctl status **' {
    systemctl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'list-units'
        assert $2 same_as '--full'
        assert $3 same_as '--no-legend'
        assert $4 same_as '--no-pager'
        assert $5 same_as '*'

        echo '-.mount      loaded active mounted Root Mount'
        echo 'boot.mount   loaded active mounted /boot'
        echo 'dbus.service loaded active running D-Bus System Message Bus'
        echo '-.slice      loaded active active  Root Slice'
        echo 'system.slice loaded active active  System Slice'
        echo 'user.slice   loaded active active  User and Session Slice'
        echo 'basic.target loaded active active  Basic System'
        echo 'dbus.socket  loaded failed running D-Bus System Message Bus Socket'
    }

    systemctl_mock_2() {
        assert $# equals 5
        assert $1 same_as 'list-unit-files'
        assert $2 same_as '--full'
        assert $3 same_as '--no-legend'
        assert $4 same_as '--no-pager'
        assert $5 same_as '*'

        echo '-.mount           generated -'
        echo 'boot.mount        generated -'
        echo 'dbus.service      static    -'
        echo 'ip6tables.service disabled  disabled'
        echo 'iptables.service  disabled  disabled'
        echo 'user@.service     static    -'
        echo 'user.slice        static    -'
        echo 'basic.target      static    -'
        echo 'blockdev@.target  static    -'
        echo 'dbus.socket       static    -'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'systemctl status '

        echo 'systemctl'
    }

    _fzf_complete() {
        assert $# equals 8
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--multi'
        assert $4 same_as '--preview-window=right:70%:wrap'
        assert $5 matches '--preview=*'
        assert $6 same_as '--reverse'
        assert $7 same_as '--'
        assert $8 same_as 'systemctl status '

        run cat
        assert __fzf_extract_command mock_times 1
        assert systemctl mock_times 2
        assert ${#lines} equals 10
        assert ${lines[1]} same_as "${fg[green]}●${reset_color} -.mount"
        assert ${lines[2]} same_as "${fg[green]}●${reset_color} -.slice"
        assert ${lines[3]} same_as "${fg[green]}●${reset_color} basic.target"
        assert ${lines[4]} same_as "${fg[green]}●${reset_color} boot.mount"
        assert ${lines[5]} same_as "${fg[green]}●${reset_color} dbus.service"
        assert ${lines[6]} same_as "${fg[red]}●${reset_color} dbus.socket"
        assert ${lines[7]} same_as "○ ip6tables.service"
        assert ${lines[8]} same_as "○ iptables.service"
        assert ${lines[9]} same_as "${fg[green]}●${reset_color} system.slice"
        assert ${lines[10]} same_as "${fg[green]}●${reset_color} user.slice"
    }

    prefix=
    _fzf_complete_systemctl 'systemctl status '
}

@test 'Testing completion: TEST1=value1 TEST2=value2 systemctl status **' {
    systemctl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'list-units'
        assert $2 same_as '--full'
        assert $3 same_as '--no-legend'
        assert $4 same_as '--no-pager'
        assert $5 same_as '*'

        echo '-.mount      loaded active mounted Root Mount'
        echo 'boot.mount   loaded active mounted /boot'
        echo 'dbus.service loaded active running D-Bus System Message Bus'
        echo '-.slice      loaded active active  Root Slice'
        echo 'system.slice loaded active active  System Slice'
        echo 'user.slice   loaded active active  User and Session Slice'
        echo 'basic.target loaded active active  Basic System'
        echo 'dbus.socket  loaded failed running D-Bus System Message Bus Socket'
    }

    systemctl_mock_2() {
        assert $# equals 5
        assert $1 same_as 'list-unit-files'
        assert $2 same_as '--full'
        assert $3 same_as '--no-legend'
        assert $4 same_as '--no-pager'
        assert $5 same_as '*'

        echo '-.mount           generated -'
        echo 'boot.mount        generated -'
        echo 'dbus.service      static    -'
        echo 'ip6tables.service disabled  disabled'
        echo 'iptables.service  disabled  disabled'
        echo 'user@.service     static    -'
        echo 'user.slice        static    -'
        echo 'basic.target      static    -'
        echo 'blockdev@.target  static    -'
        echo 'dbus.socket       static    -'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'TEST1=value1 TEST2=value2 systemctl status '

        echo 'systemctl'
    }

    _fzf_complete() {
        assert $# equals 8
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--multi'
        assert $4 same_as '--preview-window=right:70%:wrap'
        assert $5 matches '--preview=*'
        assert $6 same_as '--reverse'
        assert $7 same_as '--'
        assert $8  same_as 'TEST1=value1 TEST2=value2 systemctl status '

        assert $TEST1 same_as value1
        assert $TEST2 same_as value2

        run cat
        assert __fzf_extract_command mock_times 1
        assert systemctl mock_times 2
        assert ${#lines} equals 10
        assert ${lines[1]} same_as "${fg[green]}●${reset_color} -.mount"
        assert ${lines[2]} same_as "${fg[green]}●${reset_color} -.slice"
        assert ${lines[3]} same_as "${fg[green]}●${reset_color} basic.target"
        assert ${lines[4]} same_as "${fg[green]}●${reset_color} boot.mount"
        assert ${lines[5]} same_as "${fg[green]}●${reset_color} dbus.service"
        assert ${lines[6]} same_as "${fg[red]}●${reset_color} dbus.socket"
        assert ${lines[7]} same_as "○ ip6tables.service"
        assert ${lines[8]} same_as "○ iptables.service"
        assert ${lines[9]} same_as "${fg[green]}●${reset_color} system.slice"
        assert ${lines[10]} same_as "${fg[green]}●${reset_color} user.slice"
    }

    prefix=
    _fzf_complete_systemctl 'TEST1=value1 TEST2=value2 systemctl status '

    assert $TEST1 is_empty
    assert $TEST2 is_empty
}

@test 'Testing completion: systemctl status --user **' {
    systemctl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'list-units'
        assert $2 same_as '--full'
        assert $3 same_as '--no-legend'
        assert $4 same_as '--no-pager'
        assert $5 same_as '--user'
        assert $6 same_as '*'

        echo '-.mount      loaded active mounted Root Mount'
        echo 'boot.mount   loaded active mounted /boot'
        echo 'dbus.service loaded active running D-Bus System Message Bus'
        echo '-.slice      loaded active active  Root Slice'
        echo 'basic.target loaded active active  Basic System'
        echo 'dbus.socket  loaded failed running D-Bus System Message Bus Socket'
    }

    systemctl_mock_2() {
        assert $# equals 6
        assert $1 same_as 'list-unit-files'
        assert $2 same_as '--full'
        assert $3 same_as '--no-legend'
        assert $4 same_as '--no-pager'
        assert $5 same_as '--user'
        assert $6 same_as '*'

        echo 'dbus.service      static    -'
        echo 'basic.target      static    -'
        echo 'dbus.socket       static    -'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'systemctl status --user '

        echo 'systemctl'
    }

    _fzf_complete() {
        assert $# equals 8
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--multi'
        assert $4 same_as '--preview-window=right:70%:wrap'
        assert $5 matches '--preview=*'
        assert $6 same_as '--reverse'
        assert $7 same_as '--'
        assert $8 same_as 'systemctl status --user '

        run cat
        assert __fzf_extract_command mock_times 1
        assert systemctl mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[green]}●${reset_color} -.mount"
        assert ${lines[2]} same_as "${fg[green]}●${reset_color} -.slice"
        assert ${lines[3]} same_as "${fg[green]}●${reset_color} basic.target"
        assert ${lines[4]} same_as "${fg[green]}●${reset_color} boot.mount"
        assert ${lines[5]} same_as "${fg[green]}●${reset_color} dbus.service"
        assert ${lines[6]} same_as "${fg[red]}●${reset_color} dbus.socket"
    }

    prefix=
    _fzf_complete_systemctl 'systemctl status --user '
}

@test 'Testing preview: systemctl status **' {
    systemctl_mock_1() {}
    systemctl_mock_2() {}

    xargs_mock_1() {
        assert $# equals 6
        assert $1 same_as 'systemctl'
        assert $2 same_as 'status'
        assert $3 same_as '--full'
        assert $4 same_as '--no-legend'
        assert $5 same_as '--no-pager'
        assert $6 same_as '--'

        run cat
        assert ${#lines} equals 1
        assert ${lines[1]} same_as 'basic.target'

        echo '● basic.target - Basic System'
        echo '     Loaded: loaded (/usr/lib/systemd/system/basic.target; static; vendor preset: disabled)'
        echo '     Active: active since Wed 2020-01-01 00:00:00 JST; 2h ago'
        echo '       Docs: man:systemd.special(7)'
    }

    xargs_mock_2() {
        assert $# equals 6
        assert $1 same_as 'systemctl'
        assert $2 same_as 'status'
        assert $3 same_as '--full'
        assert $4 same_as '--no-legend'
        assert $5 same_as '--no-pager'
        assert $6 same_as '--'

        run cat
        assert ${#lines} equals 1
        assert ${lines[1]} same_as 'boot.mount'

        echo '● boot.mount - /boot'
        echo '     Loaded: loaded (/etc/fstab; generated)'
        echo '     Active: active (mounted) since Wed 2020-01-01 00:00:00 JST; 2h ago'
        echo '       Docs: man:systemd.special(7)'
        echo '      Where: /boot'
        echo '       What: /dev/sda2'
        echo '       Docs: man:fstab(5)'
        echo '             man:systemd-fstab-generator(8)'
        echo '      Tasks: 0 (limit: 2367)'
        echo '     Memory: 120.0K'
        echo '     CGroup: /system.slice/boot.mount'
    }

    _fzf_complete() {
        output=$(fzf_options=($@) preview '● basic.target')
        lines=(${(f)output})
        assert xargs mock_times 1
        assert ${#lines} equals 4
        assert ${lines[1]} same_as '● basic.target - Basic System'
        assert ${lines[2]} same_as '     Loaded: loaded (/usr/lib/systemd/system/basic.target; static; vendor preset: disabled)'
        assert ${lines[3]} same_as '     Active: active since Wed 2020-01-01 00:00:00 JST; 2h ago'
        assert ${lines[4]} same_as '       Docs: man:systemd.special(7)'

        output=$(fzf_options=($@) preview '● boot.mount')
        lines=(${(f)output})
        assert xargs mock_times 2
        assert ${lines[1]} same_as '● boot.mount - /boot'
        assert ${lines[2]} same_as '     Loaded: loaded (/etc/fstab; generated)'
        assert ${lines[3]} same_as '     Active: active (mounted) since Wed 2020-01-01 00:00:00 JST; 2h ago'
        assert ${lines[4]} same_as '       Docs: man:systemd.special(7)'
        assert ${lines[5]} same_as '      Where: /boot'
        assert ${lines[6]} same_as '       What: /dev/sda2'
        assert ${lines[7]} same_as '       Docs: man:fstab(5)'
        assert ${lines[8]} same_as '             man:systemd-fstab-generator(8)'
        assert ${lines[9]} same_as '      Tasks: 0 (limit: 2367)'
        assert ${lines[10]} same_as '     Memory: 120.0K'
        assert ${lines[11]} same_as '     CGroup: /system.slice/boot.mount'
    }

    prefix=
    _fzf_complete_systemctl 'systemctl status '
}

@test 'Testing preview: systemctl status --user **' {
    systemctl_mock_1() {}
    systemctl_mock_2() {}

    xargs_mock_1() {
        assert $# equals 7
        assert $1 same_as 'systemctl'
        assert $2 same_as 'status'
        assert $3 same_as '--full'
        assert $4 same_as '--no-legend'
        assert $5 same_as '--no-pager'
        assert $6 same_as '--user'
        assert $7 same_as '--'

        run cat
        assert ${#lines} equals 1
        assert ${lines[1]} same_as 'basic.target'

        echo '● basic.target - Basic System'
        echo '     Loaded: loaded (/usr/lib/systemd/system/basic.target; static; vendor preset: disabled)'
        echo '     Active: active since Wed 2020-01-01 00:00:00 JST; 2h ago'
        echo '       Docs: man:systemd.special(7)'
    }

    xargs_mock_2() {
        assert $# equals 7
        assert $1 same_as 'systemctl'
        assert $2 same_as 'status'
        assert $3 same_as '--full'
        assert $4 same_as '--no-legend'
        assert $5 same_as '--no-pager'
        assert $6 same_as '--user'
        assert $7 same_as '--'

        run cat
        assert ${#lines} equals 1
        assert ${lines[1]} same_as 'boot.mount'

        echo '● boot.mount - /boot'
        echo '     Loaded: loaded (/etc/fstab; generated)'
        echo '     Active: active (mounted) since Wed 2020-01-01 00:00:00 JST; 2h ago'
        echo '       Docs: man:systemd.special(7)'
        echo '      Where: /boot'
        echo '       What: /dev/sda2'
        echo '       Docs: man:fstab(5)'
        echo '             man:systemd-fstab-generator(8)'
        echo '      Tasks: 0 (limit: 2367)'
        echo '     Memory: 120.0K'
        echo '     CGroup: /system.slice/boot.mount'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'systemctl status --user '

        echo 'systemctl'
    }

    _fzf_complete() {
        output=$(fzf_options=($@) preview '● basic.target')
        lines=(${(f)output})
        assert xargs mock_times 1
        assert ${#lines} equals 4
        assert ${lines[1]} same_as '● basic.target - Basic System'
        assert ${lines[2]} same_as '     Loaded: loaded (/usr/lib/systemd/system/basic.target; static; vendor preset: disabled)'
        assert ${lines[3]} same_as '     Active: active since Wed 2020-01-01 00:00:00 JST; 2h ago'
        assert ${lines[4]} same_as '       Docs: man:systemd.special(7)'

        output=$(fzf_options=($@) preview '● boot.mount')
        lines=(${(f)output})
        assert xargs mock_times 2
        assert ${lines[1]} same_as '● boot.mount - /boot'
        assert ${lines[2]} same_as '     Loaded: loaded (/etc/fstab; generated)'
        assert ${lines[3]} same_as '     Active: active (mounted) since Wed 2020-01-01 00:00:00 JST; 2h ago'
        assert ${lines[4]} same_as '       Docs: man:systemd.special(7)'
        assert ${lines[5]} same_as '      Where: /boot'
        assert ${lines[6]} same_as '       What: /dev/sda2'
        assert ${lines[7]} same_as '       Docs: man:fstab(5)'
        assert ${lines[8]} same_as '             man:systemd-fstab-generator(8)'
        assert ${lines[9]} same_as '      Tasks: 0 (limit: 2367)'
        assert ${lines[10]} same_as '     Memory: 120.0K'
        assert ${lines[11]} same_as '     CGroup: /system.slice/boot.mount'
    }

    prefix=
    _fzf_complete_systemctl 'systemctl status --user '
}

@test 'Testing post: systemctl' {
    input=(
        '● basic.target'
        '● boot.mount'
        '● dbus.service'
        '● dbus.socket'
        '● docker.service'
    )

    run _fzf_complete_systemctl-units_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 5
    assert ${lines[1]} same_as 'basic.target'
    assert ${lines[2]} same_as 'boot.mount'
    assert ${lines[3]} same_as 'dbus.service'
    assert ${lines[4]} same_as 'dbus.socket'
    assert ${lines[5]} same_as 'docker.service'
}
