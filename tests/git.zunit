#!/usr/bin/env zunit

@setup {
    load ../fzf-zsh-completions.plugin.zsh
    load _helpers/mock.zsh
    load _helpers/assertions.zsh
    mock _fzf_complete_git_unknown-subcommand
    mock __fzf_extract_command

    pushd tests/_support/git
    DIR=$PWD
    FZF_DEFAULT_OPTS=--reverse

    {
        rm -rf .git
        cp -r _git .git

        echo file1 >> file1
        echo file2 >> directory1/file2
    } &> /dev/null

    preview() {
        for opt in $fzf_options; do
            if [[ $opt = --preview=* ]]; then
                eval ${${opt/--preview=/}/\{\}/${(q)@}} 2>&1
            fi
        done
    }
}

@teardown {
    (unmock _fzf_complete_git_checkout)
    (unmock _fzf_complete_git_unknown-subcommand)
    (unmock __fzf_extract_command)
    pushd $DIR

    {
        git reset --hard master
        git clean -d -f
    } &> /dev/null

    rm -rf .git
}

@test 'Testing overridden completion: git checkout **' {
    mock _fzf_complete_git_checkout

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git checkout '

        echo 'git'
    }

    _fzf_complete_git_checkout_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git checkout '
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git checkout '

    assert _fzf_complete_git_checkout mock_times 1
}

@test 'Testing overridden completion: git unknown-subcommand **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git unknown-subcommand '

        echo 'git'
    }

    _fzf_complete_git_unknown-subcommand_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git unknown-subcommand '
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git unknown-subcommand '

    assert _fzf_complete_git_unknown-subcommand mock_times 1
}

@test 'Testing completion: git **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    _fzf_path_completion() {
        assert $# equals 2
        assert $1 same_as ''
        assert $2 same_as 'git '

        assert __fzf_extract_command mock_times 1
    }

    prefix=
    _fzf_complete_git 'git '
}

@test 'Testing completion: TEST1=value1 TEST2=value2 git **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'TEST1=value1 TEST2=value2 git '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    _fzf_path_completion() {
        assert $# equals 2
        assert $1 same_as ''
        assert $2 same_as 'TEST1=value1 TEST2=value2 git '

        assert $TEST1 same_as value1
        assert $TEST2 same_as value2

        assert __fzf_extract_command mock_times 1
    }

    prefix=
    _fzf_complete_git 'TEST1=value1 TEST2=value2 git '

    assert $TEST1 is_empty
    assert $TEST2 is_empty
}

@test 'Testing completion: git checkout **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git checkout '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git checkout '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git checkout '
}

@test 'Testing completion: git checkout -- **' {
    run git checkout another-branch
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git checkout -- '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 9
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--preview-window=right:70%:wrap'
        assert $6 matches '--preview=*'
        assert $7 same_as '--reverse'
        assert $8 same_as '--'
        assert $9 same_as 'git checkout -- '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as " $reset_color${fg[red]}M$reset_color  file3 containing space "
        assert ${actual1[2]} same_as " $reset_color${fg[red]}M$reset_color directory1/file2"
        assert ${actual1[3]} same_as " $reset_color${fg[red]}M$reset_color directory2/file4"

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as " $reset_color${fg[red]}M$reset_color file1"
    }

    prefix=
    _fzf_complete_git 'git checkout -- '
}

@test 'Testing completion: git checkout -- file **' {
    run git checkout another-branch
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git checkout -- file '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 9
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--preview-window=right:70%:wrap'
        assert $6 matches '--preview=*'
        assert $7 same_as '--reverse'
        assert $8 same_as '--'
        assert $9 same_as 'git checkout -- file '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as " $reset_color${fg[red]}M$reset_color  file3 containing space "
        assert ${actual1[2]} same_as " $reset_color${fg[red]}M$reset_color directory1/file2"
        assert ${actual1[3]} same_as " $reset_color${fg[red]}M$reset_color directory2/file4"

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as " $reset_color${fg[red]}M$reset_color file1"
    }

    prefix=
    _fzf_complete_git 'git checkout -- file '
}

@test 'Testing completion in subdirectory: git checkout -- **' {
    run git checkout another-branch
    mkdir -p directory2/directory3/directory4
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'
    echo >> directory2/directory3/file7
    echo >> directory2/directory3/$'file8\ncontaining\nnewlines'
    echo >> directory2/directory3/directory4/file9

    cd directory2/directory3

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git checkout -- '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 9
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--preview-window=right:70%:wrap'
        assert $6 matches '--preview=*'
        assert $7 same_as '--reverse'
        assert $8 same_as '--'
        assert $9 same_as 'git checkout -- '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as " $reset_color${fg[red]}M$reset_color ../../ file3 containing space "
        assert ${actual1[2]} same_as " $reset_color${fg[red]}M$reset_color ../../directory1/file2"
        assert ${actual1[3]} same_as " $reset_color${fg[red]}M$reset_color ../../directory2/file4"

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as " $reset_color${fg[red]}M$reset_color ../../file1"
    }

    prefix=
    _fzf_complete_git 'git checkout -- '
}

@test 'Testing completion in subdirectory: git checkout -- file **' {
    run git checkout another-branch
    mkdir -p directory2/directory3/directory4
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'
    echo >> directory2/directory3/file7
    echo >> directory2/directory3/$'file8\ncontaining\nnewlines'
    echo >> directory2/directory3/directory4/file9

    cd directory2/directory3

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git checkout -- file '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 9
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--preview-window=right:70%:wrap'
        assert $6 matches '--preview=*'
        assert $7 same_as '--reverse'
        assert $8 same_as '--'
        assert $9 same_as 'git checkout -- file '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as " $reset_color${fg[red]}M$reset_color ../../ file3 containing space "
        assert ${actual1[2]} same_as " $reset_color${fg[red]}M$reset_color ../../directory1/file2"
        assert ${actual1[3]} same_as " $reset_color${fg[red]}M$reset_color ../../directory2/file4"

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as " $reset_color${fg[red]}M$reset_color ../../file1"
    }

    prefix=
    _fzf_complete_git 'git checkout -- file '
}

@test 'Testing completion: git checkout another-branch **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git checkout another-branch '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git checkout another-branch '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as ' file3 containing space '
        assert ${actual1[2]} same_as 'directory1/file2'
        assert ${actual1[3]} same_as 'directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as 'file1'
    }

    prefix=
    _fzf_complete_git 'git checkout another-branch '
}

@test 'Testing completion in subdirectory: git checkout another-branch **' {
    cd directory1

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git checkout another-branch '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git checkout another-branch '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as ' file3 containing space '
        assert ${actual1[2]} same_as 'directory1/file2'
        assert ${actual1[3]} same_as 'directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as 'file1'
    }

    prefix=
    _fzf_complete_git 'git checkout another-branch '
}

@test 'Testing completion: git checkout another-branch -- **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git checkout another-branch -- '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git checkout another-branch -- '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as ' file3 containing space '
        assert ${actual1[2]} same_as 'directory1/file2'
        assert ${actual1[3]} same_as 'directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as 'file1'
    }

    prefix=
    _fzf_complete_git 'git checkout another-branch -- '
}

@test 'Testing completion in subdirectory: git checkout another-branch -- **' {
    cd directory1

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git checkout another-branch -- '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git checkout another-branch -- '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as ' file3 containing space '
        assert ${actual1[2]} same_as 'directory1/file2'
        assert ${actual1[3]} same_as 'directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as 'file1'
    }

    prefix=
    _fzf_complete_git 'git checkout another-branch -- '
}

@test 'Testing completion: git checkout another-branch -- file **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git checkout another-branch -- file '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git checkout another-branch -- file '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as ' file3 containing space '
        assert ${actual1[2]} same_as 'directory1/file2'
        assert ${actual1[3]} same_as 'directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as 'file1'
    }

    prefix=
    _fzf_complete_git 'git checkout another-branch -- file '
}

@test 'Testing completion in subdirectory: git checkout another-branch -- file **' {
    cd directory1

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git checkout another-branch -- file '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git checkout another-branch -- file '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as ' file3 containing space '
        assert ${actual1[2]} same_as 'directory1/file2'
        assert ${actual1[3]} same_as 'directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as 'file1'
    }

    prefix=
    _fzf_complete_git 'git checkout another-branch -- file '
}

@test 'Testing completion: git checkout branch-that-does-not-exist **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git checkout branch-that-does-not-exist '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git checkout branch-that-does-not-exist '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 1

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 0
    }

    prefix=
    _fzf_complete_git 'git checkout branch-that-does-not-exist '
}

@test 'Testing completion: git checkout branch-that-does-not-exist -- **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git checkout branch-that-does-not-exist -- '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git checkout branch-that-does-not-exist -- '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 1

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 0
    }

    prefix=
    _fzf_complete_git 'git checkout branch-that-does-not-exist -- '
}

@test 'Testing completion: git checkout branch-that-does-not-exist -- file **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git checkout branch-that-does-not-exist -- file '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git checkout branch-that-does-not-exist -- file '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 1

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 0
    }

    prefix=
    _fzf_complete_git 'git checkout branch-that-does-not-exist -- file '
}

@test 'Testing completion: git diff **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git diff '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git diff '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git diff '
}

@test 'Testing completion: git diff -- **' {
    run git checkout another-branch
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git diff -- '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 9
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--preview-window=right:70%:wrap'
        assert $6 matches '--preview=*'
        assert $7 same_as '--reverse'
        assert $8 same_as '--'
        assert $9 same_as 'git diff -- '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as " $reset_color${fg[red]}M$reset_color  file3 containing space "
        assert ${actual1[2]} same_as " $reset_color${fg[red]}M$reset_color directory1/file2"
        assert ${actual1[3]} same_as " $reset_color${fg[red]}M$reset_color directory2/file4"

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as " $reset_color${fg[red]}M$reset_color file1"
    }

    prefix=
    _fzf_complete_git 'git diff -- '
}

@test 'Testing completion in subdirectory: git diff -- **' {
    run git checkout another-branch
    mkdir -p directory2/directory3/directory4
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'
    echo >> directory2/directory3/file7
    echo >> directory2/directory3/$'file8\ncontaining\nnewlines'
    echo >> directory2/directory3/directory4/file9

    cd directory2/directory3

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git diff -- '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 9
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--preview-window=right:70%:wrap'
        assert $6 matches '--preview=*'
        assert $7 same_as '--reverse'
        assert $8 same_as '--'
        assert $9 same_as 'git diff -- '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as " $reset_color${fg[red]}M$reset_color ../../ file3 containing space "
        assert ${actual1[2]} same_as " $reset_color${fg[red]}M$reset_color ../../directory1/file2"
        assert ${actual1[3]} same_as " $reset_color${fg[red]}M$reset_color ../../directory2/file4"

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as " $reset_color${fg[red]}M$reset_color ../../file1"
    }

    prefix=
    _fzf_complete_git 'git diff -- '
}

@test 'Testing completion: git log **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git log '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git log '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git log '
}

@test 'Testing completion: git log -- **' {
    run git checkout another-branch
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git log -- '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git log -- '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as ' file3 containing space '
        assert ${actual1[2]} same_as 'directory1/file2'
        assert ${actual1[3]} same_as 'directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as 'file1'
    }

    prefix=
    _fzf_complete_git 'git log -- '
}

@test 'Testing completion in subdirectory: git log -- **' {
    run git checkout another-branch
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'

    cd directory1

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git log -- '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git log -- '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as ' file3 containing space '
        assert ${actual1[2]} same_as 'directory1/file2'
        assert ${actual1[3]} same_as 'directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as 'file1'
    }

    prefix=
    _fzf_complete_git 'git log -- '
}

@test 'Testing completion: git rebase **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git rebase '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git rebase '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git rebase '
}

@test 'Testing completion: git reset **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git reset '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git reset '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git reset '
}

@test 'Testing completion: git reset another-branch **' {
    echo >> newfile
    run git add newfile

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git reset another-branch '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git reset another-branch '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as ' file3 containing space '
        assert ${actual1[2]} same_as 'directory1/file2'
        assert ${actual1[3]} same_as 'directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 3
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as 'file1'
        assert ${actual3[3]} same_as 'newfile'
    }

    prefix=
    _fzf_complete_git 'git reset another-branch '
}

@test 'Testing completion: git reset -- **' {
    echo >> newfile
    echo >> file1
    run git add newfile file1

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git reset -- '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 9
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--preview-window=right:70%:wrap'
        assert $6 matches '--preview=*'
        assert $7 same_as '--reverse'
        assert $8 same_as '--'
        assert $9 same_as 'git reset -- '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 1

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 2
        assert ${actual1[1]} same_as "$fg[green]M$reset_color $reset_color file1"
        assert ${actual1[2]} same_as "$fg[green]A$reset_color $reset_color newfile"
    }

    prefix=
    _fzf_complete_git 'git reset -- '
}

@test 'Testing completion: git reset @ -- **' {
    echo >> newfile
    echo >> file1
    run git add newfile file1

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git reset @ -- '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 9
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--preview-window=right:70%:wrap'
        assert $6 matches '--preview=*'
        assert $7 same_as '--reverse'
        assert $8 same_as '--'
        assert $9 same_as 'git reset @ -- '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 1

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 2
        assert ${actual1[1]} same_as "$fg[green]M$reset_color $reset_color file1"
        assert ${actual1[2]} same_as "$fg[green]A$reset_color $reset_color newfile"
    }

    prefix=
    _fzf_complete_git 'git reset @ -- '
}

@test 'Testing completion: git reset another-branch -- **' {
    echo >> newfile
    run git add newfile

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git reset another-branch -- '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git reset another-branch -- '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as ' file3 containing space '
        assert ${actual1[2]} same_as 'directory1/file2'
        assert ${actual1[3]} same_as 'directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 3
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as 'file1'
        assert ${actual3[3]} same_as 'newfile'
    }

    prefix=
    _fzf_complete_git 'git reset another-branch -- '
}

@test 'Testing completion: git reset --soft -- **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git reset --soft -- '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git reset --soft -- '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git reset --hard -- **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git reset --hard -- '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git reset --hard -- '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git reset --merge -- **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git reset --merge -- '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git reset --merge -- '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git reset --keep -- **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git reset --keep -- '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git reset --keep -- '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion in subdirectory: git reset -- **' {
    run git checkout another-branch
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'
    run git add .

    cd directory1

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git reset -- '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 9
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--preview-window=right:70%:wrap'
        assert $6 matches '--preview=*'
        assert $7 same_as '--reverse'
        assert $8 same_as '--'
        assert $9 same_as 'git reset -- '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 4
        assert ${actual1[1]} same_as "$fg[green]M$reset_color $reset_color ../ file3 containing space "
        assert ${actual1[2]} same_as "$fg[green]A$reset_color $reset_color ../ file5 containing space "
        assert ${actual1[3]} same_as "$fg[green]M$reset_color $reset_color ../directory1/file2"
        assert ${actual1[4]} same_as "$fg[green]M$reset_color $reset_color ../directory2/file4"

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as "$fg[green]A$reset_color $reset_color ../directory2/file6"
    }

    prefix=
    _fzf_complete_git 'git reset -- '
}

@test 'Testing completion: git switch **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git switch '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git switch '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git switch '
}

@test 'Testing completion: git branch **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git branch -D '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--multi'
        assert $4 same_as '--'
        assert $5 same_as 'git branch -D '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git branch -D '
}

@test 'Testing completion: git cherry-pick --cleanup=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git cherry-pick '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git cherry-pick --cleanup='

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as strip
        assert ${lines[2]} same_as whitespace
        assert ${lines[3]} same_as verbatim
        assert ${lines[4]} same_as scissors
        assert ${lines[5]} same_as default
    }

    prefix=--cleanup=
    _fzf_complete_git 'git cherry-pick '
}

@test 'Testing completion: git cherry-pick --cleanup **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git cherry-pick --cleanup '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git cherry-pick --cleanup '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as strip
        assert ${lines[2]} same_as whitespace
        assert ${lines[3]} same_as verbatim
        assert ${lines[4]} same_as scissors
        assert ${lines[5]} same_as default
    }

    prefix=
    _fzf_complete_git 'git cherry-pick --cleanup '
}

@test 'Testing completion: git cherry-pick --strategy=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git cherry-pick '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git cherry-pick --strategy='

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as octopus
        assert ${lines[2]} same_as ours
        assert ${lines[3]} same_as subtree
        assert ${lines[4]} same_as recursive
        assert ${lines[5]} same_as resolve
    }

    prefix=--strategy=
    _fzf_complete_git 'git cherry-pick '
}

@test 'Testing completion: git cherry-pick --strategy **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git cherry-pick --strategy '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git cherry-pick --strategy '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as octopus
        assert ${lines[2]} same_as ours
        assert ${lines[3]} same_as subtree
        assert ${lines[4]} same_as recursive
        assert ${lines[5]} same_as resolve
    }

    prefix=
    _fzf_complete_git 'git cherry-pick --strategy '
}

@test 'Testing completion: git cherry-pick -X **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git cherry-pick -X '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git cherry-pick -X '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 19
        assert ${lines[1]} same_as diff-algorithm=histogram
        assert ${lines[2]} same_as diff-algorithm=minimal
        assert ${lines[3]} same_as diff-algorithm=myers
        assert ${lines[4]} same_as diff-algorithm=patience
        assert ${lines[5]} same_as find-renames
        assert ${lines[6]} same_as find-renames=
        assert ${lines[7]} same_as ignore-all-space
        assert ${lines[8]} same_as ignore-cr-at-eol
        assert ${lines[9]} same_as ignore-space-at-eol
        assert ${lines[10]} same_as ignore-space-change
        assert ${lines[11]} same_as no-renames
        assert ${lines[12]} same_as no-renormalize
        assert ${lines[13]} same_as ours
        assert ${lines[14]} same_as patience
        assert ${lines[15]} same_as rename-threshold=
        assert ${lines[16]} same_as renormalize
        assert ${lines[17]} same_as subtree
        assert ${lines[18]} same_as subtree=
        assert ${lines[19]} same_as theirs
    }

    prefix=
    _fzf_complete_git 'git cherry-pick -X '
}

@test 'Testing completion: git cherry-pick -X**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git cherry-pick '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git cherry-pick -X'

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 19
        assert ${lines[1]} same_as diff-algorithm=histogram
        assert ${lines[2]} same_as diff-algorithm=minimal
        assert ${lines[3]} same_as diff-algorithm=myers
        assert ${lines[4]} same_as diff-algorithm=patience
        assert ${lines[5]} same_as find-renames
        assert ${lines[6]} same_as find-renames=
        assert ${lines[7]} same_as ignore-all-space
        assert ${lines[8]} same_as ignore-cr-at-eol
        assert ${lines[9]} same_as ignore-space-at-eol
        assert ${lines[10]} same_as ignore-space-change
        assert ${lines[11]} same_as no-renames
        assert ${lines[12]} same_as no-renormalize
        assert ${lines[13]} same_as ours
        assert ${lines[14]} same_as patience
        assert ${lines[15]} same_as rename-threshold=
        assert ${lines[16]} same_as renormalize
        assert ${lines[17]} same_as subtree
        assert ${lines[18]} same_as subtree=
        assert ${lines[19]} same_as theirs
    }

    prefix=-X
    _fzf_complete_git 'git cherry-pick '
}

@test 'Testing completion: git cherry-pick -qX **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git cherry-pick -qX '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git cherry-pick -qX '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 19
        assert ${lines[1]} same_as diff-algorithm=histogram
        assert ${lines[2]} same_as diff-algorithm=minimal
        assert ${lines[3]} same_as diff-algorithm=myers
        assert ${lines[4]} same_as diff-algorithm=patience
        assert ${lines[5]} same_as find-renames
        assert ${lines[6]} same_as find-renames=
        assert ${lines[7]} same_as ignore-all-space
        assert ${lines[8]} same_as ignore-cr-at-eol
        assert ${lines[9]} same_as ignore-space-at-eol
        assert ${lines[10]} same_as ignore-space-change
        assert ${lines[11]} same_as no-renames
        assert ${lines[12]} same_as no-renormalize
        assert ${lines[13]} same_as ours
        assert ${lines[14]} same_as patience
        assert ${lines[15]} same_as rename-threshold=
        assert ${lines[16]} same_as renormalize
        assert ${lines[17]} same_as subtree
        assert ${lines[18]} same_as subtree=
        assert ${lines[19]} same_as theirs
    }

    prefix=
    _fzf_complete_git 'git cherry-pick -qX '
}

@test 'Testing completion: git cherry-pick -qX**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git cherry-pick '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git cherry-pick -qX'

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 19
        assert ${lines[1]} same_as diff-algorithm=histogram
        assert ${lines[2]} same_as diff-algorithm=minimal
        assert ${lines[3]} same_as diff-algorithm=myers
        assert ${lines[4]} same_as diff-algorithm=patience
        assert ${lines[5]} same_as find-renames
        assert ${lines[6]} same_as find-renames=
        assert ${lines[7]} same_as ignore-all-space
        assert ${lines[8]} same_as ignore-cr-at-eol
        assert ${lines[9]} same_as ignore-space-at-eol
        assert ${lines[10]} same_as ignore-space-change
        assert ${lines[11]} same_as no-renames
        assert ${lines[12]} same_as no-renormalize
        assert ${lines[13]} same_as ours
        assert ${lines[14]} same_as patience
        assert ${lines[15]} same_as rename-threshold=
        assert ${lines[16]} same_as renormalize
        assert ${lines[17]} same_as subtree
        assert ${lines[18]} same_as subtree=
        assert ${lines[19]} same_as theirs
    }

    prefix=-qX
    _fzf_complete_git 'git cherry-pick '
}

@test 'Testing completion: git cherry-pick --strategy-option=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git cherry-pick '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git cherry-pick --strategy-option='

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 19
        assert ${lines[1]} same_as diff-algorithm=histogram
        assert ${lines[2]} same_as diff-algorithm=minimal
        assert ${lines[3]} same_as diff-algorithm=myers
        assert ${lines[5]} same_as find-renames
        assert ${lines[6]} same_as find-renames=
        assert ${lines[7]} same_as ignore-all-space
        assert ${lines[8]} same_as ignore-cr-at-eol
        assert ${lines[9]} same_as ignore-space-at-eol
        assert ${lines[10]} same_as ignore-space-change
        assert ${lines[11]} same_as no-renames
        assert ${lines[12]} same_as no-renormalize
        assert ${lines[13]} same_as ours
        assert ${lines[14]} same_as patience
        assert ${lines[15]} same_as rename-threshold=
        assert ${lines[16]} same_as renormalize
        assert ${lines[17]} same_as subtree
        assert ${lines[18]} same_as subtree=
        assert ${lines[19]} same_as theirs
    }

    prefix=--strategy-option=
    _fzf_complete_git 'git cherry-pick '
}

@test 'Testing completion: git cherry-pick --strategy-option **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git cherry-pick --strategy-option '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git cherry-pick --strategy-option '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 19
        assert ${lines[1]} same_as diff-algorithm=histogram
        assert ${lines[2]} same_as diff-algorithm=minimal
        assert ${lines[3]} same_as diff-algorithm=myers
        assert ${lines[4]} same_as diff-algorithm=patience
        assert ${lines[5]} same_as find-renames
        assert ${lines[6]} same_as find-renames=
        assert ${lines[7]} same_as ignore-all-space
        assert ${lines[8]} same_as ignore-cr-at-eol
        assert ${lines[9]} same_as ignore-space-at-eol
        assert ${lines[10]} same_as ignore-space-change
        assert ${lines[11]} same_as no-renames
        assert ${lines[12]} same_as no-renormalize
        assert ${lines[13]} same_as ours
        assert ${lines[14]} same_as patience
        assert ${lines[15]} same_as rename-threshold=
        assert ${lines[16]} same_as renormalize
        assert ${lines[17]} same_as subtree
        assert ${lines[18]} same_as subtree=
        assert ${lines[19]} same_as theirs
    }

    prefix=
    _fzf_complete_git 'git cherry-pick --strategy-option '
}

@test 'Testing completion: git cherry-pick **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git cherry-pick '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--multi'
        assert $4 same_as '--'
        assert $5 same_as 'git cherry-pick '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 1
        assert ${lines[1]} same_as "${fg[yellow]}6088ecf$reset_color   2nd commit"
    }

    prefix=
    _fzf_complete_git 'git cherry-pick '
}

@test 'Testing completion: git merge **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git merge '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--multi'
        assert $4 same_as '--'
        assert $5 same_as 'git merge '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git merge '
}

@test 'Testing completion: git revert **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git revert '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--multi'
        assert $4 same_as '--'
        assert $5 same_as 'git revert '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git revert '
}

@test 'Testing completion: git restore **' {
    run git checkout another-branch
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git restore '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 9
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--preview-window=right:70%:wrap'
        assert $6 matches '--preview=*'
        assert $7 same_as '--reverse'
        assert $8 same_as '--'
        assert $9 same_as 'git restore '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as " $reset_color${fg[red]}M$reset_color  file3 containing space "
        assert ${actual1[2]} same_as " $reset_color${fg[red]}M$reset_color directory1/file2"
        assert ${actual1[3]} same_as " $reset_color${fg[red]}M$reset_color directory2/file4"

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as " $reset_color${fg[red]}M$reset_color file1"
    }

    prefix=
    _fzf_complete_git 'git restore '
}

@test 'Testing completion: git restore --source=another-branch **' {
    echo >> newfile
    run git add newfile

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git restore --source=another-branch '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git restore --source=another-branch '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as ' file3 containing space '
        assert ${actual1[2]} same_as 'directory1/file2'
        assert ${actual1[3]} same_as 'directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 3
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as 'file1'
        assert ${actual3[3]} same_as 'newfile'
    }

    prefix=
    _fzf_complete_git 'git restore --source=another-branch '
}

@test 'Testing completion in subdirectory: git restore --source=another-branch **' {
    echo >> newfile
    run git add newfile

    cd directory1

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git restore --source=another-branch '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git restore --source=another-branch '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as '../ file3 containing space '
        assert ${actual1[2]} same_as '../directory1/file2'
        assert ${actual1[3]} same_as '../directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 3
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as '../file1'
        assert ${actual3[3]} same_as '../newfile'
    }

    prefix=
    _fzf_complete_git 'git restore --source=another-branch '
}

@test 'Testing completion: git restore --source another-branch **' {
    echo >> newfile
    run git add newfile

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git restore --source another-branch '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git restore --source another-branch '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as ' file3 containing space '
        assert ${actual1[2]} same_as 'directory1/file2'
        assert ${actual1[3]} same_as 'directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 3
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as 'file1'
        assert ${actual3[3]} same_as 'newfile'
    }

    prefix=
    _fzf_complete_git 'git restore --source another-branch '
}

@test 'Testing completion in subdirectory: git restore --source another-branch **' {
    echo >> newfile
    run git add newfile

    cd directory1

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git restore --source another-branch '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git restore --source another-branch '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as '../ file3 containing space '
        assert ${actual1[2]} same_as '../directory1/file2'
        assert ${actual1[3]} same_as '../directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 3
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as '../file1'
        assert ${actual3[3]} same_as '../newfile'
    }

    prefix=
    _fzf_complete_git 'git restore --source another-branch '
}

@test 'Testing completion: git restore -s another-branch **' {
    echo >> newfile
    run git add newfile

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git restore -s another-branch '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git restore -s another-branch '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as ' file3 containing space '
        assert ${actual1[2]} same_as 'directory1/file2'
        assert ${actual1[3]} same_as 'directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 3
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as 'file1'
        assert ${actual3[3]} same_as 'newfile'
    }

    prefix=
    _fzf_complete_git 'git restore -s another-branch '
}

@test 'Testing completion in subdirectory: git restore -s another-branch **' {
    echo >> newfile
    run git add newfile

    cd directory1

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git restore -s another-branch '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git restore -s another-branch '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as '../ file3 containing space '
        assert ${actual1[2]} same_as '../directory1/file2'
        assert ${actual1[3]} same_as '../directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 3
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as '../file1'
        assert ${actual3[3]} same_as '../newfile'
    }

    prefix=
    _fzf_complete_git 'git restore -s another-branch '
}

@test 'Testing completion: git restore -sanother-branch **' {
    echo >> newfile
    run git add newfile

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git restore -sanother-branch '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git restore -sanother-branch '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as ' file3 containing space '
        assert ${actual1[2]} same_as 'directory1/file2'
        assert ${actual1[3]} same_as 'directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 3
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as 'file1'
        assert ${actual3[3]} same_as 'newfile'
    }

    prefix=
    _fzf_complete_git 'git restore -sanother-branch '
}

@test 'Testing completion in subdirectory: git restore -sanother-branch **' {
    echo >> newfile
    run git add newfile

    cd directory1

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git restore -sanother-branch '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git restore -sanother-branch '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as '../ file3 containing space '
        assert ${actual1[2]} same_as '../directory1/file2'
        assert ${actual1[3]} same_as '../directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 3
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as '../file1'
        assert ${actual3[3]} same_as '../newfile'
    }

    prefix=
    _fzf_complete_git 'git restore -sanother-branch '
}

@test 'Testing completion: git restore -qs another-branch **' {
    echo >> newfile
    run git add newfile

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git restore -qs another-branch '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git restore -qs another-branch '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as ' file3 containing space '
        assert ${actual1[2]} same_as 'directory1/file2'
        assert ${actual1[3]} same_as 'directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 3
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as 'file1'
        assert ${actual3[3]} same_as 'newfile'
    }

    prefix=
    _fzf_complete_git 'git restore -qs another-branch '
}

@test 'Testing completion in subdirectory: git restore -qs another-branch **' {
    echo >> newfile
    run git add newfile

    cd directory1

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git restore -qs another-branch '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git restore -qs another-branch '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as '../ file3 containing space '
        assert ${actual1[2]} same_as '../directory1/file2'
        assert ${actual1[3]} same_as '../directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 3
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as '../file1'
        assert ${actual3[3]} same_as '../newfile'
    }

    prefix=
    _fzf_complete_git 'git restore -qs another-branch '
}

@test 'Testing completion: git restore -qsanother-branch **' {
    echo >> newfile
    run git add newfile

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git restore -qsanother-branch '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git restore -qsanother-branch '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as ' file3 containing space '
        assert ${actual1[2]} same_as 'directory1/file2'
        assert ${actual1[3]} same_as 'directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 3
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as 'file1'
        assert ${actual3[3]} same_as 'newfile'
    }

    prefix=
    _fzf_complete_git 'git restore -qsanother-branch '
}

@test 'Testing completion in subdirectory: git restore -qsanother-branch **' {
    echo >> newfile
    run git add newfile

    cd directory1

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git restore -qsanother-branch '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git restore -qsanother-branch '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as '../ file3 containing space '
        assert ${actual1[2]} same_as '../directory1/file2'
        assert ${actual1[3]} same_as '../directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 3
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as '../file1'
        assert ${actual3[3]} same_as '../newfile'
    }

    prefix=
    _fzf_complete_git 'git restore -qsanother-branch '
}

@test 'Testing completion: git restore --staged **' {
    run git checkout another-branch
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'
    run git add file1 ' file3 containing space ' $'directory2/file4\ncontaining\nnewlines'

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git restore --staged '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 9
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--preview-window=right:70%:wrap'
        assert $6 matches '--preview=*'
        assert $7 same_as '--reverse'
        assert $8 same_as '--'
        assert $9 same_as 'git restore --staged '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 2
        assert ${actual1[1]} same_as "${fg[green]}M$reset_color $reset_color  file3 containing space "
        assert ${actual1[2]} same_as "${fg[green]}M$reset_color $reset_color directory2/file4"

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as "${fg[green]}M$reset_color $reset_color file1"
    }

    prefix=
    _fzf_complete_git 'git restore --staged '
}

@test 'Testing completion: git restore -S **' {
    run git checkout another-branch
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'
    run git add file1 ' file3 containing space ' $'directory2/file4\ncontaining\nnewlines'

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git restore -S '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 9
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--preview-window=right:70%:wrap'
        assert $6 matches '--preview=*'
        assert $7 same_as '--reverse'
        assert $8 same_as '--'
        assert $9 same_as 'git restore -S '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 2
        assert ${actual1[1]} same_as "${fg[green]}M$reset_color $reset_color  file3 containing space "
        assert ${actual1[2]} same_as "${fg[green]}M$reset_color $reset_color directory2/file4"

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as "${fg[green]}M$reset_color $reset_color file1"
    }

    prefix=
    _fzf_complete_git 'git restore -S '
}

@test 'Testing completion: git restore -qSq **' {
    run git checkout another-branch
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'
    run git add file1 ' file3 containing space ' $'directory2/file4\ncontaining\nnewlines'

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git restore -qSq '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 9
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--preview-window=right:70%:wrap'
        assert $6 matches '--preview=*'
        assert $7 same_as '--reverse'
        assert $8 same_as '--'
        assert $9 same_as 'git restore -qSq '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 2
        assert ${actual1[1]} same_as "${fg[green]}M$reset_color $reset_color  file3 containing space "
        assert ${actual1[2]} same_as "${fg[green]}M$reset_color $reset_color directory2/file4"

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as "${fg[green]}M$reset_color $reset_color file1"
    }

    prefix=
    _fzf_complete_git 'git restore -qSq '
}

@test 'Testing completion: git restore --source=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git restore '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git restore --source='

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=--source=
    _fzf_complete_git 'git restore '
}

@test 'Testing completion: git restore --source **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git restore --source '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git restore --source '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git restore --source '
}

@test 'Testing completion: git restore -s **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git restore -s '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git restore -s '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git restore -s '
}

@test 'Testing completion: git restore -s**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git restore '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git restore -s'

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=-s
    _fzf_complete_git 'git restore '
}

@test 'Testing completion: git commit --fixup=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git commit --fixup='

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=--fixup=
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit --reedit-message=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git commit --reedit-message='

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=--reedit-message=
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit --reuse-message=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git commit --reuse-message='

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=--reuse-message=
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit --squash=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git commit --squash='

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=--squash=
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit -c **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit -c '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git commit -c '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git commit -c '
}

@test 'Testing completion: git commit -c**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git commit -c'

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=-c
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit -qc **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit -qc '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git commit -qc '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git commit -qc '
}

@test 'Testing completion: git commit -qc**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git commit -qc'

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=-qc
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit -C **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit -C '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git commit -C '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git commit -C '
}

@test 'Testing completion: git commit -C**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git commit -C'

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=-C
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit -qC **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit -qC '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git commit -qC '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git commit -qC '
}

@test 'Testing completion: git commit -qC**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git commit -qC'

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=-qC
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit --fixup **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit --fixup '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git commit --fixup '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git commit --fixup '
}

@test 'Testing completion: git commit --reedit-message **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit --reedit-message '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git commit --reedit-message '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git commit --reedit-message '
}

@test 'Testing completion: git commit --reuse-message **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit --reuse-message '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git commit --reuse-message '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git commit --reuse-message '
}

@test 'Testing completion: git commit --squash **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit --squash '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git commit --squash '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git commit --squash '
}

@test 'Testing completion: git commit --message=**' {
    run git checkout another-branch

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git commit --message='

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "${fg[yellow]}6088ecf$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}3e209a3$reset_color  1st commit"
    }

    prefix=--message=
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit -m **' {
    run git checkout another-branch

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit -m '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git commit -m '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "${fg[yellow]}6088ecf$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}3e209a3$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git commit -m '
}

@test 'Testing completion: git commit -m**' {
    run git checkout another-branch

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git commit -m'

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "${fg[yellow]}6088ecf$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}3e209a3$reset_color  1st commit"
    }

    prefix=-m
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit -qm **' {
    run git checkout another-branch

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit -qm '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git commit -qm '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "${fg[yellow]}6088ecf$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}3e209a3$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git commit -qm '
}

@test 'Testing completion: git commit -qm**' {
    run git checkout another-branch

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git commit -qm'

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "${fg[yellow]}6088ecf$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}3e209a3$reset_color  1st commit"
    }

    prefix=-qm
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit --message **' {
    run git checkout another-branch

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit --message '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git commit --message '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "${fg[yellow]}6088ecf$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}3e209a3$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git commit --message '
}

@test 'Testing completion: git commit --author=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=--author=
    _fzf_complete_git 'git commit '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git commit --date=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=--date=
    _fzf_complete_git 'git commit '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git commit --author **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit --author '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git commit --author '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git commit --date **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit --date '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git commit --date '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git commit --file=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit --file='
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=--file=
    _fzf_complete_git 'git commit '

    assert __fzf_extract_command mock_times 1
}

@test 'Testing completion: git commit --template=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit --template='
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=--template=
    _fzf_complete_git 'git commit '

    assert __fzf_extract_command mock_times 1
}

@test 'Testing completion: git commit --pathspec-from-file=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit --pathspec-from-file='
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=--pathspec-from-file=
    _fzf_complete_git 'git commit '

    assert __fzf_extract_command mock_times 1
}

@test 'Testing completion: git commit -F **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit -F '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit -F '
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=
    _fzf_complete_git 'git commit -F '

    assert __fzf_extract_command mock_times 1
}

@test 'Testing completion: git commit -F**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit -F'
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=-F
    _fzf_complete_git 'git commit '

    assert __fzf_extract_command mock_times 1
}

@test 'Testing completion: git commit -qF **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit -qF '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit -qF '
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=
    _fzf_complete_git 'git commit -qF '

    assert __fzf_extract_command mock_times 1
}

@test 'Testing completion: git commit -qF**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit -qF'
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=-qF
    _fzf_complete_git 'git commit '

    assert __fzf_extract_command mock_times 1
}

@test 'Testing completion: git commit -t **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit -t '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit -t '
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=
    _fzf_complete_git 'git commit -t '

    assert __fzf_extract_command mock_times 1
}

@test 'Testing completion: git commit -t**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit -t'
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=-t
    _fzf_complete_git 'git commit '

    assert __fzf_extract_command mock_times 1
}

@test 'Testing completion: git commit -qt **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit -qt '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit -qt '
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=
    _fzf_complete_git 'git commit -qt '

    assert __fzf_extract_command mock_times 1
}

@test 'Testing completion: git commit -qt**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit -qt'
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=-qt
    _fzf_complete_git 'git commit '

    assert __fzf_extract_command mock_times 1
}

@test 'Testing completion: git commit --file **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit --file '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit --file '
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=
    _fzf_complete_git 'git commit --file '

    assert __fzf_extract_command mock_times 1
}

@test 'Testing completion: git commit --template **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit --template '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit --template '
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=
    _fzf_complete_git 'git commit --template '

    assert __fzf_extract_command mock_times 1
}

@test 'Testing completion: git commit --pathspec-from-file **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit --pathspec-from-file '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit --pathspec-from-file '
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=
    _fzf_complete_git 'git commit --pathspec-from-file '

    assert __fzf_extract_command mock_times 1
}

@test 'Testing completion: git commit --cleanup=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git commit --cleanup='

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as strip
        assert ${lines[2]} same_as whitespace
        assert ${lines[3]} same_as verbatim
        assert ${lines[4]} same_as scissors
        assert ${lines[5]} same_as default
    }

    prefix=--cleanup=
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit --cleanup **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit --cleanup '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git commit --cleanup '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as strip
        assert ${lines[2]} same_as whitespace
        assert ${lines[3]} same_as verbatim
        assert ${lines[4]} same_as scissors
        assert ${lines[5]} same_as default
    }

    prefix=
    _fzf_complete_git 'git commit --cleanup '
}

@test 'Testing completion: git commit -u**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git commit -u'

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as no
        assert ${lines[2]} same_as normal
        assert ${lines[3]} same_as all
    }

    prefix=-u
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit -qu**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git commit -qu'

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as no
        assert ${lines[2]} same_as normal
        assert ${lines[3]} same_as all
    }

    prefix=-qu
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit --untracked-files=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git commit --untracked-files='

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as no
        assert ${lines[2]} same_as normal
        assert ${lines[3]} same_as all
    }

    prefix=--untracked-files=
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit **' {
    run git checkout another-branch
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 9
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--preview-window=right:70%:wrap'
        assert $6 matches '--preview=*'
        assert $7 same_as '--reverse'
        assert $8 same_as '--'
        assert $9 same_as 'git commit '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as " $reset_color${fg[red]}M$reset_color  file3 containing space "
        assert ${actual1[2]} same_as " $reset_color${fg[red]}M$reset_color directory1/file2"
        assert ${actual1[3]} same_as " $reset_color${fg[red]}M$reset_color directory2/file4"

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as " $reset_color${fg[red]}M$reset_color file1"
    }

    prefix=
    _fzf_complete_git 'git commit '
}

@test 'Testing completion in subdirectory: git commit **' {
    run git checkout another-branch
    mkdir -p directory2/directory3/directory4
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'
    echo >> directory2/directory3/file7
    echo >> directory2/directory3/$'file8\ncontaining\nnewlines'
    echo >> directory2/directory3/directory4/file9

    cd directory2/directory3

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 9
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--preview-window=right:70%:wrap'
        assert $6 matches '--preview=*'
        assert $7 same_as '--reverse'
        assert $8 same_as '--'
        assert $9 same_as 'git commit '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as " $reset_color${fg[red]}M$reset_color ../../ file3 containing space "
        assert ${actual1[2]} same_as " $reset_color${fg[red]}M$reset_color ../../directory1/file2"
        assert ${actual1[3]} same_as " $reset_color${fg[red]}M$reset_color ../../directory2/file4"

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as " $reset_color${fg[red]}M$reset_color ../../file1"
    }

    prefix=
    _fzf_complete_git 'git commit '
}

@test 'Testing completion: git commit -- **' {
    run git checkout another-branch
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit -- '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 9
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--preview-window=right:70%:wrap'
        assert $6 matches '--preview=*'
        assert $7 same_as '--reverse'
        assert $8 same_as '--'
        assert $9 same_as 'git commit -- '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as " $reset_color${fg[red]}M$reset_color  file3 containing space "
        assert ${actual1[2]} same_as " $reset_color${fg[red]}M$reset_color directory1/file2"
        assert ${actual1[3]} same_as " $reset_color${fg[red]}M$reset_color directory2/file4"

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as " $reset_color${fg[red]}M$reset_color file1"
    }

    prefix=
    _fzf_complete_git 'git commit -- '
}

@test 'Testing completion in subdirectory: git commit -- **' {
    run git checkout another-branch
    mkdir -p directory2/directory3/directory4
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'
    echo >> directory2/directory3/file7
    echo >> directory2/directory3/$'file8\ncontaining\nnewlines'
    echo >> directory2/directory3/directory4/file9

    cd directory2/directory3

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit -- '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 9
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--preview-window=right:70%:wrap'
        assert $6 matches '--preview=*'
        assert $7 same_as '--reverse'
        assert $8 same_as '--'
        assert $9 same_as 'git commit -- '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as " $reset_color${fg[red]}M$reset_color ../../ file3 containing space "
        assert ${actual1[2]} same_as " $reset_color${fg[red]}M$reset_color ../../directory1/file2"
        assert ${actual1[3]} same_as " $reset_color${fg[red]}M$reset_color ../../directory2/file4"

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as " $reset_color${fg[red]}M$reset_color ../../file1"
    }

    prefix=
    _fzf_complete_git 'git commit -- '
}

@test 'Testing completion: git add **' {
    run git checkout another-branch
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git add '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 9
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--preview-window=right:70%:wrap'
        assert $6 matches '--preview=*'
        assert $7 same_as '--reverse'
        assert $8 same_as '--'
        assert $9 same_as 'git add '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as " $reset_color${fg[red]}M$reset_color  file3 containing space "
        assert ${actual1[2]} same_as " $reset_color${fg[red]}M$reset_color directory1/file2"
        assert ${actual1[3]} same_as " $reset_color${fg[red]}M$reset_color directory2/file4"

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 4
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as " $reset_color${fg[red]}M$reset_color file1"
        assert ${actual3[3]} same_as "${fg[red]}?$reset_color${fg[red]}?$reset_color  file5 containing space "
        assert ${actual3[4]} same_as "${fg[red]}?$reset_color${fg[red]}?$reset_color directory2/file6"

        actual4=(${(0)lines[4]})
        assert ${#actual4} equals 1
        assert ${actual4[1]} same_as 'containing'

        actual5=(${(0)lines[5]})
        assert ${#actual5} equals 1
        assert ${actual5[1]} same_as 'newlines'
    }

    prefix=
    _fzf_complete_git 'git add '
}

@test 'Testing completion in subdirectory: git add **' {
    run git checkout another-branch
    mkdir -p directory2/directory3/directory4
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'
    echo >> directory2/directory3/file7
    echo >> directory2/directory3/$'file8\ncontaining\nnewlines'
    echo >> directory2/directory3/directory4/file9

    cd directory2/directory3

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git add '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 9
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--preview-window=right:70%:wrap'
        assert $6 matches '--preview=*'
        assert $7 same_as '--reverse'
        assert $8 same_as '--'
        assert $9 same_as 'git add '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 7

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as " $reset_color${fg[red]}M$reset_color ../../ file3 containing space "
        assert ${actual1[2]} same_as " $reset_color${fg[red]}M$reset_color ../../directory1/file2"
        assert ${actual1[3]} same_as " $reset_color${fg[red]}M$reset_color ../../directory2/file4"

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 6
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as " $reset_color${fg[red]}M$reset_color ../../file1"
        assert ${actual3[3]} same_as "${fg[red]}?$reset_color${fg[red]}?$reset_color ../../ file5 containing space "
        assert ${actual3[4]} same_as "${fg[red]}?$reset_color${fg[red]}?$reset_color ../../directory2/directory3/directory4/file9"
        assert ${actual3[5]} same_as "${fg[red]}?$reset_color${fg[red]}?$reset_color ../../directory2/directory3/file7"
        assert ${actual3[6]} same_as "${fg[red]}?$reset_color${fg[red]}?$reset_color ../../directory2/directory3/file8"

        actual4=(${(0)lines[4]})
        assert ${#actual4} equals 1
        assert ${actual4[1]} same_as 'containing'

        actual5=(${(0)lines[5]})
        assert ${#actual5} equals 2
        assert ${actual5[1]} same_as 'newlines'
        assert ${actual5[2]} same_as "${fg[red]}?$reset_color${fg[red]}?$reset_color ../../directory2/file6"

        actual6=(${(0)lines[6]})
        assert ${#actual6} equals 1
        assert ${actual6[1]} same_as 'containing'

        actual7=(${(0)lines[7]})
        assert ${#actual7} equals 1
        assert ${actual7[1]} same_as 'newlines'
    }

    prefix=
    _fzf_complete_git 'git add '
}

@test 'Testing completion: git fetch --recurse-submodules=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git fetch --recurse-submodules='

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as yes
        assert ${lines[2]} same_as on-demand
        assert ${lines[3]} same_as no
    }

    prefix=--recurse-submodules=
    _fzf_complete_git 'git fetch '
}

@test 'Testing completion: git fetch --recurse-submodules-default=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git fetch --recurse-submodules-default='

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 2
        assert ${lines[1]} same_as yes
        assert ${lines[2]} same_as on-demand
    }

    prefix=--recurse-submodules-default=
    _fzf_complete_git 'git fetch '
}

@test 'Testing completion: git fetch --recurse-submodules-default **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch --recurse-submodules-default '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git fetch --recurse-submodules-default '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 2
        assert ${lines[1]} same_as yes
        assert ${lines[2]} same_as on-demand
    }

    prefix=
    _fzf_complete_git 'git fetch --recurse-submodules-default '
}

@test 'Testing completion: git fetch --shallow-exclude=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git fetch --shallow-exclude='

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=--shallow-exclude=
    _fzf_complete_git 'git fetch '
}

@test 'Testing completion: git fetch --shallow-exclude **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch --shallow-exclude '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git fetch --shallow-exclude '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git fetch --shallow-exclude '
}

@test 'Testing completion: git fetch --negotiation-tip=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git fetch --negotiation-tip='

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=--negotiation-tip=
    _fzf_complete_git 'git fetch '
}

@test 'Testing completion: git fetch --negotiation-tip **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch --negotiation-tip '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git fetch --negotiation-tip '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git fetch --negotiation-tip '
}

@test 'Testing completion: git fetch -j**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=-j
    _fzf_complete_git 'git fetch '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git fetch -j **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch -o '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git fetch -o '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git fetch --jobs=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch --jobs '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git fetch --jobs '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git fetch --jobs **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch --jobs '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git fetch --jobs '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git fetch -o **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch -o '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git fetch -o '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git fetch -o**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=-o
    _fzf_complete_git 'git fetch '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git fetch -qo **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch -qo '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git fetch -qo '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git fetch -qo**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=-qo
    _fzf_complete_git 'git fetch '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git fetch --depth=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=--depth=
    _fzf_complete_git 'git fetch '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git fetch --depth **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch --depth '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git fetch --depth '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git fetch --deepen=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=--deepen=
    _fzf_complete_git 'git fetch '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git fetch --deepen **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch --deepen '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git fetch --deepen '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git fetch --server-option=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=--server-option=
    _fzf_complete_git 'git fetch '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git fetch --server-option **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch --server-option '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git fetch --server-option '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git fetch --shallow-since=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=--shallow-since=
    _fzf_complete_git 'git fetch '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git fetch --shallow-since **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch --shallow-since '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git fetch --shallow-since '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git fetch --submodule-prefix=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=--submodule-prefix
    _fzf_complete_git 'git fetch '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git fetch --submodule-prefix **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch --submodule-prefix '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git fetch --submodule-prefix '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git fetch --upload-pack=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=--upload-pack
    _fzf_complete_git 'git fetch '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git fetch --upload-pack **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch --upload-pack '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git fetch --upload-pack '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git fetch **' {
    run git remote add origin git@github.com:chitoku-k/fzf-zsh-completions
    run git remote add upstream git@example.com:example/fzf-zsh-completions
    run git remote add example example
    run git config alias.remotes 'remote -v'
    run git config remotes.group1 'origin upstream'
    run git config remotes.group2 'origin upstream example'

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--multi'
        assert $4 same_as '--'
        assert $5 same_as 'git fetch '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}example $reset_color  example (fetch)"
        assert ${lines[2]} same_as "${fg[yellow]}origin  $reset_color  git@github.com:chitoku-k/fzf-zsh-completions (fetch)"
        assert ${lines[3]} same_as "${fg[yellow]}upstream$reset_color  git@example.com:example/fzf-zsh-completions (fetch)"
        assert ${lines[4]} same_as "${fg[yellow]}group1  $reset_color  origin upstream"
        assert ${lines[5]} same_as "${fg[yellow]}group2  $reset_color  origin upstream example"
    }

    prefix=
    _fzf_complete_git 'git fetch '
}

@test 'Testing completion: git fetch origin **' {
    run git remote add origin ${DIR%/*}/remote.git

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch origin '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--multi'
        assert $4 same_as '--'
        assert $5 same_as 'git fetch origin '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color"
        assert ${lines[3]} same_as "${fg[yellow]}annotated     $reset_color  ${fg[green]}tag   $reset_color"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color"
        assert ${lines[5]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color"
    }

    prefix=
    _fzf_complete_git 'git fetch origin '
}

@test 'Testing completion: git fetch --multiple origin **' {
    run git remote add origin git@github.com:chitoku-k/fzf-zsh-completions
    run git remote add upstream git@example.com:example/fzf-zsh-completions
    run git remote add example example
    run git config remotes.group1 'origin upstream'
    run git config remotes.group2 'origin upstream example'

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git fetch --multiple origin '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--multi'
        assert $4 same_as '--'
        assert $5 same_as 'git fetch --multiple origin '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}example $reset_color  example (fetch)"
        assert ${lines[2]} same_as "${fg[yellow]}origin  $reset_color  git@github.com:chitoku-k/fzf-zsh-completions (fetch)"
        assert ${lines[3]} same_as "${fg[yellow]}upstream$reset_color  git@example.com:example/fzf-zsh-completions (fetch)"
        assert ${lines[4]} same_as "${fg[yellow]}group1  $reset_color  origin upstream"
        assert ${lines[5]} same_as "${fg[yellow]}group2  $reset_color  origin upstream example"
    }

    prefix=
    _fzf_complete_git 'git fetch --multiple origin '
}

@test 'Testing completion: git pull --recurse-submodules=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git pull --recurse-submodules='

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as yes
        assert ${lines[2]} same_as on-demand
        assert ${lines[3]} same_as no
    }

    prefix=--recurse-submodules=
    _fzf_complete_git 'git pull '
}

@test 'Testing completion: git pull --cleanup=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git pull --cleanup='

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as strip
        assert ${lines[2]} same_as whitespace
        assert ${lines[3]} same_as verbatim
        assert ${lines[4]} same_as scissors
        assert ${lines[5]} same_as default
    }

    prefix=--cleanup=
    _fzf_complete_git 'git pull '
}

@test 'Testing completion: git pull --cleanup **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull --cleanup '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git pull --cleanup '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as strip
        assert ${lines[2]} same_as whitespace
        assert ${lines[3]} same_as verbatim
        assert ${lines[4]} same_as scissors
        assert ${lines[5]} same_as default
    }

    prefix=
    _fzf_complete_git 'git pull --cleanup '
}

@test 'Testing completion: git pull -s **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull -s '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git pull -s '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as octopus
        assert ${lines[2]} same_as ours
        assert ${lines[3]} same_as subtree
        assert ${lines[4]} same_as recursive
        assert ${lines[5]} same_as resolve
    }

    prefix=
    _fzf_complete_git 'git pull -s '
}

@test 'Testing completion: git pull -s**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git pull -s'

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as octopus
        assert ${lines[2]} same_as ours
        assert ${lines[3]} same_as subtree
        assert ${lines[4]} same_as recursive
        assert ${lines[5]} same_as resolve
    }

    prefix=-s
    _fzf_complete_git 'git pull '
}

@test 'Testing completion: git pull -qs **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull -qs '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git pull -qs '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as octopus
        assert ${lines[2]} same_as ours
        assert ${lines[3]} same_as subtree
        assert ${lines[4]} same_as recursive
        assert ${lines[5]} same_as resolve
    }

    prefix=
    _fzf_complete_git 'git pull -qs '
}

@test 'Testing completion: git pull -qs**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git pull -qs'

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as octopus
        assert ${lines[2]} same_as ours
        assert ${lines[3]} same_as subtree
        assert ${lines[4]} same_as recursive
        assert ${lines[5]} same_as resolve
    }

    prefix=-qs
    _fzf_complete_git 'git pull '
}

@test 'Testing completion: git pull --strategy=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git pull --strategy='

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as octopus
        assert ${lines[2]} same_as ours
        assert ${lines[3]} same_as subtree
        assert ${lines[4]} same_as recursive
        assert ${lines[5]} same_as resolve
    }

    prefix=--strategy=
    _fzf_complete_git 'git pull '
}

@test 'Testing completion: git pull --strategy **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull --strategy '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git pull --strategy '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as octopus
        assert ${lines[2]} same_as ours
        assert ${lines[3]} same_as subtree
        assert ${lines[4]} same_as recursive
        assert ${lines[5]} same_as resolve
    }

    prefix=
    _fzf_complete_git 'git pull --strategy '
}

@test 'Testing completion: git pull -X **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull -X '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git pull -X '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 19
        assert ${lines[1]} same_as diff-algorithm=histogram
        assert ${lines[2]} same_as diff-algorithm=minimal
        assert ${lines[3]} same_as diff-algorithm=myers
        assert ${lines[4]} same_as diff-algorithm=patience
        assert ${lines[5]} same_as find-renames
        assert ${lines[6]} same_as find-renames=
        assert ${lines[7]} same_as ignore-all-space
        assert ${lines[8]} same_as ignore-cr-at-eol
        assert ${lines[9]} same_as ignore-space-at-eol
        assert ${lines[10]} same_as ignore-space-change
        assert ${lines[11]} same_as no-renames
        assert ${lines[12]} same_as no-renormalize
        assert ${lines[13]} same_as ours
        assert ${lines[14]} same_as patience
        assert ${lines[15]} same_as rename-threshold=
        assert ${lines[16]} same_as renormalize
        assert ${lines[17]} same_as subtree
        assert ${lines[18]} same_as subtree=
        assert ${lines[19]} same_as theirs
    }

    prefix=
    _fzf_complete_git 'git pull -X '
}

@test 'Testing completion: git pull -X**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git pull -X'

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 19
        assert ${lines[1]} same_as diff-algorithm=histogram
        assert ${lines[2]} same_as diff-algorithm=minimal
        assert ${lines[3]} same_as diff-algorithm=myers
        assert ${lines[4]} same_as diff-algorithm=patience
        assert ${lines[5]} same_as find-renames
        assert ${lines[6]} same_as find-renames=
        assert ${lines[7]} same_as ignore-all-space
        assert ${lines[8]} same_as ignore-cr-at-eol
        assert ${lines[9]} same_as ignore-space-at-eol
        assert ${lines[10]} same_as ignore-space-change
        assert ${lines[11]} same_as no-renames
        assert ${lines[12]} same_as no-renormalize
        assert ${lines[13]} same_as ours
        assert ${lines[14]} same_as patience
        assert ${lines[15]} same_as rename-threshold=
        assert ${lines[16]} same_as renormalize
        assert ${lines[17]} same_as subtree
        assert ${lines[18]} same_as subtree=
        assert ${lines[19]} same_as theirs
    }

    prefix=-X
    _fzf_complete_git 'git pull '
}

@test 'Testing completion: git pull -qX **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull -qX '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git pull -qX '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 19
        assert ${lines[1]} same_as diff-algorithm=histogram
        assert ${lines[2]} same_as diff-algorithm=minimal
        assert ${lines[3]} same_as diff-algorithm=myers
        assert ${lines[4]} same_as diff-algorithm=patience
        assert ${lines[5]} same_as find-renames
        assert ${lines[6]} same_as find-renames=
        assert ${lines[7]} same_as ignore-all-space
        assert ${lines[8]} same_as ignore-cr-at-eol
        assert ${lines[9]} same_as ignore-space-at-eol
        assert ${lines[10]} same_as ignore-space-change
        assert ${lines[11]} same_as no-renames
        assert ${lines[12]} same_as no-renormalize
        assert ${lines[13]} same_as ours
        assert ${lines[14]} same_as patience
        assert ${lines[15]} same_as rename-threshold=
        assert ${lines[16]} same_as renormalize
        assert ${lines[17]} same_as subtree
        assert ${lines[18]} same_as subtree=
        assert ${lines[19]} same_as theirs
    }

    prefix=
    _fzf_complete_git 'git pull -qX '
}

@test 'Testing completion: git pull -qX**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git pull -qX'

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 19
        assert ${lines[1]} same_as diff-algorithm=histogram
        assert ${lines[2]} same_as diff-algorithm=minimal
        assert ${lines[3]} same_as diff-algorithm=myers
        assert ${lines[4]} same_as diff-algorithm=patience
        assert ${lines[5]} same_as find-renames
        assert ${lines[6]} same_as find-renames=
        assert ${lines[7]} same_as ignore-all-space
        assert ${lines[8]} same_as ignore-cr-at-eol
        assert ${lines[9]} same_as ignore-space-at-eol
        assert ${lines[10]} same_as ignore-space-change
        assert ${lines[11]} same_as no-renames
        assert ${lines[12]} same_as no-renormalize
        assert ${lines[13]} same_as ours
        assert ${lines[14]} same_as patience
        assert ${lines[15]} same_as rename-threshold=
        assert ${lines[16]} same_as renormalize
        assert ${lines[17]} same_as subtree
        assert ${lines[18]} same_as subtree=
        assert ${lines[19]} same_as theirs
    }

    prefix=-qX
    _fzf_complete_git 'git pull '
}

@test 'Testing completion: git pull --strategy-option=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git pull --strategy-option='

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 19
        assert ${lines[1]} same_as diff-algorithm=histogram
        assert ${lines[2]} same_as diff-algorithm=minimal
        assert ${lines[3]} same_as diff-algorithm=myers
        assert ${lines[4]} same_as diff-algorithm=patience
        assert ${lines[5]} same_as find-renames
        assert ${lines[6]} same_as find-renames=
        assert ${lines[7]} same_as ignore-all-space
        assert ${lines[8]} same_as ignore-cr-at-eol
        assert ${lines[9]} same_as ignore-space-at-eol
        assert ${lines[10]} same_as ignore-space-change
        assert ${lines[11]} same_as no-renames
        assert ${lines[12]} same_as no-renormalize
        assert ${lines[13]} same_as ours
        assert ${lines[14]} same_as patience
        assert ${lines[15]} same_as rename-threshold=
        assert ${lines[16]} same_as renormalize
        assert ${lines[17]} same_as subtree
        assert ${lines[18]} same_as subtree=
        assert ${lines[19]} same_as theirs
    }

    prefix=--strategy-option=
    _fzf_complete_git 'git pull '
}

@test 'Testing completion: git pull --strategy-option **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull --strategy-option '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git pull --strategy-option '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 19
        assert ${lines[1]} same_as diff-algorithm=histogram
        assert ${lines[2]} same_as diff-algorithm=minimal
        assert ${lines[3]} same_as diff-algorithm=myers
        assert ${lines[4]} same_as diff-algorithm=patience
        assert ${lines[5]} same_as find-renames
        assert ${lines[6]} same_as find-renames=
        assert ${lines[7]} same_as ignore-all-space
        assert ${lines[8]} same_as ignore-cr-at-eol
        assert ${lines[9]} same_as ignore-space-at-eol
        assert ${lines[10]} same_as ignore-space-change
        assert ${lines[11]} same_as no-renames
        assert ${lines[12]} same_as no-renormalize
        assert ${lines[13]} same_as ours
        assert ${lines[14]} same_as patience
        assert ${lines[15]} same_as rename-threshold=
        assert ${lines[16]} same_as renormalize
        assert ${lines[17]} same_as subtree
        assert ${lines[18]} same_as subtree=
        assert ${lines[19]} same_as theirs
    }

    prefix=
    _fzf_complete_git 'git pull --strategy-option '
}

@test 'Testing completion: git pull --rebase=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git pull --rebase='

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as false
        assert ${lines[2]} same_as interactive
        assert ${lines[3]} same_as merges
        assert ${lines[4]} same_as preserve
        assert ${lines[5]} same_as true
    }

    prefix=--rebase=
    _fzf_complete_git 'git pull '
}

@test 'Testing completion: git pull --shallow-exclude=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git pull --shallow-exclude='

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=--shallow-exclude=
    _fzf_complete_git 'git pull '
}

@test 'Testing completion: git pull --shallow-exclude **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull --shallow-exclude '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git pull --shallow-exclude '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git pull --shallow-exclude '
}

@test 'Testing completion: git pull --negotiation-tip=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git pull --negotiation-tip='

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=--negotiation-tip=
    _fzf_complete_git 'git pull '
}

@test 'Testing completion: git pull --negotiation-tip **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull --negotiation-tip '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git pull --negotiation-tip '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git pull --negotiation-tip '
}

@test 'Testing completion: git pull -o **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull -o '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git pull -o '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git pull -o**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=-o
    _fzf_complete_git 'git pull '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git pull -qo **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull -qo '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git pull -qo '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git pull -qo**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=-qo
    _fzf_complete_git 'git pull '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git pull --date=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=--date=
    _fzf_complete_git 'git pull '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git pull --date **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull --date '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git pull --date '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git pull --depth=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=--depth=
    _fzf_complete_git 'git pull '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git pull --depth **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull --depth '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git pull --depth '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git pull --deepen=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=--deepen=
    _fzf_complete_git 'git pull '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git pull --deepen **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull --deepen '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git pull --deepen '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git pull --log=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=--log=
    _fzf_complete_git 'git pull '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git pull --server-option=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=--server-option=
    _fzf_complete_git 'git pull '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git pull --server-option **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull --server-option '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git pull --server-option '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git pull --shallow-since=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=--shallow-since=
    _fzf_complete_git 'git pull '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git pull --shallow-since **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull --shallow-since '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git pull --shallow-since '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git pull **' {
    run git remote add origin git@github.com:chitoku-k/fzf-zsh-completions
    run git remote add upstream git@example.com:example/fzf-zsh-completions
    run git remote add example example

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git pull '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}example $reset_color  example (fetch)"
        assert ${lines[2]} same_as "${fg[yellow]}origin  $reset_color  git@github.com:chitoku-k/fzf-zsh-completions (fetch)"
        assert ${lines[3]} same_as "${fg[yellow]}upstream$reset_color  git@example.com:example/fzf-zsh-completions (fetch)"
    }

    prefix=
    _fzf_complete_git 'git pull '
}

@test 'Testing completion: git pull origin **' {
    run git remote add origin ${DIR%/*}/remote.git

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull origin '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--multi'
        assert $4 same_as '--'
        assert $5 same_as 'git pull origin '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color"
        assert ${lines[3]} same_as "${fg[yellow]}annotated     $reset_color  ${fg[green]}tag   $reset_color"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color"
        assert ${lines[5]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color"
    }

    prefix=
    _fzf_complete_git 'git pull origin '
}

@test 'Testing completion: git pull --cleanup strip --rebase **' {
    run git remote add origin git@github.com:chitoku-k/fzf-zsh-completions
    run git remote add upstream git@example.com:example/fzf-zsh-completions
    run git remote add example example

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull --cleanup strip --rebase '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git pull --cleanup strip --rebase '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}example $reset_color  example (fetch)"
        assert ${lines[2]} same_as "${fg[yellow]}origin  $reset_color  git@github.com:chitoku-k/fzf-zsh-completions (fetch)"
        assert ${lines[3]} same_as "${fg[yellow]}upstream$reset_color  git@example.com:example/fzf-zsh-completions (fetch)"
    }

    prefix=
    _fzf_complete_git 'git pull --cleanup strip --rebase '
}

@test 'Testing completion: git pull origin --cleanup strip --quiet **' {
    run git remote add origin ${DIR%/*}/remote.git

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull origin --cleanup strip --quiet '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--multi'
        assert $4 same_as '--'
        assert $5 same_as 'git pull origin --cleanup strip --quiet '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color"
        assert ${lines[3]} same_as "${fg[yellow]}annotated     $reset_color  ${fg[green]}tag   $reset_color"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color"
        assert ${lines[5]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color"
    }

    prefix=
    _fzf_complete_git 'git pull origin --cleanup strip --quiet '
}

@test 'Testing completion: git pull -- **' {
    run git remote add origin git@github.com:chitoku-k/fzf-zsh-completions
    run git remote add upstream git@example.com:example/fzf-zsh-completions
    run git remote add example example

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull -- '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git pull -- '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}example $reset_color  example (fetch)"
        assert ${lines[2]} same_as "${fg[yellow]}origin  $reset_color  git@github.com:chitoku-k/fzf-zsh-completions (fetch)"
        assert ${lines[3]} same_as "${fg[yellow]}upstream$reset_color  git@example.com:example/fzf-zsh-completions (fetch)"
    }

    prefix=
    _fzf_complete_git 'git pull -- '
}

@test 'Testing completion: git pull -- origin **' {
    run git remote add origin ${DIR%/*}/remote.git

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git pull -- origin '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--multi'
        assert $4 same_as '--'
        assert $5 same_as 'git pull -- origin '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color"
        assert ${lines[3]} same_as "${fg[yellow]}annotated     $reset_color  ${fg[green]}tag   $reset_color"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color"
        assert ${lines[5]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color"
    }

    prefix=
    _fzf_complete_git 'git pull -- origin '
}

@test 'Testing completion: git push --signed=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git push '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git push --signed='

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as false
        assert ${lines[2]} same_as if-asked
        assert ${lines[3]} same_as true
    }

    prefix=--signed=
    _fzf_complete_git 'git push '
}

@test 'Testing completion: git push --push-option=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git push '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=--push-option=
    _fzf_complete_git 'git push '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git push --push-option **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git push --push-option '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git push --push-option '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git push -o**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git push '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=-o
    _fzf_complete_git 'git push '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git push -o **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git push -o '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git push -o '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git push --exec=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git push '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=--exec=
    _fzf_complete_git 'git push '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git push --exec **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git push --exec '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git push --exec '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git push --receive-pack=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git push '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=--receive-pack=
    _fzf_complete_git 'git push '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git push --receive-pack **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git push --receive-pack '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git push --receive-pack '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git push --force-with-lease=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git push '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git push --force-with-lease='

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=--force-with-lease=
    _fzf_complete_git 'git push '
}

@test 'Testing completion: git push --force-with-lease=master:**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git push '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git push --force-with-lease=master:'

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=--force-with-lease=master:
    _fzf_complete_git 'git push '
}

@test 'Testing completion: git push --repo=**' {
    run git remote add origin git@github.com:chitoku-k/fzf-zsh-completions
    run git remote add upstream git@example.com:example/fzf-zsh-completions
    run git remote add example example

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git push '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git push --repo='

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}example $reset_color  example (fetch)"
        assert ${lines[2]} same_as "${fg[yellow]}origin  $reset_color  git@github.com:chitoku-k/fzf-zsh-completions (fetch)"
        assert ${lines[3]} same_as "${fg[yellow]}upstream$reset_color  git@example.com:example/fzf-zsh-completions (fetch)"
    }

    prefix=--repo
    _fzf_complete_git 'git push '
}

@test 'Testing completion: git push --repo **' {
    run git remote add origin git@github.com:chitoku-k/fzf-zsh-completions
    run git remote add upstream git@example.com:example/fzf-zsh-completions
    run git remote add example example

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git push --repo '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git push --repo '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}example $reset_color  example (fetch)"
        assert ${lines[2]} same_as "${fg[yellow]}origin  $reset_color  git@github.com:chitoku-k/fzf-zsh-completions (fetch)"
        assert ${lines[3]} same_as "${fg[yellow]}upstream$reset_color  git@example.com:example/fzf-zsh-completions (fetch)"
    }

    prefix=
    _fzf_complete_git 'git push --repo '
}

@test 'Testing completion: git push --recurse-submodules=**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git push '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git push --recurse-submodules='

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 4
        assert ${lines[1]} same_as check
        assert ${lines[2]} same_as no
        assert ${lines[3]} same_as on-demand
        assert ${lines[4]} same_as only
    }

    prefix=--recurse-submodules=
    _fzf_complete_git 'git push '
}

@test 'Testing completion: git push --recurse-submodules **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git push --recurse-submodules '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git push --recurse-submodules '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 4
        assert ${lines[1]} same_as check
        assert ${lines[2]} same_as no
        assert ${lines[3]} same_as on-demand
        assert ${lines[4]} same_as only
    }

    prefix=
    _fzf_complete_git 'git push --recurse-submodules '
}

@test 'Testing completion: git push **' {
    run git remote add origin git@github.com:chitoku-k/fzf-zsh-completions
    run git remote add upstream git@example.com:example/fzf-zsh-completions
    run git remote add example example

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git push '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git push '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}example $reset_color  example (fetch)"
        assert ${lines[2]} same_as "${fg[yellow]}origin  $reset_color  git@github.com:chitoku-k/fzf-zsh-completions (fetch)"
        assert ${lines[3]} same_as "${fg[yellow]}upstream$reset_color  git@example.com:example/fzf-zsh-completions (fetch)"
    }

    prefix=
    _fzf_complete_git 'git push '
}

@test 'Testing completion: git push origin **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git push origin '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--multi'
        assert $4 same_as '--'
        assert $5 same_as 'git push origin '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git push origin '
}

@test 'Testing completion: git push origin master:**' {
    run git remote add origin ${DIR%/*}/remote.git

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git push origin '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git push origin master:'

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color"
        assert ${lines[3]} same_as "${fg[yellow]}annotated     $reset_color  ${fg[green]}tag   $reset_color"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color"
        assert ${lines[5]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color"
    }

    prefix=master:
    _fzf_complete_git 'git push origin '
}

@test 'Testing completion: git rm **' {
    run git checkout another-branch
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'
    run touch file_outside_tree_object
    run git add file_outside_tree_object

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git rm '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git rm '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as ' file3 containing space '
        assert ${actual1[2]} same_as 'directory1/file2'
        assert ${actual1[3]} same_as 'directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 3
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as 'file1'
        assert ${actual3[3]} same_as 'file_outside_tree_object'
    }

    prefix=
    _fzf_complete_git 'git rm '
}

@test 'Testing completion in subdirectory: git rm **' {
    run git checkout another-branch
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'
    run touch file_outside_tree_object
    run git add file_outside_tree_object

    cd directory2

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git rm '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git rm '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as '../ file3 containing space '
        assert ${actual1[2]} same_as '../directory1/file2'
        assert ${actual1[3]} same_as '../directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 3
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as '../file1'
        assert ${actual3[3]} same_as '../file_outside_tree_object'
    }

    prefix=
    _fzf_complete_git 'git rm '
}

@test 'Testing completion: git stash **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git stash '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git stash '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git stash push **' {
    echo > newfile

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git stash push '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 9
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--preview-window=right:70%:wrap'
        assert $6 matches '--preview=*'
        assert $7 same_as '--reverse'
        assert $8 same_as '--'
        assert $9 same_as 'git stash push '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 1

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 2
        assert ${actual1[1]} same_as " $reset_color${fg[red]}M$reset_color directory1/file2"
        assert ${actual1[2]} same_as " $reset_color${fg[red]}M$reset_color file1"
    }

    prefix=
    _fzf_complete_git 'git stash push '
}

@test 'Testing completion: git stash push --include-untracked **' {
    echo > newfile

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git stash push --include-untracked '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 9
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--preview-window=right:70%:wrap'
        assert $6 matches '--preview=*'
        assert $7 same_as '--reverse'
        assert $8 same_as '--'
        assert $9 same_as 'git stash push --include-untracked '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 1

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as " $reset_color${fg[red]}M$reset_color directory1/file2"
        assert ${actual1[2]} same_as " $reset_color${fg[red]}M$reset_color file1"
        assert ${actual1[3]} same_as "${fg[red]}?$reset_color${fg[red]}?$reset_color newfile"
    }

    prefix=
    _fzf_complete_git 'git stash push --include-untracked '
}

@test 'Testing completion: git stash push -u **' {
    echo > newfile

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git stash push -u '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 9
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--preview-window=right:70%:wrap'
        assert $6 matches '--preview=*'
        assert $7 same_as '--reverse'
        assert $8 same_as '--'
        assert $9 same_as 'git stash push -u '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 1

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as " $reset_color${fg[red]}M$reset_color directory1/file2"
        assert ${actual1[2]} same_as " $reset_color${fg[red]}M$reset_color file1"
        assert ${actual1[3]} same_as "${fg[red]}?$reset_color${fg[red]}?$reset_color newfile"
    }

    prefix=
    _fzf_complete_git 'git stash push -u '
}

@test 'Testing completion: git stash push --message **' {
    echo > newfile

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git stash push --message '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git stash push --message '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git stash push -m **' {
    echo > newfile

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git stash push -m '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git stash push -m '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git stash push --pathspec-from-file **' {
    echo > newfile

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git stash push --pathspec-from-file '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git stash push --pathspec-from-file '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git stash -- **' {
    echo > newfile

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git stash -- '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 9
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--preview-window=right:70%:wrap'
        assert $6 matches '--preview=*'
        assert $7 same_as '--reverse'
        assert $8 same_as '--'
        assert $9 same_as 'git stash -- '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 1

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 2
        assert ${actual1[1]} same_as " $reset_color${fg[red]}M$reset_color directory1/file2"
        assert ${actual1[2]} same_as " $reset_color${fg[red]}M$reset_color file1"
    }

    prefix=
    _fzf_complete_git 'git stash -- '
}

@test 'Testing completion: git stash --include-untracked -- **' {
    echo > newfile

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git stash --include-untracked -- '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 9
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--preview-window=right:70%:wrap'
        assert $6 matches '--preview=*'
        assert $7 same_as '--reverse'
        assert $8 same_as '--'
        assert $9 same_as 'git stash --include-untracked -- '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 1

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as " $reset_color${fg[red]}M$reset_color directory1/file2"
        assert ${actual1[2]} same_as " $reset_color${fg[red]}M$reset_color file1"
        assert ${actual1[3]} same_as "${fg[red]}?$reset_color${fg[red]}?$reset_color newfile"
    }

    prefix=
    _fzf_complete_git 'git stash --include-untracked -- '
}

@test 'Testing completion: git stash -u -- **' {
    echo > newfile

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git stash -u -- '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 9
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--preview-window=right:70%:wrap'
        assert $6 matches '--preview=*'
        assert $7 same_as '--reverse'
        assert $8 same_as '--'
        assert $9 same_as 'git stash -u -- '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 1

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as " $reset_color${fg[red]}M$reset_color directory1/file2"
        assert ${actual1[2]} same_as " $reset_color${fg[red]}M$reset_color file1"
        assert ${actual1[3]} same_as "${fg[red]}?$reset_color${fg[red]}?$reset_color newfile"
    }

    prefix=
    _fzf_complete_git 'git stash -u -- '
}

@test 'Testing completion: git stash show **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git stash show '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 3
        assert $1 same_as '--ansi'
        assert $2 same_as '--'
        assert $3 same_as 'git stash show '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}stash@{0}$reset_color  On another-branch: Stash with message"
        assert ${lines[2]} same_as "${fg[yellow]}stash@{1}$reset_color  File changes on another-branch"
        assert ${lines[3]} same_as "${fg[yellow]}stash@{2}$reset_color  WIP on master: 3e209a3 1st commit"
    }

    prefix=
    _fzf_complete_git 'git stash show '
}

@test 'Testing completion: git stash apply **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git stash apply '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 3
        assert $1 same_as '--ansi'
        assert $2 same_as '--'
        assert $3 same_as 'git stash apply '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}stash@{0}$reset_color  On another-branch: Stash with message"
        assert ${lines[2]} same_as "${fg[yellow]}stash@{1}$reset_color  File changes on another-branch"
        assert ${lines[3]} same_as "${fg[yellow]}stash@{2}$reset_color  WIP on master: 3e209a3 1st commit"
    }

    prefix=
    _fzf_complete_git 'git stash apply '
}

@test 'Testing completion: git stash drop **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git stash drop '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 3
        assert $1 same_as '--ansi'
        assert $2 same_as '--'
        assert $3 same_as 'git stash drop '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}stash@{0}$reset_color  On another-branch: Stash with message"
        assert ${lines[2]} same_as "${fg[yellow]}stash@{1}$reset_color  File changes on another-branch"
        assert ${lines[3]} same_as "${fg[yellow]}stash@{2}$reset_color  WIP on master: 3e209a3 1st commit"
    }

    prefix=
    _fzf_complete_git 'git stash drop '
}

@test 'Testing completion: git stash pop **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git stash pop '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 3
        assert $1 same_as '--ansi'
        assert $2 same_as '--'
        assert $3 same_as 'git stash pop '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}stash@{0}$reset_color  On another-branch: Stash with message"
        assert ${lines[2]} same_as "${fg[yellow]}stash@{1}$reset_color  File changes on another-branch"
        assert ${lines[3]} same_as "${fg[yellow]}stash@{2}$reset_color  WIP on master: 3e209a3 1st commit"
    }

    prefix=
    _fzf_complete_git 'git stash pop '
}

@test 'Testing completion: git stash branch **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git stash branch '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git stash branch '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: git stash branch newbranch **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git stash branch newbranch '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 3
        assert $1 same_as '--ansi'
        assert $2 same_as '--'
        assert $3 same_as 'git stash branch newbranch '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}stash@{0}$reset_color  On another-branch: Stash with message"
        assert ${lines[2]} same_as "${fg[yellow]}stash@{1}$reset_color  File changes on another-branch"
        assert ${lines[3]} same_as "${fg[yellow]}stash@{2}$reset_color  WIP on master: 3e209a3 1st commit"
    }

    prefix=
    _fzf_complete_git 'git stash branch newbranch '
}

@test 'Testing completion: git show **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git show '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--multi'
        assert $4 same_as '--'
        assert $5 same_as 'git show '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git show '
}

@test 'Testing completion: git show HEAD **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git show HEAD '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--multi'
        assert $4 same_as '--'
        assert $5 same_as 'git show HEAD '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git show HEAD '
}

@test 'Testing completion: git show -- **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git show -- '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git show -- '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 1

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 2
        assert ${actual1[1]} same_as 'directory1/file2'
        assert ${actual1[2]} same_as 'file1'
    }

    prefix=
    _fzf_complete_git 'git show -- '
}

@test 'Testing completion: git show another-branch -- **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git show another-branch -- '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git show another-branch -- '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 2
        assert ${actual1[1]} same_as ' file3 containing space '
        assert ${actual1[2]} same_as 'directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 1
        assert ${actual3[1]} same_as 'newlines'
    }

    prefix=
    _fzf_complete_git 'git show another-branch -- '
}

@test 'Testing completion: git show another-branch:**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git show '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--'
        assert $5 same_as 'git show another-branch:'

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as ' file3 containing space '
        assert ${actual1[2]} same_as 'directory1/file2'
        assert ${actual1[3]} same_as 'directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as 'file1'
    }

    prefix=another-branch:
    _fzf_complete_git 'git show '
}

@test 'Testing completion in subdirectory: git show another-branch:**' {
    cd directory1

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git show '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--'
        assert $5 same_as 'git show another-branch:'

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as ' file3 containing space '
        assert ${actual1[2]} same_as 'directory1/file2'
        assert ${actual1[3]} same_as 'directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as 'file1'
    }

    prefix=another-branch:
    _fzf_complete_git 'git show '
}

@test 'Testing completion: git show another-branch:file1 master another-branch v1:file1 -- **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git show another-branch:file1 master another-branch v1:file1 -- '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'git show another-branch:file1 master another-branch v1:file1 -- '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as ' file3 containing space '
        assert ${actual1[2]} same_as 'directory1/file2'
        assert ${actual1[3]} same_as 'directory2/file4'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as 'file1'
    }

    prefix=
    _fzf_complete_git 'git show another-branch:file1 master another-branch v1:file1 -- '
}

@test 'Testing completion: git show --show-notes=**' {
    run git notes add -m 'Note1'
    run git notes --ref=note add -m 'Note2'

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git show '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git show --show-notes='

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 2

        assert ${lines[1]} same_as "${fg[yellow]}notes/commits$reset_color  Notes added by 'git notes add'"
        assert ${lines[2]} same_as "${fg[yellow]}notes/note   $reset_color  Notes added by 'git notes add'"
    }

    prefix=--show-notes=
    _fzf_complete_git 'git show '
}

@test 'Testing completion: git show --notes=**' {
    run git notes add -m 'Note1'
    run git notes --ref=note add -m 'Note2'

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git show '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git show --notes='

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 2

        assert ${lines[1]} same_as "${fg[yellow]}notes/commits$reset_color  Notes added by 'git notes add'"
        assert ${lines[2]} same_as "${fg[yellow]}notes/note   $reset_color  Notes added by 'git notes add'"
    }

    prefix=--notes=
    _fzf_complete_git 'git show '
}

@test 'Testing completion: git "" show --notes=**' {
    run git notes add -m 'Note1'
    run git notes --ref=note add -m 'Note2'

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git "" show '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    _fzf_path_completion() {
        assert $# equals 2
        assert $1 same_as '--notes='
        assert $2 same_as 'git "" show '

        assert __fzf_extract_command mock_times 1
    }

    prefix=--notes=
    _fzf_complete_git 'git "" show '
}

@test 'Testing completion: git tag name **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git tag name '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git tag name '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git tag name '
}

@test 'Testing completion: git tag -d **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git tag -d '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--multi'
        assert $4 same_as '--'
        assert $5 same_as 'git tag -d '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "${fg[yellow]}v1$reset_color  ${fg[green]}3e209a3$reset_color  1st commit"
        assert ${lines[2]} same_as "${fg[yellow]}v2$reset_color  ${fg[green]}6088ecf$reset_color   2nd commit"
    }

    prefix=
    _fzf_complete_git 'git tag -d '
}

@test 'Testing completion: git tag --delete **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git tag --delete '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--multi'
        assert $4 same_as '--'
        assert $5 same_as 'git tag --delete '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "${fg[yellow]}v1$reset_color  ${fg[green]}3e209a3$reset_color  1st commit"
        assert ${lines[2]} same_as "${fg[yellow]}v2$reset_color  ${fg[green]}6088ecf$reset_color   2nd commit"
    }

    prefix=
    _fzf_complete_git 'git tag --delete '
}

@test 'Testing completion (alias): git commit --squash **' {
    run git config alias.squash 'commit --squash'

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git squash '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git squash '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git squash '
}

@test 'Testing completion (alias): git commit --amend --message **' {
    run git config alias.amend 'commit --amend --message'
    run git checkout another-branch

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git amend '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git amend '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "${fg[yellow]}6088ecf$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}3e209a3$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git amend '
}

@test 'Testing completion (alias): git commit --date **' {
    run git config alias.commit-date 'commit --date'

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit-date '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_git 'git commit-date '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion (alias): git commit --pathspec-from-file **' {
    run git config alias.commit-spec 'commit --pathspec-from-file'

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit-spec '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'git commit-spec '
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=
    _fzf_complete_git 'git commit-spec '

    assert __fzf_extract_command mock_times 1
}

@test 'Testing completion (alias): git commit --cleanup **' {
    run git config alias.commit-cleanup 'commit --cleanup'

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit-cleanup '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git commit-cleanup '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as strip
        assert ${lines[2]} same_as whitespace
        assert ${lines[3]} same_as verbatim
        assert ${lines[4]} same_as scissors
        assert ${lines[5]} same_as default
    }

    prefix=
    _fzf_complete_git 'git commit-cleanup '
}

@test 'Testing completion (alias): git "" commit **' {
    run git checkout another-branch
    run git config alias.commit-all '"" commit -a'

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit-all '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    _fzf_path_completion() {
        assert $# equals 2
        assert $1 same_as ''
        assert $2 same_as 'git commit-all '

        assert __fzf_extract_command mock_times 1
    }

    prefix=
    _fzf_complete_git 'git commit-all '
}

@test 'Testing completion (alias): git commit **' {
    run git checkout another-branch
    run git config alias.commit-all 'commit -a'

    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit-all '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 9
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--multi'
        assert $5 same_as '--preview-window=right:70%:wrap'
        assert $6 matches '--preview=*'
        assert $7 same_as '--reverse'
        assert $8 same_as '--'
        assert $9 same_as 'git commit-all '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 3
        assert ${actual1[1]} same_as " $reset_color${fg[red]}M$reset_color  file3 containing space "
        assert ${actual1[2]} same_as " $reset_color${fg[red]}M$reset_color directory1/file2"
        assert ${actual1[3]} same_as " $reset_color${fg[red]}M$reset_color directory2/file4"

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'containing'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 2
        assert ${actual3[1]} same_as 'newlines'
        assert ${actual3[2]} same_as " $reset_color${fg[red]}M$reset_color file1"
    }

    prefix=
    _fzf_complete_git 'git commit-all '
}

@test 'Testing completion (recursive alias)' {
    run git config alias.foo bar
    run git config alias.bar 'commit --squash'

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git foo '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'git foo '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git 'git foo '
}

@test 'Testing completion (looped alias)' {
    run git config alias.foo bar
    run git config alias.bar baz
    run git config alias.baz foo

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git foo '

        echo 'git'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    _fzf_path_completion() {
        assert $# equals 2
        assert $1 same_as ''
        assert $2 same_as 'git foo '

        assert __fzf_extract_command mock_times 1
    }

    prefix=
    _fzf_complete_git 'git foo '
}

@test 'Testing completion (alias and expansion)' {
    run git config alias.squash 'commit --squash'

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as '"git"  "squash" '

        echo 'git'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as '"git"  "squash" '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}another-branch$reset_color  ${fg[green]}branch$reset_color   2nd commit"
        assert ${lines[2]} same_as "${fg[yellow]}master        $reset_color  ${fg[green]}branch$reset_color  1st commit"
        assert ${lines[3]} same_as "${fg[yellow]}v2            $reset_color  ${fg[green]}tag   $reset_color   2nd commit"
        assert ${lines[4]} same_as "${fg[yellow]}v1            $reset_color  ${fg[green]}tag   $reset_color  1st commit"
        assert ${lines[5]} same_as "${fg[yellow]}3e209a3       $reset_color  ${fg[green]}commit$reset_color  1st commit"
    }

    prefix=
    _fzf_complete_git '"git"  "squash" '
}

@test 'Testing preview: git checkout -- **' {
    run git checkout another-branch
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git checkout -- '

        echo 'git'
    }

    _fzf_complete() {
        assert __fzf_extract_command mock_times 1

        fzf_options=($@) run preview ' M  file3 containing space '
        assert $output is_not_empty

        fzf_options=($@) run preview ' M directory1/file2'
        assert $output is_not_empty

        fzf_options=($@) run preview $' M directory2/file4\ncontaining\nnewlines'
        assert $output is_not_empty

        fzf_options=($@) run preview ' M file1'
        assert $output is_not_empty
    }

    prefix=
    _fzf_complete_git 'git checkout -- '
}

@test 'Testing preview: git commit -- **' {
    run git checkout another-branch
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git commit -- '

        echo 'git'
    }

    _fzf_complete() {
        assert __fzf_extract_command mock_times 1

        fzf_options=($@) run preview ' M  file3 containing space '
        assert $output is_not_empty

        fzf_options=($@) run preview ' M directory1/file2'
        assert $output is_not_empty

        fzf_options=($@) run preview $' M directory2/file4\ncontaining\nnewlines'
        assert $output is_not_empty

        fzf_options=($@) run preview ' M file1'
        assert $output is_not_empty
    }

    prefix=
    _fzf_complete_git 'git commit -- '
}

@test 'Testing preview: git add **' {
    run git checkout another-branch
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git add '

        echo 'git'
    }

    _fzf_complete() {
        assert __fzf_extract_command mock_times 1

        fzf_options=($@) run preview ' M  file3 containing space '
        assert $output is_not_empty

        fzf_options=($@) run preview ' M directory1/file2'
        assert $output is_not_empty

        fzf_options=($@) run preview $' M directory2/file4\ncontaining\nnewlines'
        assert $output is_not_empty

        fzf_options=($@) run preview ' M file1'
        assert $output is_not_empty

        fzf_options=($@) run preview '??  file5 containing space '
        assert $output is_not_empty

        fzf_options=($@) run preview $'?? directory2/file6\ncontaining\nnewlines'
        assert $output is_not_empty
    }

    prefix=
    _fzf_complete_git 'git add '
}

@test 'Testing preview: git stash push **' {
    run git checkout another-branch
    echo >> ' file3 containing space '
    echo >> directory2/$'file4\ncontaining\nnewlines'
    echo >> ' file5 containing space '
    echo >> directory2/$'file6\ncontaining\nnewlines'

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'git stash push '

        echo 'git'
    }

    _fzf_complete() {
        assert __fzf_extract_command mock_times 1

        fzf_options=($@) run preview ' M  file3 containing space '
        assert $output is_not_empty

        fzf_options=($@) run preview ' M directory1/file2'
        assert $output is_not_empty

        fzf_options=($@) run preview $' M directory2/file4\ncontaining\nnewlines'
        assert $output is_not_empty

        fzf_options=($@) run preview ' M file1'
        assert $output is_not_empty

        fzf_options=($@) run preview '??  file5 containing space '
        assert $output is_not_empty

        fzf_options=($@) run preview $'?? directory2/file6\ncontaining\nnewlines'
        assert $output is_not_empty
    }

    prefix=
    _fzf_complete_git 'git stash push '
}

@test 'Testing post: git commits' {
    input=(
        'another-branch   2nd commit'
        'master          1st commit'
        'v2               2nd commit'
        'v1              1st commit'
        '3e209a3         1st commit'
    )

    run _fzf_complete_git-commits_post <<< ${(F)input} \| tr '\n' ' '

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'another-branch master v2 v1 3e209a3 '
}

@test 'Testing post: git commits with push subcommand and without prefix_ref' {
    input=(
        'another-branch   2nd commit'
        'master          1st commit'
        'v2               2nd commit'
        'v1              1st commit'
        '3e209a3         1st commit'
    )
    subcommand=push
    prefix_ref=

    run _fzf_complete_git-commits_post <<< ${(F)input} \| tr '\n' ' '

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'another-branch master v2 v1 3e209a3'
}

@test 'Testing post: git commits with push subcommand and with prefix_ref' {
    input=(
        'another-branch   2nd commit'
        'master          1st commit'
        'v2               2nd commit'
        'v1              1st commit'
        '3e209a3         1st commit'
    )
    subcommand=push
    prefix_ref=master:

    run _fzf_complete_git-commits_post <<< ${(F)input} \| tr '\n' ' '

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'another-branch master v2 v1 3e209a3 '
}

@test 'Testing post: git commits not in head' {
    input=(
        '6088ecf   2nd commit'
        '3e209a3  1st commit'
    )

    run _fzf_complete_git-commits-not-in-head_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 2
    assert ${lines[1]} same_as '6088ecf'
    assert ${lines[2]} same_as '3e209a3'
}

@test 'Testing post: git commit messages containing space' {
    input=(
        '3e209a3  1st commit'
    )

    run _fzf_complete_git-commit-messages_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as "'1st commit'"
}

@test 'Testing post: git commit messages starting with space' {
    input=(
        '6088ecf   2nd commit'
    )

    run _fzf_complete_git-commit-messages_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as "' 2nd commit'"
}

@test 'Testing post: git status files' {
    input=(
        'M  file1'
        'M  directory1/file2'
        'M   file3 containing space '
        $'M  file4\ncontaining\nnewlines'
        '??  file5 containing space '
        $'?? directory2/file6\ncontaining\nnewlines'
    )

    run _fzf_complete_git-status-files_post <<< ${(pj:\0:)input}

    assert $state equals 0
    assert ${#lines} equals 6

    assert ${lines[1]} same_as 'file1'
    assert ${lines[2]} same_as 'directory1/file2'
    assert ${lines[3]} same_as "' file3 containing space '"
    assert ${lines[4]} same_as "\$'file4\\ncontaining\\nnewlines'"
    assert ${lines[5]} same_as "' file5 containing space '"
    assert ${lines[6]} same_as "\$'directory2/file6\\ncontaining\\nnewlines'"
}

@test 'Testing post: git repositories' {
    input=(
        'origin  git@github.com:chitoku-k/fzf-zsh-completions (fetch)'
    )

    run _fzf_complete_git-repositories_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1

    assert ${lines[1]} same_as 'origin'
}

@test 'Testing post: git refs' {
    input=(
        'feat/another-branch   2nd commit'
        'master  1st commit'
    )

    run _fzf_complete_git-refs_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 2

    assert ${lines[1]} same_as 'feat/another-branch'
    assert ${lines[2]} same_as 'master'
}

@test 'Testing post: git show files' {
    input=(
        'file1'
        'directory1/file2'
        ' file3 containing space '
        $'file4\ncontaining\nnewlines'
        ' file5 containing space '
        $'directory2/file6\ncontaining\nnewlines'
    )

    run _fzf_complete_git-show-files_post <<< ${(pj:\0:)input}

    assert $state equals 0
    assert ${#lines} equals 6

    assert ${lines[1]} same_as 'file1'
    assert ${lines[2]} same_as 'directory1/file2'
    assert ${lines[3]} same_as "' file3 containing space '"
    assert ${lines[4]} same_as "\$'file4\\ncontaining\\nnewlines'"
    assert ${lines[5]} same_as "' file5 containing space '"
    assert ${lines[6]} same_as "\$'directory2/file6\\ncontaining\\nnewlines'"
}

@test 'Testing post: git files in tree and index' {
    input=(
        'file1'
        'directory1/file2'
        ' file3 containing space '
        $'file4\ncontaining\nnewlines'
        ' file5 containing space '
        $'directory2/file6\ncontaining\nnewlines'
    )

    run _fzf_complete_git-files_tree_and_index_post <<< ${(pj:\0:)input}

    assert $state equals 0
    assert ${#lines} equals 6

    assert ${lines[1]} same_as 'file1'
    assert ${lines[2]} same_as 'directory1/file2'
    assert ${lines[3]} same_as "' file3 containing space '"
    assert ${lines[4]} same_as "\$'file4\\ncontaining\\nnewlines'"
    assert ${lines[5]} same_as "' file5 containing space '"
    assert ${lines[6]} same_as "\$'directory2/file6\\ncontaining\\nnewlines'"
}

@test 'Testing post: git notes' {
    input=(
        "notes/note1    Notes added by 'git notes add'"
        "notes/commits  Notes added by 'git notes add'"
    )

    run _fzf_complete_git-notes_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 2

    assert ${lines[1]} same_as 'notes/note1'
    assert ${lines[2]} same_as 'notes/commits'
}

@test 'Testing post: git stashes' {
    input=(
        '372dd0b  stash@{0}  On another-branch: Stash with message'
    )

    run _fzf_complete_git-stashes_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1

    assert ${lines[1]} same_as '372dd0b'
}

@test 'Testing post: git constants not ending with equal' {
    input=(
        '--strategy-option=subtree'
    )

    run _fzf_complete_constants_post <<< ${(F)input} \| tr '\n' ' '

    assert $state equals 0
    assert ${#lines} equals 1

    assert ${lines[1]} same_as '--strategy-option=subtree '
}

@test 'Testing post: git constants ending with equal' {
    input=(
        '--strategy-option=subtree='
    )

    run _fzf_complete_constants_post <<< ${(F)input} \| tr '\n' ' '

    assert $state equals 0
    assert ${#lines} equals 1

    assert ${lines[1]} same_as '--strategy-option=subtree='
}
