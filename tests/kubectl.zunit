#!/usr/bin/env zunit

@setup {
    load ../fzf-zsh-completions.plugin.zsh
    load _helpers/mock.zsh
    load _helpers/assertions.zsh
    mock kubectl
}

@teardown {
    unmock kubectl
}

@test 'Testing completion: kubectl **' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    _fzf_path_completion() {
        assert $# equals 2
        assert $1 same_as ''
        assert $2 same_as 'kubectl '
    }

    prefix=
    _fzf_complete_kubectl 'kubectl '
}

@test 'Testing completion: kubectl --namespace "" **' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    _fzf_path_completion() {
        assert $# equals 2
        assert $1 same_as ''
        assert $2 same_as 'kubectl --namespace "" '
    }

    prefix=
    _fzf_complete_kubectl 'kubectl --namespace "" '
}

@test 'Testing completion: kubectl -n "" **' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    _fzf_path_completion() {
        assert $# equals 2
        assert $1 same_as ''
        assert $2 same_as 'kubectl -n "" '
    }

    prefix=
    _fzf_complete_kubectl 'kubectl -n "" '
}

@test 'Testing completion: kubectl --namespace=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'namespaces'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAME          STATUS   AGE'
        echo 'default       Active   1d'
        echo 'kube-system   Active   1d'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl --namespace='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME          ${reset_color}STATUS   AGE"
        assert ${lines[2]} same_as "${fg[yellow]}default       ${reset_color}Active   1d"
        assert ${lines[3]} same_as "${fg[yellow]}kube-system   ${reset_color}Active   1d"
    }

    prefix=--namespace=
    _fzf_complete_kubectl 'kubectl '
}

@test 'Testing completion: kubectl --namespace **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'namespaces'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAME          STATUS   AGE'
        echo 'default       Active   1d'
        echo 'kube-system   Active   1d'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl --namespace '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME          ${reset_color}STATUS   AGE"
        assert ${lines[2]} same_as "${fg[yellow]}default       ${reset_color}Active   1d"
        assert ${lines[3]} same_as "${fg[yellow]}kube-system   ${reset_color}Active   1d"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl --namespace '
}

@test 'Testing completion: kubectl -n **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'namespaces'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAME          STATUS   AGE'
        echo 'default       Active   1d'
        echo 'kube-system   Active   1d'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl -n '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME          ${reset_color}STATUS   AGE"
        assert ${lines[2]} same_as "${fg[yellow]}default       ${reset_color}Active   1d"
        assert ${lines[3]} same_as "${fg[yellow]}kube-system   ${reset_color}Active   1d"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl -n '
}

@test 'Testing completion: kubectl -n**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'namespaces'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAME          STATUS   AGE'
        echo 'default       Active   1d'
        echo 'kube-system   Active   1d'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl -n'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME          ${reset_color}STATUS   AGE"
        assert ${lines[2]} same_as "${fg[yellow]}default       ${reset_color}Active   1d"
        assert ${lines[3]} same_as "${fg[yellow]}kube-system   ${reset_color}Active   1d"
    }

    prefix=-n
    _fzf_complete_kubectl 'kubectl '
}

@test 'Testing completion: kubectl diff --labels=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'all'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl diff --labels='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=--labels=
    _fzf_complete_kubectl 'kubectl diff '
}

@test 'Testing completion: kubectl diff --labels **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'all'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl diff --labels '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl diff --labels '
}

@test 'Testing completion: kubectl diff -l **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'all'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl diff -l '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl diff -l '
}

@test 'Testing completion: kubectl diff -l**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'all'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl diff -l'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=-l
    _fzf_complete_kubectl 'kubectl diff '
}

@test 'Testing completion: kubectl run --labels=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl run --labels='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=--labels=
    _fzf_complete_kubectl 'kubectl run '
}

@test 'Testing completion: kubectl run --labels **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl run --labels '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl run --labels '
}

@test 'Testing completion: kubectl run -l **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl run -l '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl run -l '
}

@test 'Testing completion: kubectl run -l**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl run -l'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=-l
    _fzf_complete_kubectl 'kubectl run '
}

@test 'Testing completion: kubectl scale --selector=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'deployments,replicaset,replicationcontrollers,statefulset'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl scale --selector='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=--selector=
    _fzf_complete_kubectl 'kubectl scale '
}

@test 'Testing completion: kubectl scale --selector **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'deployments,replicaset,replicationcontrollers,statefulset'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl scale --selector '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl scale --selector '
}

@test 'Testing completion: kubectl scale -l **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'deployments,replicaset,replicationcontrollers,statefulset'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl scale -l '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl scale -l '
}

@test 'Testing completion: kubectl scale -l**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'deployments,replicaset,replicationcontrollers,statefulset'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl scale -l'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=-l
    _fzf_complete_kubectl 'kubectl scale '
}

@test 'Testing completion: kubectl scale daemonsets/**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'daemonsets'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                    READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES                          SELECTOR'
        echo 'default       test-0000000000-00000   1/1     1            1           1d    web          nginx:latest                    app=test'
        echo 'kube-system   kube-proxy-00000        2/2     2            2           1d    kube-proxy   k8s.gcr.io/kube-proxy:v1.20.5   k8s-app=kube-proxy'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl scale daemonsets/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                    ${reset_color}READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES                          SELECTOR"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000   ${reset_color}1/1     1            1           1d    web          nginx:latest                    app=test"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000        ${reset_color}2/2     2            2           1d    kube-proxy   k8s.gcr.io/kube-proxy:v1.20.5   k8s-app=kube-proxy"
    }

    prefix=daemonsets/
    _fzf_complete_kubectl 'kubectl scale '
}

@test 'Testing completion: kubectl scale daemonsets/** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'daemonsets'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                    READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES                          SELECTOR'
        echo 'default       test-0000000000-00000   1/1     1            1           1d    web          nginx:latest                    app=test'
        echo 'kube-system   kube-proxy-00000        2/2     2            2           1d    kube-proxy   k8s.gcr.io/kube-proxy:v1.20.5   k8s-app=kube-proxy'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl scale daemonsets/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                    ${reset_color}READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES                          SELECTOR"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000   ${reset_color}1/1     1            1           1d    web          nginx:latest                    app=test"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000        ${reset_color}2/2     2            2           1d    kube-proxy   k8s.gcr.io/kube-proxy:v1.20.5   k8s-app=kube-proxy"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=daemonsets/
    _fzf_complete_kubectl 'kubectl scale '
}

@test 'Testing completion: kubectl scale daemonsets/** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'daemonsets'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                    READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES                          SELECTOR'
        echo 'default       test-0000000000-00000   1/1     1            1           1d    web          nginx:latest                    app=test'
        echo 'kube-system   kube-proxy-00000        2/2     2            2           1d    kube-proxy   k8s.gcr.io/kube-proxy:v1.20.5   k8s-app=kube-proxy'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl scale daemonsets/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                    ${reset_color}READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES                          SELECTOR"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000   ${reset_color}1/1     1            1           1d    web          nginx:latest                    app=test"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000        ${reset_color}2/2     2            2           1d    kube-proxy   k8s.gcr.io/kube-proxy:v1.20.5   k8s-app=kube-proxy"
    }

    RBUFFER=' --namespace ""'
    prefix=daemonsets/
    _fzf_complete_kubectl 'kubectl scale '
}

@test 'Testing completion: kubectl wait **' {
    kubectl_mock_1() {
        assert $# equals 3
        assert $1 same_as 'api-resources'
        assert $2 same_as '--cached'
        assert $3 same_as '--verbs=get'

        echo 'NAME         SHORTNAMES   APIGROUP                    NAMESPACED   KIND'
        echo 'configmaps   cm                                       true         ConfigMap'
        echo 'namespaces   ns                                       false        Namespace'
        echo 'nodes        no                                       false        Node'
        echo 'pods         po                                       true         Pod'
        echo 'secrets                                               true         Secret'
        echo 'services     svc                                      true         Service'
        echo 'ingresses    ing          extensions                  true         Ingress'
        echo 'roles                     rbac.authorization.k8s.io   true         Role'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl wait '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 9
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}SHORTNAMES   APIGROUP                    NAMESPACED   KIND"
        assert ${lines[2]} same_as "${fg[yellow]}configmaps   ${reset_color}cm                                       true         ConfigMap"
        assert ${lines[3]} same_as "${fg[yellow]}namespaces   ${reset_color}ns                                       false        Namespace"
        assert ${lines[4]} same_as "${fg[yellow]}nodes        ${reset_color}no                                       false        Node"
        assert ${lines[5]} same_as "${fg[yellow]}pods         ${reset_color}po                                       true         Pod"
        assert ${lines[6]} same_as "${fg[yellow]}secrets      ${reset_color}                                         true         Secret"
        assert ${lines[7]} same_as "${fg[yellow]}services     ${reset_color}svc                                      true         Service"
        assert ${lines[8]} same_as "${fg[yellow]}ingresses    ${reset_color}ing          extensions                  true         Ingress"
        assert ${lines[9]} same_as "${fg[yellow]}roles        ${reset_color}             rbac.authorization.k8s.io   true         Role"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl wait '
}

@test 'Testing completion: kubectl wait pods **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl wait pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl wait pods '
}

@test 'Testing completion: kubectl wait pods/**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl wait pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=pods/
    _fzf_complete_kubectl 'kubectl wait '
}

@test 'Testing completion: kubectl wait pods --selector=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl wait pods --selector='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=--selector=
    _fzf_complete_kubectl 'kubectl wait pods '
}

@test 'Testing completion: kubectl wait pods --selector **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl wait pods --selector '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl wait pods --selector '
}

@test 'Testing completion: kubectl wait pods -l **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl wait pods -l '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl wait pods -l '
}

@test 'Testing completion: kubectl wait pods -l**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl wait pods -l'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=-l
    _fzf_complete_kubectl 'kubectl wait pods '
}

@test 'Testing completion: kubectl wait pods ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl wait pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl wait pods '
}

@test 'Testing completion: kubectl wait pods ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl wait pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl wait pods '
}

@test 'Testing completion: kubectl wait pods/** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl wait pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl wait '
}

@test 'Testing completion: kubectl wait pods/** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl wait pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl wait '
}

@test 'Testing completion: kubectl annotate **' {
    kubectl_mock_1() {
        assert $# equals 3
        assert $1 same_as 'api-resources'
        assert $2 same_as '--cached'
        assert $3 same_as '--verbs=get'

        echo 'NAME         SHORTNAMES   APIGROUP                    NAMESPACED   KIND'
        echo 'configmaps   cm                                       true         ConfigMap'
        echo 'namespaces   ns                                       false        Namespace'
        echo 'nodes        no                                       false        Node'
        echo 'pods         po                                       true         Pod'
        echo 'secrets                                               true         Secret'
        echo 'services     svc                                      true         Service'
        echo 'ingresses    ing          extensions                  true         Ingress'
        echo 'roles                     rbac.authorization.k8s.io   true         Role'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl annotate '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 9
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}SHORTNAMES   APIGROUP                    NAMESPACED   KIND"
        assert ${lines[2]} same_as "${fg[yellow]}configmaps   ${reset_color}cm                                       true         ConfigMap"
        assert ${lines[3]} same_as "${fg[yellow]}namespaces   ${reset_color}ns                                       false        Namespace"
        assert ${lines[4]} same_as "${fg[yellow]}nodes        ${reset_color}no                                       false        Node"
        assert ${lines[5]} same_as "${fg[yellow]}pods         ${reset_color}po                                       true         Pod"
        assert ${lines[6]} same_as "${fg[yellow]}secrets      ${reset_color}                                         true         Secret"
        assert ${lines[7]} same_as "${fg[yellow]}services     ${reset_color}svc                                      true         Service"
        assert ${lines[8]} same_as "${fg[yellow]}ingresses    ${reset_color}ing          extensions                  true         Ingress"
        assert ${lines[9]} same_as "${fg[yellow]}roles        ${reset_color}             rbac.authorization.k8s.io   true         Role"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl annotate '
}

@test 'Testing completion: kubectl annotate pods **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl annotate pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl annotate pods '
}

@test 'Testing completion: kubectl annotate pods/**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl annotate pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=pods/
    _fzf_complete_kubectl 'kubectl annotate '
}

@test 'Testing completion: kubectl annotate pods --selector=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl annotate pods --selector='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=--selector=
    _fzf_complete_kubectl 'kubectl annotate pods '
}

@test 'Testing completion: kubectl annotate pods --selector **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl annotate pods --selector '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl annotate pods --selector '
}

@test 'Testing completion: kubectl annotate pods -l **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl annotate pods -l '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl annotate pods -l '
}

@test 'Testing completion: kubectl annotate pods -l**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl annotate pods -l'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=-l
    _fzf_complete_kubectl 'kubectl annotate pods '
}

@test 'Testing completion: kubectl annotate pods etcd-minikube **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.metadata.annotations}'

        echo -n '{"cni.projectcalico.org/podIP":"10.0.0.1/32","cni.projectcalico.org/podIPs":"10.0.0.1/32","kubectl.kubernetes.io/restartedAt":"2020-10-01T00:00:00Z","note":"line\\\\nbreaks"}'
    }

    _fzf_complete() {
        assert $# equals 7
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--tiebreak=index'
        assert $5 same_as '--multi'
        assert $6 same_as '--'
        assert $7 same_as 'kubectl annotate pods etcd-minikube '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 2

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 4
        assert ${actual1[1]} same_as 'cni.projectcalico.org/podIP=10.0.0.1/32'
        assert ${actual1[2]} same_as 'cni.projectcalico.org/podIPs=10.0.0.1/32'
        assert ${actual1[3]} same_as 'kubectl.kubernetes.io/restartedAt=2020-10-01T00:00:00Z'
        assert ${actual1[4]} same_as 'note=line'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'breaks'
    }

    prefix=
    _fzf_complete_kubectl 'kubectl annotate pods etcd-minikube '
}

@test 'Testing completion: kubectl annotate pods/etcd-minikube **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.metadata.annotations}'

        echo -n '{"cni.projectcalico.org/podIP":"10.0.0.1/32","cni.projectcalico.org/podIPs":"10.0.0.1/32","kubectl.kubernetes.io/restartedAt":"2020-10-01T00:00:00Z","note":"line\\\\nbreaks"}'
    }

    _fzf_complete() {
        assert $# equals 7
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--tiebreak=index'
        assert $5 same_as '--multi'
        assert $6 same_as '--'
        assert $7 same_as 'kubectl annotate pods/etcd-minikube '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 2

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 4
        assert ${actual1[1]} same_as 'cni.projectcalico.org/podIP=10.0.0.1/32'
        assert ${actual1[2]} same_as 'cni.projectcalico.org/podIPs=10.0.0.1/32'
        assert ${actual1[3]} same_as 'kubectl.kubernetes.io/restartedAt=2020-10-01T00:00:00Z'
        assert ${actual1[4]} same_as 'note=line'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'breaks'
    }

    prefix=
    _fzf_complete_kubectl 'kubectl annotate pods/etcd-minikube '
}

@test 'Testing completion: kubectl annotate pods ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl annotate pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl annotate pods '
}

@test 'Testing completion: kubectl annotate pods ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl annotate pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl annotate pods '
}

@test 'Testing completion: kubectl annotate pods/** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl annotate pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl annotate '
}

@test 'Testing completion: kubectl annotate pods/** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl annotate pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl annotate '
}

@test 'Testing completion: kubectl annotate pods etcd-minikube ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.metadata.annotations}'

        echo -n '{"cni.projectcalico.org/podIP":"10.0.0.1/32","cni.projectcalico.org/podIPs":"10.0.0.1/32","kubectl.kubernetes.io/restartedAt":"2020-10-01T00:00:00Z","note":"line\\\\nbreaks"}'
    }

    _fzf_complete() {
        assert $# equals 7
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--tiebreak=index'
        assert $5 same_as '--multi'
        assert $6 same_as '--'
        assert $7 same_as 'kubectl annotate pods etcd-minikube '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 2

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 4
        assert ${actual1[1]} same_as 'cni.projectcalico.org/podIP=10.0.0.1/32'
        assert ${actual1[2]} same_as 'cni.projectcalico.org/podIPs=10.0.0.1/32'
        assert ${actual1[3]} same_as 'kubectl.kubernetes.io/restartedAt=2020-10-01T00:00:00Z'
        assert ${actual1[4]} same_as 'note=line'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'breaks'
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl annotate pods etcd-minikube '
}

@test 'Testing completion: kubectl annotate pods etcd-minikube ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={.metadata.annotations}'

        echo -n '{"cni.projectcalico.org/podIP":"10.0.0.1/32","cni.projectcalico.org/podIPs":"10.0.0.1/32","kubectl.kubernetes.io/restartedAt":"2020-10-01T00:00:00Z","note":"line\\\\nbreaks"}'
    }

    _fzf_complete() {
        assert $# equals 7
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--tiebreak=index'
        assert $5 same_as '--multi'
        assert $6 same_as '--'
        assert $7 same_as 'kubectl annotate pods etcd-minikube '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 2

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 4
        assert ${actual1[1]} same_as 'cni.projectcalico.org/podIP=10.0.0.1/32'
        assert ${actual1[2]} same_as 'cni.projectcalico.org/podIPs=10.0.0.1/32'
        assert ${actual1[3]} same_as 'kubectl.kubernetes.io/restartedAt=2020-10-01T00:00:00Z'
        assert ${actual1[4]} same_as 'note=line'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'breaks'
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl annotate pods etcd-minikube '
}

@test 'Testing completion: kubectl annotate pods/etcd-minikube ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.metadata.annotations}'

        echo -n '{"cni.projectcalico.org/podIP":"10.0.0.1/32","cni.projectcalico.org/podIPs":"10.0.0.1/32","kubectl.kubernetes.io/restartedAt":"2020-10-01T00:00:00Z","note":"line\\\\nbreaks"}'
    }

    _fzf_complete() {
        assert $# equals 7
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--tiebreak=index'
        assert $5 same_as '--multi'
        assert $6 same_as '--'
        assert $7 same_as 'kubectl annotate pods/etcd-minikube '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 2

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 4
        assert ${actual1[1]} same_as 'cni.projectcalico.org/podIP=10.0.0.1/32'
        assert ${actual1[2]} same_as 'cni.projectcalico.org/podIPs=10.0.0.1/32'
        assert ${actual1[3]} same_as 'kubectl.kubernetes.io/restartedAt=2020-10-01T00:00:00Z'
        assert ${actual1[4]} same_as 'note=line'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'breaks'
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl annotate pods/etcd-minikube '
}

@test 'Testing completion: kubectl annotate pods/etcd-minikube ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={.metadata.annotations}'

        echo -n '{"cni.projectcalico.org/podIP":"10.0.0.1/32","cni.projectcalico.org/podIPs":"10.0.0.1/32","kubectl.kubernetes.io/restartedAt":"2020-10-01T00:00:00Z","note":"line\\\\nbreaks"}'
    }

    _fzf_complete() {
        assert $# equals 7
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--tiebreak=index'
        assert $5 same_as '--multi'
        assert $6 same_as '--'
        assert $7 same_as 'kubectl annotate pods/etcd-minikube '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 2

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 4
        assert ${actual1[1]} same_as 'cni.projectcalico.org/podIP=10.0.0.1/32'
        assert ${actual1[2]} same_as 'cni.projectcalico.org/podIPs=10.0.0.1/32'
        assert ${actual1[3]} same_as 'kubectl.kubernetes.io/restartedAt=2020-10-01T00:00:00Z'
        assert ${actual1[4]} same_as 'note=line'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'breaks'
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl annotate pods/etcd-minikube '
}

@test 'Testing completion: kubectl apply --filename=**' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'kubectl apply --filename='
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=--filename=
    _fzf_complete_kubectl 'kubectl apply '
}

@test 'Testing completion: kubectl apply --filename **' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'kubectl apply --filename '
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=
    _fzf_complete_kubectl 'kubectl apply --filename '
}

@test 'Testing completion: kubectl apply -f **' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'kubectl apply -f '
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=
    _fzf_complete_kubectl 'kubectl apply -f '
}

@test 'Testing completion: kubectl apply -f**' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'kubectl apply -f'
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=-f
    _fzf_complete_kubectl 'kubectl apply '
}

@test 'Testing completion: kubectl apply edit-last-applied **' {
    kubectl_mock_1() {
        assert $# equals 3
        assert $1 same_as 'api-resources'
        assert $2 same_as '--cached'
        assert $3 same_as '--verbs=get'

        echo 'NAME         SHORTNAMES   APIGROUP                    NAMESPACED   KIND'
        echo 'configmaps   cm                                       true         ConfigMap'
        echo 'namespaces   ns                                       false        Namespace'
        echo 'nodes        no                                       false        Node'
        echo 'pods         po                                       true         Pod'
        echo 'secrets                                               true         Secret'
        echo 'services     svc                                      true         Service'
        echo 'ingresses    ing          extensions                  true         Ingress'
        echo 'roles                     rbac.authorization.k8s.io   true         Role'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl apply edit-last-applied '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 9
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}SHORTNAMES   APIGROUP                    NAMESPACED   KIND"
        assert ${lines[2]} same_as "${fg[yellow]}configmaps   ${reset_color}cm                                       true         ConfigMap"
        assert ${lines[3]} same_as "${fg[yellow]}namespaces   ${reset_color}ns                                       false        Namespace"
        assert ${lines[4]} same_as "${fg[yellow]}nodes        ${reset_color}no                                       false        Node"
        assert ${lines[5]} same_as "${fg[yellow]}pods         ${reset_color}po                                       true         Pod"
        assert ${lines[6]} same_as "${fg[yellow]}secrets      ${reset_color}                                         true         Secret"
        assert ${lines[7]} same_as "${fg[yellow]}services     ${reset_color}svc                                      true         Service"
        assert ${lines[8]} same_as "${fg[yellow]}ingresses    ${reset_color}ing          extensions                  true         Ingress"
        assert ${lines[9]} same_as "${fg[yellow]}roles        ${reset_color}             rbac.authorization.k8s.io   true         Role"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl apply edit-last-applied '
}

@test 'Testing completion: kubectl apply edit-last-applied pods **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl apply edit-last-applied pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl apply edit-last-applied pods '
}

@test 'Testing completion: kubectl apply edit-last-applied pods/**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl apply edit-last-applied pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=pods/
    _fzf_complete_kubectl 'kubectl apply edit-last-applied '
}

@test 'Testing completion: kubectl apply edit-last-applied pods ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl apply edit-last-applied pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl apply edit-last-applied pods '
}

@test 'Testing completion: kubectl apply edit-last-applied pods ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl apply edit-last-applied pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl apply edit-last-applied pods '
}

@test 'Testing completion: kubectl apply edit-last-applied pods/** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl apply edit-last-applied pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl apply edit-last-applied '
}

@test 'Testing completion: kubectl apply edit-last-applied pods/** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl apply edit-last-applied pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl apply edit-last-applied '
}

@test 'Testing completion: kubectl apply view-last-applied **' {
    kubectl_mock_1() {
        assert $# equals 3
        assert $1 same_as 'api-resources'
        assert $2 same_as '--cached'
        assert $3 same_as '--verbs=get'

        echo 'NAME         SHORTNAMES   APIGROUP                    NAMESPACED   KIND'
        echo 'configmaps   cm                                       true         ConfigMap'
        echo 'namespaces   ns                                       false        Namespace'
        echo 'nodes        no                                       false        Node'
        echo 'pods         po                                       true         Pod'
        echo 'secrets                                               true         Secret'
        echo 'services     svc                                      true         Service'
        echo 'ingresses    ing          extensions                  true         Ingress'
        echo 'roles                     rbac.authorization.k8s.io   true         Role'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl apply view-last-applied '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 9
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}SHORTNAMES   APIGROUP                    NAMESPACED   KIND"
        assert ${lines[2]} same_as "${fg[yellow]}configmaps   ${reset_color}cm                                       true         ConfigMap"
        assert ${lines[3]} same_as "${fg[yellow]}namespaces   ${reset_color}ns                                       false        Namespace"
        assert ${lines[4]} same_as "${fg[yellow]}nodes        ${reset_color}no                                       false        Node"
        assert ${lines[5]} same_as "${fg[yellow]}pods         ${reset_color}po                                       true         Pod"
        assert ${lines[6]} same_as "${fg[yellow]}secrets      ${reset_color}                                         true         Secret"
        assert ${lines[7]} same_as "${fg[yellow]}services     ${reset_color}svc                                      true         Service"
        assert ${lines[8]} same_as "${fg[yellow]}ingresses    ${reset_color}ing          extensions                  true         Ingress"
        assert ${lines[9]} same_as "${fg[yellow]}roles        ${reset_color}             rbac.authorization.k8s.io   true         Role"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl apply view-last-applied '
}

@test 'Testing completion: kubectl apply view-last-applied pods **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl apply view-last-applied pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl apply view-last-applied pods '
}

@test 'Testing completion: kubectl apply view-last-applied pods/**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl apply view-last-applied pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=pods/
    _fzf_complete_kubectl 'kubectl apply view-last-applied '
}

@test 'Testing completion: kubectl apply view-last-applied pods --selector=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl apply view-last-applied pods --selector='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=--selector=
    _fzf_complete_kubectl 'kubectl apply view-last-applied pods '
}

@test 'Testing completion: kubectl apply view-last-applied pods --selector **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl apply view-last-applied pods --selector '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl apply view-last-applied pods --selector '
}

@test 'Testing completion: kubectl apply view-last-applied pods -l **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl apply view-last-applied pods -l '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl apply view-last-applied pods -l '
}

@test 'Testing completion: kubectl apply view-last-applied pods -l**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl apply view-last-applied pods -l'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=-l
    _fzf_complete_kubectl 'kubectl apply view-last-applied pods '
}

@test 'Testing completion: kubectl apply view-last-applied pods ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl apply view-last-applied pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl apply view-last-applied pods '
}

@test 'Testing completion: kubectl apply view-last-applied pods ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl apply view-last-applied pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl apply view-last-applied pods '
}

@test 'Testing completion: kubectl apply view-last-applied pods/** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl apply view-last-applied pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl apply view-last-applied '
}

@test 'Testing completion: kubectl apply view-last-applied pods/** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl apply view-last-applied pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl apply view-last-applied '
}

@test 'Testing completion: kubectl autoscale **' {
    kubectl_mock_1() {
        assert $# equals 3
        assert $1 same_as 'api-resources'
        assert $2 same_as '--cached'
        assert $3 same_as '--verbs=get'

        echo 'NAME         SHORTNAMES   APIGROUP                    NAMESPACED   KIND'
        echo 'configmaps   cm                                       true         ConfigMap'
        echo 'namespaces   ns                                       false        Namespace'
        echo 'nodes        no                                       false        Node'
        echo 'pods         po                                       true         Pod'
        echo 'secrets                                               true         Secret'
        echo 'services     svc                                      true         Service'
        echo 'ingresses    ing          extensions                  true         Ingress'
        echo 'roles                     rbac.authorization.k8s.io   true         Role'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl autoscale '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 9
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}SHORTNAMES   APIGROUP                    NAMESPACED   KIND"
        assert ${lines[2]} same_as "${fg[yellow]}configmaps   ${reset_color}cm                                       true         ConfigMap"
        assert ${lines[3]} same_as "${fg[yellow]}namespaces   ${reset_color}ns                                       false        Namespace"
        assert ${lines[4]} same_as "${fg[yellow]}nodes        ${reset_color}no                                       false        Node"
        assert ${lines[5]} same_as "${fg[yellow]}pods         ${reset_color}po                                       true         Pod"
        assert ${lines[6]} same_as "${fg[yellow]}secrets      ${reset_color}                                         true         Secret"
        assert ${lines[7]} same_as "${fg[yellow]}services     ${reset_color}svc                                      true         Service"
        assert ${lines[8]} same_as "${fg[yellow]}ingresses    ${reset_color}ing          extensions                  true         Ingress"
        assert ${lines[9]} same_as "${fg[yellow]}roles        ${reset_color}             rbac.authorization.k8s.io   true         Role"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl autoscale '
}

@test 'Testing completion: kubectl autoscale pods **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl autoscale pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl autoscale pods '
}

@test 'Testing completion: kubectl autoscale pods/**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl autoscale pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=pods/
    _fzf_complete_kubectl 'kubectl autoscale '
}

@test 'Testing completion: kubectl autoscale pods ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl autoscale pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl autoscale pods '
}

@test 'Testing completion: kubectl autoscale pods ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl autoscale pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl autoscale pods '
}

@test 'Testing completion: kubectl autoscale pods/** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl autoscale pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl autoscale '
}

@test 'Testing completion: kubectl autoscale pods/** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl autoscale pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl autoscale '
}

@test 'Testing completion: kubectl edit **' {
    kubectl_mock_1() {
        assert $# equals 3
        assert $1 same_as 'api-resources'
        assert $2 same_as '--cached'
        assert $3 same_as '--verbs=get'

        echo 'NAME         SHORTNAMES   APIGROUP                    NAMESPACED   KIND'
        echo 'configmaps   cm                                       true         ConfigMap'
        echo 'namespaces   ns                                       false        Namespace'
        echo 'nodes        no                                       false        Node'
        echo 'pods         po                                       true         Pod'
        echo 'secrets                                               true         Secret'
        echo 'services     svc                                      true         Service'
        echo 'ingresses    ing          extensions                  true         Ingress'
        echo 'roles                     rbac.authorization.k8s.io   true         Role'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl edit '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 9
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}SHORTNAMES   APIGROUP                    NAMESPACED   KIND"
        assert ${lines[2]} same_as "${fg[yellow]}configmaps   ${reset_color}cm                                       true         ConfigMap"
        assert ${lines[3]} same_as "${fg[yellow]}namespaces   ${reset_color}ns                                       false        Namespace"
        assert ${lines[4]} same_as "${fg[yellow]}nodes        ${reset_color}no                                       false        Node"
        assert ${lines[5]} same_as "${fg[yellow]}pods         ${reset_color}po                                       true         Pod"
        assert ${lines[6]} same_as "${fg[yellow]}secrets      ${reset_color}                                         true         Secret"
        assert ${lines[7]} same_as "${fg[yellow]}services     ${reset_color}svc                                      true         Service"
        assert ${lines[8]} same_as "${fg[yellow]}ingresses    ${reset_color}ing          extensions                  true         Ingress"
        assert ${lines[9]} same_as "${fg[yellow]}roles        ${reset_color}             rbac.authorization.k8s.io   true         Role"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl edit '
}

@test 'Testing completion: kubectl edit pods **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl edit pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl edit pods '
}

@test 'Testing completion: kubectl edit pods/**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl edit pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=pods/
    _fzf_complete_kubectl 'kubectl edit '
}

@test 'Testing completion: kubectl edit pods ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl edit pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl edit pods '
}

@test 'Testing completion: kubectl edit pods ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl edit pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl edit pods '
}

@test 'Testing completion: kubectl edit pods/** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl edit pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl edit '
}

@test 'Testing completion: kubectl edit pods/** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl edit pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl edit '
}

@test 'Testing completion: kubectl expose **' {
    kubectl_mock_1() {
        assert $# equals 3
        assert $1 same_as 'api-resources'
        assert $2 same_as '--cached'
        assert $3 same_as '--verbs=get'

        echo 'NAME         SHORTNAMES   APIGROUP                    NAMESPACED   KIND'
        echo 'configmaps   cm                                       true         ConfigMap'
        echo 'namespaces   ns                                       false        Namespace'
        echo 'nodes        no                                       false        Node'
        echo 'pods         po                                       true         Pod'
        echo 'secrets                                               true         Secret'
        echo 'services     svc                                      true         Service'
        echo 'ingresses    ing          extensions                  true         Ingress'
        echo 'roles                     rbac.authorization.k8s.io   true         Role'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl expose '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 9
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}SHORTNAMES   APIGROUP                    NAMESPACED   KIND"
        assert ${lines[2]} same_as "${fg[yellow]}configmaps   ${reset_color}cm                                       true         ConfigMap"
        assert ${lines[3]} same_as "${fg[yellow]}namespaces   ${reset_color}ns                                       false        Namespace"
        assert ${lines[4]} same_as "${fg[yellow]}nodes        ${reset_color}no                                       false        Node"
        assert ${lines[5]} same_as "${fg[yellow]}pods         ${reset_color}po                                       true         Pod"
        assert ${lines[6]} same_as "${fg[yellow]}secrets      ${reset_color}                                         true         Secret"
        assert ${lines[7]} same_as "${fg[yellow]}services     ${reset_color}svc                                      true         Service"
        assert ${lines[8]} same_as "${fg[yellow]}ingresses    ${reset_color}ing          extensions                  true         Ingress"
        assert ${lines[9]} same_as "${fg[yellow]}roles        ${reset_color}             rbac.authorization.k8s.io   true         Role"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl expose '
}

@test 'Testing completion: kubectl expose pods **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl expose pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl expose pods '
}

@test 'Testing completion: kubectl expose pods/**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl expose pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=pods/
    _fzf_complete_kubectl 'kubectl expose '
}

@test 'Testing completion: kubectl expose pods ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl expose pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl expose pods '
}

@test 'Testing completion: kubectl expose pods ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl expose pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl expose pods '
}

@test 'Testing completion: kubectl expose pods/** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl expose pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl expose '
}

@test 'Testing completion: kubectl expose pods/** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl expose pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl expose '
}

@test 'Testing completion: kubectl patch **' {
    kubectl_mock_1() {
        assert $# equals 3
        assert $1 same_as 'api-resources'
        assert $2 same_as '--cached'
        assert $3 same_as '--verbs=get'

        echo 'NAME         SHORTNAMES   APIGROUP                    NAMESPACED   KIND'
        echo 'configmaps   cm                                       true         ConfigMap'
        echo 'namespaces   ns                                       false        Namespace'
        echo 'nodes        no                                       false        Node'
        echo 'pods         po                                       true         Pod'
        echo 'secrets                                               true         Secret'
        echo 'services     svc                                      true         Service'
        echo 'ingresses    ing          extensions                  true         Ingress'
        echo 'roles                     rbac.authorization.k8s.io   true         Role'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl patch '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 9
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}SHORTNAMES   APIGROUP                    NAMESPACED   KIND"
        assert ${lines[2]} same_as "${fg[yellow]}configmaps   ${reset_color}cm                                       true         ConfigMap"
        assert ${lines[3]} same_as "${fg[yellow]}namespaces   ${reset_color}ns                                       false        Namespace"
        assert ${lines[4]} same_as "${fg[yellow]}nodes        ${reset_color}no                                       false        Node"
        assert ${lines[5]} same_as "${fg[yellow]}pods         ${reset_color}po                                       true         Pod"
        assert ${lines[6]} same_as "${fg[yellow]}secrets      ${reset_color}                                         true         Secret"
        assert ${lines[7]} same_as "${fg[yellow]}services     ${reset_color}svc                                      true         Service"
        assert ${lines[8]} same_as "${fg[yellow]}ingresses    ${reset_color}ing          extensions                  true         Ingress"
        assert ${lines[9]} same_as "${fg[yellow]}roles        ${reset_color}             rbac.authorization.k8s.io   true         Role"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl patch '
}

@test 'Testing completion: kubectl patch pods **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl patch pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl patch pods '
}

@test 'Testing completion: kubectl patch pods/**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl patch pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=pods/
    _fzf_complete_kubectl 'kubectl patch '
}

@test 'Testing completion: kubectl patch pods ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl patch pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl patch pods '
}

@test 'Testing completion: kubectl patch pods ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl patch pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl patch pods '
}

@test 'Testing completion: kubectl patch pods/** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl patch pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl patch '
}

@test 'Testing completion: kubectl patch pods/** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl patch pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl patch '
}

@test 'Testing completion: kubectl cordon **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAME       STATUS   ROLES    AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE     KERNEL-VERSION   CONTAINER-RUNTIME'
        echo 'minikube   Ready    master   20d   v1.19.2   192.0.2.1     <none>        Arch Linux   5.8.14-arch1-1   docker://19.3.13'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl cordon '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "${fg[yellow]}NAME       ${reset_color}STATUS   ROLES    AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE     KERNEL-VERSION   CONTAINER-RUNTIME"
        assert ${lines[2]} same_as "${fg[yellow]}minikube   ${reset_color}Ready    master   20d   v1.19.2   192.0.2.1     <none>        Arch Linux   5.8.14-arch1-1   docker://19.3.13"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl cordon '
}

@test 'Testing completion: kubectl cordon --selector=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node01","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node02","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node03","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl cordon --selector='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY                                  ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}kubernetes.io/arch                   ${reset_color}  amd64"
        assert ${lines[3]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node01"
        assert ${lines[4]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node02"
        assert ${lines[5]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node03"
        assert ${lines[6]} same_as "${fg[yellow]}kubernetes.io/os                     ${reset_color}  linux"
        assert ${lines[7]} same_as "${fg[yellow]}node-role.kubernetes.io/control-plane${reset_color}  "
    }

    prefix=--selector=
    _fzf_complete_kubectl 'kubectl cordon '
}

@test 'Testing completion: kubectl cordon --selector **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node01","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node02","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node03","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl cordon --selector '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY                                  ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}kubernetes.io/arch                   ${reset_color}  amd64"
        assert ${lines[3]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node01"
        assert ${lines[4]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node02"
        assert ${lines[5]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node03"
        assert ${lines[6]} same_as "${fg[yellow]}kubernetes.io/os                     ${reset_color}  linux"
        assert ${lines[7]} same_as "${fg[yellow]}node-role.kubernetes.io/control-plane${reset_color}  "
    }

    prefix=
    _fzf_complete_kubectl 'kubectl cordon --selector '
}

@test 'Testing completion: kubectl cordon -l **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node01","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node02","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node03","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl cordon -l '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY                                  ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}kubernetes.io/arch                   ${reset_color}  amd64"
        assert ${lines[3]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node01"
        assert ${lines[4]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node02"
        assert ${lines[5]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node03"
        assert ${lines[6]} same_as "${fg[yellow]}kubernetes.io/os                     ${reset_color}  linux"
        assert ${lines[7]} same_as "${fg[yellow]}node-role.kubernetes.io/control-plane${reset_color}  "
    }

    prefix=
    _fzf_complete_kubectl 'kubectl cordon -l '
}

@test 'Testing completion: kubectl cordon -l**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node01","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node02","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node03","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl cordon -l'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY                                  ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}kubernetes.io/arch                   ${reset_color}  amd64"
        assert ${lines[3]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node01"
        assert ${lines[4]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node02"
        assert ${lines[5]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node03"
        assert ${lines[6]} same_as "${fg[yellow]}kubernetes.io/os                     ${reset_color}  linux"
        assert ${lines[7]} same_as "${fg[yellow]}node-role.kubernetes.io/control-plane${reset_color}  "
    }

    prefix=-l
    _fzf_complete_kubectl 'kubectl cordon '
}

@test 'Testing completion: kubectl drain **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAME       STATUS   ROLES    AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE     KERNEL-VERSION   CONTAINER-RUNTIME'
        echo 'minikube   Ready    master   20d   v1.19.2   192.0.2.1     <none>        Arch Linux   5.8.14-arch1-1   docker://19.3.13'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl drain '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "${fg[yellow]}NAME       ${reset_color}STATUS   ROLES    AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE     KERNEL-VERSION   CONTAINER-RUNTIME"
        assert ${lines[2]} same_as "${fg[yellow]}minikube   ${reset_color}Ready    master   20d   v1.19.2   192.0.2.1     <none>        Arch Linux   5.8.14-arch1-1   docker://19.3.13"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl drain '
}

@test 'Testing completion: kubectl drain --selector=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node01","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node02","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node03","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl drain --selector='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY                                  ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}kubernetes.io/arch                   ${reset_color}  amd64"
        assert ${lines[3]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node01"
        assert ${lines[4]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node02"
        assert ${lines[5]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node03"
        assert ${lines[6]} same_as "${fg[yellow]}kubernetes.io/os                     ${reset_color}  linux"
        assert ${lines[7]} same_as "${fg[yellow]}node-role.kubernetes.io/control-plane${reset_color}  "
    }

    prefix=--selector=
    _fzf_complete_kubectl 'kubectl drain '
}

@test 'Testing completion: kubectl drain --selector **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node01","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node02","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node03","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl drain --selector '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY                                  ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}kubernetes.io/arch                   ${reset_color}  amd64"
        assert ${lines[3]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node01"
        assert ${lines[4]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node02"
        assert ${lines[5]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node03"
        assert ${lines[6]} same_as "${fg[yellow]}kubernetes.io/os                     ${reset_color}  linux"
        assert ${lines[7]} same_as "${fg[yellow]}node-role.kubernetes.io/control-plane${reset_color}  "
    }

    prefix=
    _fzf_complete_kubectl 'kubectl drain --selector '
}

@test 'Testing completion: kubectl drain -l **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node01","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node02","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node03","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl drain -l '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY                                  ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}kubernetes.io/arch                   ${reset_color}  amd64"
        assert ${lines[3]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node01"
        assert ${lines[4]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node02"
        assert ${lines[5]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node03"
        assert ${lines[6]} same_as "${fg[yellow]}kubernetes.io/os                     ${reset_color}  linux"
        assert ${lines[7]} same_as "${fg[yellow]}node-role.kubernetes.io/control-plane${reset_color}  "
    }

    prefix=
    _fzf_complete_kubectl 'kubectl drain -l '
}

@test 'Testing completion: kubectl drain -l**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node01","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node02","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node03","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl drain -l'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY                                  ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}kubernetes.io/arch                   ${reset_color}  amd64"
        assert ${lines[3]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node01"
        assert ${lines[4]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node02"
        assert ${lines[5]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node03"
        assert ${lines[6]} same_as "${fg[yellow]}kubernetes.io/os                     ${reset_color}  linux"
        assert ${lines[7]} same_as "${fg[yellow]}node-role.kubernetes.io/control-plane${reset_color}  "
    }

    prefix=-l
    _fzf_complete_kubectl 'kubectl drain '
}

@test 'Testing completion: kubectl uncordon **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAME       STATUS   ROLES    AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE     KERNEL-VERSION   CONTAINER-RUNTIME'
        echo 'minikube   Ready    master   20d   v1.19.2   192.0.2.1     <none>        Arch Linux   5.8.14-arch1-1   docker://19.3.13'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl uncordon '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "${fg[yellow]}NAME       ${reset_color}STATUS   ROLES    AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE     KERNEL-VERSION   CONTAINER-RUNTIME"
        assert ${lines[2]} same_as "${fg[yellow]}minikube   ${reset_color}Ready    master   20d   v1.19.2   192.0.2.1     <none>        Arch Linux   5.8.14-arch1-1   docker://19.3.13"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl uncordon '
}

@test 'Testing completion: kubectl uncordon --selector=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node01","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node02","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node03","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl uncordon --selector='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY                                  ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}kubernetes.io/arch                   ${reset_color}  amd64"
        assert ${lines[3]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node01"
        assert ${lines[4]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node02"
        assert ${lines[5]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node03"
        assert ${lines[6]} same_as "${fg[yellow]}kubernetes.io/os                     ${reset_color}  linux"
        assert ${lines[7]} same_as "${fg[yellow]}node-role.kubernetes.io/control-plane${reset_color}  "
    }

    prefix=--selector=
    _fzf_complete_kubectl 'kubectl uncordon '
}

@test 'Testing completion: kubectl uncordon --selector **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node01","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node02","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node03","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl uncordon --selector '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY                                  ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}kubernetes.io/arch                   ${reset_color}  amd64"
        assert ${lines[3]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node01"
        assert ${lines[4]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node02"
        assert ${lines[5]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node03"
        assert ${lines[6]} same_as "${fg[yellow]}kubernetes.io/os                     ${reset_color}  linux"
        assert ${lines[7]} same_as "${fg[yellow]}node-role.kubernetes.io/control-plane${reset_color}  "
    }

    prefix=
    _fzf_complete_kubectl 'kubectl uncordon --selector '
}

@test 'Testing completion: kubectl uncordon -l **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node01","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node02","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node03","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl uncordon -l '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY                                  ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}kubernetes.io/arch                   ${reset_color}  amd64"
        assert ${lines[3]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node01"
        assert ${lines[4]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node02"
        assert ${lines[5]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node03"
        assert ${lines[6]} same_as "${fg[yellow]}kubernetes.io/os                     ${reset_color}  linux"
        assert ${lines[7]} same_as "${fg[yellow]}node-role.kubernetes.io/control-plane${reset_color}  "
    }

    prefix=
    _fzf_complete_kubectl 'kubectl uncordon -l '
}

@test 'Testing completion: kubectl uncordon -l**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node01","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node02","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node03","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl uncordon -l'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY                                  ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}kubernetes.io/arch                   ${reset_color}  amd64"
        assert ${lines[3]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node01"
        assert ${lines[4]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node02"
        assert ${lines[5]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node03"
        assert ${lines[6]} same_as "${fg[yellow]}kubernetes.io/os                     ${reset_color}  linux"
        assert ${lines[7]} same_as "${fg[yellow]}node-role.kubernetes.io/control-plane${reset_color}  "
    }

    prefix=-l
    _fzf_complete_kubectl 'kubectl uncordon '
}

@test 'Testing completion: kubectl create **' {
    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'kubectl create '

        run cat
        assert kubectl mock_times 0
        assert ${#lines} equals 23
        assert ${lines[1]} same_as 'clusterrole'
        assert ${lines[2]} same_as 'clusterrolebinding'
        assert ${lines[3]} same_as 'configmap'
        assert ${lines[4]} same_as 'cronjob'
        assert ${lines[5]} same_as 'deployment'
        assert ${lines[6]} same_as 'ingress'
        assert ${lines[7]} same_as 'job'
        assert ${lines[8]} same_as 'namespace'
        assert ${lines[9]} same_as 'poddisruptionbudget'
        assert ${lines[10]} same_as 'priorityclass'
        assert ${lines[11]} same_as 'quota'
        assert ${lines[12]} same_as 'role'
        assert ${lines[13]} same_as 'rolebinding'
        assert ${lines[14]} same_as 'secret'
        assert ${lines[15]} same_as 'secret docker-registry'
        assert ${lines[16]} same_as 'secret generic'
        assert ${lines[17]} same_as 'secret tls'
        assert ${lines[18]} same_as 'service'
        assert ${lines[19]} same_as 'service clusterip'
        assert ${lines[20]} same_as 'service externalname'
        assert ${lines[21]} same_as 'service loadbalancer'
        assert ${lines[22]} same_as 'service nodeport'
        assert ${lines[23]} same_as 'serviceaccount'
    }

    prefix=
    _fzf_complete_kubectl 'kubectl create '
}

@test 'Testing completion: kubectl create job --from=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'cronjob'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                  SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE   CONTAINERS    IMAGES                                       SELECTOR'
        echo 'kube-system   descheduler-cronjob   */2 * * * *   False     0        90s             1d    descheduler   k8s.gcr.io/descheduler/descheduler:v0.20.0   <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl create job --from=cronjob/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                  ${reset_color}SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE   CONTAINERS    IMAGES                                       SELECTOR"
        assert ${lines[2]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}descheduler-cronjob   ${reset_color}*/2 * * * *   False     0        90s             1d    descheduler   k8s.gcr.io/descheduler/descheduler:v0.20.0   <none>"
    }

    prefix=--from=
    _fzf_complete_kubectl 'kubectl create job '
}

@test 'Testing completion: kubectl create job --from=cronjob/**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'cronjob'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                  SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE   CONTAINERS    IMAGES                                       SELECTOR'
        echo 'kube-system   descheduler-cronjob   */2 * * * *   False     0        90s             1d    descheduler   k8s.gcr.io/descheduler/descheduler:v0.20.0   <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl create job --from=cronjob/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                  ${reset_color}SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE   CONTAINERS    IMAGES                                       SELECTOR"
        assert ${lines[2]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}descheduler-cronjob   ${reset_color}*/2 * * * *   False     0        90s             1d    descheduler   k8s.gcr.io/descheduler/descheduler:v0.20.0   <none>"
    }

    prefix=--from=cronjob/
    _fzf_complete_kubectl 'kubectl create job '
}

@test 'Testing completion: kubectl create job --from **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'cronjob'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                  SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE   CONTAINERS    IMAGES                                       SELECTOR'
        echo 'kube-system   descheduler-cronjob   */2 * * * *   False     0        90s             1d    descheduler   k8s.gcr.io/descheduler/descheduler:v0.20.0   <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl create job --from cronjob/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                  ${reset_color}SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE   CONTAINERS    IMAGES                                       SELECTOR"
        assert ${lines[2]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}descheduler-cronjob   ${reset_color}*/2 * * * *   False     0        90s             1d    descheduler   k8s.gcr.io/descheduler/descheduler:v0.20.0   <none>"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl create job --from '
}

@test 'Testing completion: kubectl create job --from cronjob/**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'cronjob'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                  SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE   CONTAINERS    IMAGES                                       SELECTOR'
        echo 'kube-system   descheduler-cronjob   */2 * * * *   False     0        90s             1d    descheduler   k8s.gcr.io/descheduler/descheduler:v0.20.0   <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl create job --from cronjob/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                  ${reset_color}SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE   CONTAINERS    IMAGES                                       SELECTOR"
        assert ${lines[2]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}descheduler-cronjob   ${reset_color}*/2 * * * *   False     0        90s             1d    descheduler   k8s.gcr.io/descheduler/descheduler:v0.20.0   <none>"
    }

    prefix=cronjob/
    _fzf_complete_kubectl 'kubectl create job --from '
}

@test 'Testing completion: kubectl delete **' {
    kubectl_mock_1() {
        assert $# equals 3
        assert $1 same_as 'api-resources'
        assert $2 same_as '--cached'
        assert $3 same_as '--verbs=get'

        echo 'NAME         SHORTNAMES   APIGROUP                    NAMESPACED   KIND'
        echo 'configmaps   cm                                       true         ConfigMap'
        echo 'namespaces   ns                                       false        Namespace'
        echo 'nodes        no                                       false        Node'
        echo 'pods         po                                       true         Pod'
        echo 'secrets                                               true         Secret'
        echo 'services     svc                                      true         Service'
        echo 'ingresses    ing          extensions                  true         Ingress'
        echo 'roles                     rbac.authorization.k8s.io   true         Role'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl delete '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 9
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}SHORTNAMES   APIGROUP                    NAMESPACED   KIND"
        assert ${lines[2]} same_as "${fg[yellow]}configmaps   ${reset_color}cm                                       true         ConfigMap"
        assert ${lines[3]} same_as "${fg[yellow]}namespaces   ${reset_color}ns                                       false        Namespace"
        assert ${lines[4]} same_as "${fg[yellow]}nodes        ${reset_color}no                                       false        Node"
        assert ${lines[5]} same_as "${fg[yellow]}pods         ${reset_color}po                                       true         Pod"
        assert ${lines[6]} same_as "${fg[yellow]}secrets      ${reset_color}                                         true         Secret"
        assert ${lines[7]} same_as "${fg[yellow]}services     ${reset_color}svc                                      true         Service"
        assert ${lines[8]} same_as "${fg[yellow]}ingresses    ${reset_color}ing          extensions                  true         Ingress"
        assert ${lines[9]} same_as "${fg[yellow]}roles        ${reset_color}             rbac.authorization.k8s.io   true         Role"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl delete '
}

@test 'Testing completion: kubectl delete pods **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl delete pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl delete pods '
}

@test 'Testing completion: kubectl delete pods/**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl delete pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=pods/
    _fzf_complete_kubectl 'kubectl delete '
}

@test 'Testing completion: kubectl delete pods --selector=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl delete pods --selector='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=--selector=
    _fzf_complete_kubectl 'kubectl delete pods '
}

@test 'Testing completion: kubectl delete pods --selector **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl delete pods --selector '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl delete pods --selector '
}

@test 'Testing completion: kubectl delete pods -l **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl delete pods -l '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl delete pods -l '
}

@test 'Testing completion: kubectl delete pods -l**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl delete pods -l'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=-l
    _fzf_complete_kubectl 'kubectl delete pods '
}

@test 'Testing completion: kubectl delete pods ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl delete pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl delete pods '
}

@test 'Testing completion: kubectl delete pods ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl delete pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl delete pods '
}

@test 'Testing completion: kubectl delete pods/** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl delete pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl delete '
}

@test 'Testing completion: kubectl delete pods/** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl delete pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl delete '
}

@test 'Testing completion: kubectl describe **' {
    kubectl_mock_1() {
        assert $# equals 3
        assert $1 same_as 'api-resources'
        assert $2 same_as '--cached'
        assert $3 same_as '--verbs=get'

        echo 'NAME         SHORTNAMES   APIGROUP                    NAMESPACED   KIND'
        echo 'configmaps   cm                                       true         ConfigMap'
        echo 'namespaces   ns                                       false        Namespace'
        echo 'nodes        no                                       false        Node'
        echo 'pods         po                                       true         Pod'
        echo 'secrets                                               true         Secret'
        echo 'services     svc                                      true         Service'
        echo 'ingresses    ing          extensions                  true         Ingress'
        echo 'roles                     rbac.authorization.k8s.io   true         Role'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl describe '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 9
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}SHORTNAMES   APIGROUP                    NAMESPACED   KIND"
        assert ${lines[2]} same_as "${fg[yellow]}configmaps   ${reset_color}cm                                       true         ConfigMap"
        assert ${lines[3]} same_as "${fg[yellow]}namespaces   ${reset_color}ns                                       false        Namespace"
        assert ${lines[4]} same_as "${fg[yellow]}nodes        ${reset_color}no                                       false        Node"
        assert ${lines[5]} same_as "${fg[yellow]}pods         ${reset_color}po                                       true         Pod"
        assert ${lines[6]} same_as "${fg[yellow]}secrets      ${reset_color}                                         true         Secret"
        assert ${lines[7]} same_as "${fg[yellow]}services     ${reset_color}svc                                      true         Service"
        assert ${lines[8]} same_as "${fg[yellow]}ingresses    ${reset_color}ing          extensions                  true         Ingress"
        assert ${lines[9]} same_as "${fg[yellow]}roles        ${reset_color}             rbac.authorization.k8s.io   true         Role"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl describe '
}

@test 'Testing completion: kubectl describe pods **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl describe pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl describe pods '
}

@test 'Testing completion: kubectl describe pods/**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl describe pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=pods/
    _fzf_complete_kubectl 'kubectl describe '
}

@test 'Testing completion: kubectl describe pods --selector=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl describe pods --selector='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=--selector=
    _fzf_complete_kubectl 'kubectl describe pods '
}

@test 'Testing completion: kubectl describe pods --selector **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl describe pods --selector '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl describe pods --selector '
}

@test 'Testing completion: kubectl describe pods -l **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl describe pods -l '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl describe pods -l '
}

@test 'Testing completion: kubectl describe pods -l**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl describe pods -l'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=-l
    _fzf_complete_kubectl 'kubectl describe pods '
}

@test 'Testing completion: kubectl describe pods ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl describe pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl describe pods '
}

@test 'Testing completion: kubectl describe pods ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl describe pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl describe pods '
}

@test 'Testing completion: kubectl describe pods/** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl describe pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl describe '
}

@test 'Testing completion: kubectl describe pods/** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl describe pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl describe '
}

@test 'Testing completion: kubectl get **' {
    kubectl_mock_1() {
        assert $# equals 3
        assert $1 same_as 'api-resources'
        assert $2 same_as '--cached'
        assert $3 same_as '--verbs=get'

        echo 'NAME         SHORTNAMES   APIGROUP                    NAMESPACED   KIND'
        echo 'configmaps   cm                                       true         ConfigMap'
        echo 'namespaces   ns                                       false        Namespace'
        echo 'nodes        no                                       false        Node'
        echo 'pods         po                                       true         Pod'
        echo 'secrets                                               true         Secret'
        echo 'services     svc                                      true         Service'
        echo 'ingresses    ing          extensions                  true         Ingress'
        echo 'roles                     rbac.authorization.k8s.io   true         Role'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl get '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 9
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}SHORTNAMES   APIGROUP                    NAMESPACED   KIND"
        assert ${lines[2]} same_as "${fg[yellow]}configmaps   ${reset_color}cm                                       true         ConfigMap"
        assert ${lines[3]} same_as "${fg[yellow]}namespaces   ${reset_color}ns                                       false        Namespace"
        assert ${lines[4]} same_as "${fg[yellow]}nodes        ${reset_color}no                                       false        Node"
        assert ${lines[5]} same_as "${fg[yellow]}pods         ${reset_color}po                                       true         Pod"
        assert ${lines[6]} same_as "${fg[yellow]}secrets      ${reset_color}                                         true         Secret"
        assert ${lines[7]} same_as "${fg[yellow]}services     ${reset_color}svc                                      true         Service"
        assert ${lines[8]} same_as "${fg[yellow]}ingresses    ${reset_color}ing          extensions                  true         Ingress"
        assert ${lines[9]} same_as "${fg[yellow]}roles        ${reset_color}             rbac.authorization.k8s.io   true         Role"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl get '
}

@test 'Testing completion: kubectl get pods **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods/**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=pods/
    _fzf_complete_kubectl 'kubectl get '
}

@test 'Testing completion: kubectl get pods --selector=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods --selector='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=--selector=
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods --selector=** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--namespace=kube-system'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods --selector='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=--selector=
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods --selector=** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--namespace'
        assert $4 same_as ''
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods --selector='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    RBUFFER=' --namespace ""'
    prefix=--selector=
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods --selector=tier=control-plane --namespace=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'namespaces'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAME          STATUS   AGE'
        echo 'default       Active   1d'
        echo 'kube-system   Active   1d'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl get pods --selector=tier=control-plane --namespace='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME          ${reset_color}STATUS   AGE"
        assert ${lines[2]} same_as "${fg[yellow]}default       ${reset_color}Active   1d"
        assert ${lines[3]} same_as "${fg[yellow]}kube-system   ${reset_color}Active   1d"
    }

    prefix=--namespace=
    _fzf_complete_kubectl 'kubectl get pods --selector=tier=control-plane '
}

@test 'Testing completion: kubectl get pods --selector=tier=control-plane,**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods --selector=tier=control-plane,'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=--selector=tier=control-plane,
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods --selector=tier=control-plane,component**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods --selector=tier=control-plane,'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=--selector=tier=control-plane,component
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods --selector=tier=control-plane,\!**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods --selector=tier=control-plane,\!'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUES"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd, kube-apiserver, kube-controller-manager, kube-scheduler"
        assert ${lines[3]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix='--selector=tier=control-plane,\!'
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods --selector=tier=control-plane,\!component**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods --selector=tier=control-plane,\!'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUES"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd, kube-apiserver, kube-controller-manager, kube-scheduler"
        assert ${lines[3]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix='--selector=tier=control-plane,\!component'
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods --selector=tier=control-plane,component=**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane,component'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl get pods --selector=tier=control-plane,component='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
    }

    prefix=--selector=tier=control-plane,component=
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods --selector=tier=control-plane,component=etcd**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane,component'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl get pods --selector=tier=control-plane,component='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
    }

    prefix=--selector=tier=control-plane,component=etcd
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods --selector=tier=control-plane,component==**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane,component'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl get pods --selector=tier=control-plane,component=='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
    }

    prefix=--selector=tier=control-plane,component==
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods --selector=tier=control-plane,component==etcd**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane,component'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl get pods --selector=tier=control-plane,component=='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
    }

    prefix=--selector=tier=control-plane,component==etcd
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods --selector=tier=control-plane,component!=**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane,component'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl get pods --selector=tier=control-plane,component!='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
    }

    prefix=--selector=tier=control-plane,component!=
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods --selector=tier=control-plane,component!=etcd**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane,component'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl get pods --selector=tier=control-plane,component!='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
    }

    prefix=--selector=tier=control-plane,component!=etcd
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods --selector **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods --selector '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl get pods --selector '
}

@test 'Testing completion: kubectl get pods --selector ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--namespace=kube-system'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods --selector '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl get pods --selector '
}

@test 'Testing completion: kubectl get pods --selector ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--namespace'
        assert $4 same_as ''
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods --selector '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl get pods --selector '
}

@test 'Testing completion: kubectl get pods --selector tier=control-plane --namespace=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'namespaces'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAME          STATUS   AGE'
        echo 'default       Active   1d'
        echo 'kube-system   Active   1d'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl get pods --selector tier=control-plane --namespace='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME          ${reset_color}STATUS   AGE"
        assert ${lines[2]} same_as "${fg[yellow]}default       ${reset_color}Active   1d"
        assert ${lines[3]} same_as "${fg[yellow]}kube-system   ${reset_color}Active   1d"
    }

    prefix=--namespace=
    _fzf_complete_kubectl 'kubectl get pods --selector tier=control-plane '
}

@test 'Testing completion: kubectl get pods --selector tier=control-plane,**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods --selector tier=control-plane,'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=tier=control-plane,
    _fzf_complete_kubectl 'kubectl get pods --selector '
}

@test 'Testing completion: kubectl get pods --selector tier=control-plane,component**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods --selector tier=control-plane,'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=tier=control-plane,component
    _fzf_complete_kubectl 'kubectl get pods --selector '
}

@test 'Testing completion: kubectl get pods --selector tier=control-plane,\!**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods --selector tier=control-plane,\!'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUES"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd, kube-apiserver, kube-controller-manager, kube-scheduler"
        assert ${lines[3]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix='tier=control-plane,\!'
    _fzf_complete_kubectl 'kubectl get pods --selector '
}

@test 'Testing completion: kubectl get pods --selector tier=control-plane,\!component**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods --selector tier=control-plane,\!'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUES"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd, kube-apiserver, kube-controller-manager, kube-scheduler"
        assert ${lines[3]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix='tier=control-plane,\!component'
    _fzf_complete_kubectl 'kubectl get pods --selector '
}

@test 'Testing completion: kubectl get pods --selector tier=control-plane,component=**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane,component'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl get pods --selector tier=control-plane,component='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
    }

    prefix=tier=control-plane,component=
    _fzf_complete_kubectl 'kubectl get pods --selector '
}

@test 'Testing completion: kubectl get pods --selector tier=control-plane,component=etcd**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane,component'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl get pods --selector tier=control-plane,component='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
    }

    prefix=tier=control-plane,component=etcd
    _fzf_complete_kubectl 'kubectl get pods --selector '
}

@test 'Testing completion: kubectl get pods --selector tier=control-plane,component==**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane,component'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl get pods --selector tier=control-plane,component=='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
    }

    prefix=tier=control-plane,component==
    _fzf_complete_kubectl 'kubectl get pods --selector '
}

@test 'Testing completion: kubectl get pods --selector tier=control-plane,component==etcd**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane,component'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl get pods --selector tier=control-plane,component=='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
    }

    prefix=tier=control-plane,component==etcd
    _fzf_complete_kubectl 'kubectl get pods --selector '
}

@test 'Testing completion: kubectl get pods --selector tier=control-plane,component!=**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane,component'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl get pods --selector tier=control-plane,component!='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
    }

    prefix=tier=control-plane,component!=
    _fzf_complete_kubectl 'kubectl get pods --selector '
}

@test 'Testing completion: kubectl get pods --selector tier=control-plane,component!=etcd**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane,component'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl get pods --selector tier=control-plane,component!='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
    }

    prefix=tier=control-plane,component!=etcd
    _fzf_complete_kubectl 'kubectl get pods --selector '
}

@test 'Testing completion: kubectl get pods -l **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods -l '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl get pods -l '
}

@test 'Testing completion: kubectl get pods -l ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--namespace=kube-system'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods -l '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl get pods -l '
}

@test 'Testing completion: kubectl get pods -l ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--namespace'
        assert $4 same_as ''
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods -l '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl get pods -l '
}

@test 'Testing completion: kubectl get pods -l tier=control-plane --namespace=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'namespaces'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAME          STATUS   AGE'
        echo 'default       Active   1d'
        echo 'kube-system   Active   1d'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl get pods -l tier=control-plane --namespace='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME          ${reset_color}STATUS   AGE"
        assert ${lines[2]} same_as "${fg[yellow]}default       ${reset_color}Active   1d"
        assert ${lines[3]} same_as "${fg[yellow]}kube-system   ${reset_color}Active   1d"
    }

    prefix=--namespace=
    _fzf_complete_kubectl 'kubectl get pods -l tier=control-plane '
}

@test 'Testing completion: kubectl get pods -l tier=control-plane,**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods -l tier=control-plane,'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=tier=control-plane,
    _fzf_complete_kubectl 'kubectl get pods -l '
}

@test 'Testing completion: kubectl get pods -l tier=control-plane,component**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods -l tier=control-plane,'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=tier=control-plane,component
    _fzf_complete_kubectl 'kubectl get pods -l '
}

@test 'Testing completion: kubectl get pods -l tier=control-plane,\!**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods -l tier=control-plane,\!'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUES"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd, kube-apiserver, kube-controller-manager, kube-scheduler"
        assert ${lines[3]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix='tier=control-plane,\!'
    _fzf_complete_kubectl 'kubectl get pods -l '
}

@test 'Testing completion: kubectl get pods -l tier=control-plane,\!component**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods -l tier=control-plane,\!'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUES"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd, kube-apiserver, kube-controller-manager, kube-scheduler"
        assert ${lines[3]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix='tier=control-plane,\!component'
    _fzf_complete_kubectl 'kubectl get pods -l '
}

@test 'Testing completion: kubectl get pods -l tier=control-plane,component=**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane,component'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl get pods -l tier=control-plane,component='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
    }

    prefix=tier=control-plane,component=
    _fzf_complete_kubectl 'kubectl get pods -l '
}

@test 'Testing completion: kubectl get pods -l tier=control-plane,component=etcd**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane,component'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl get pods -l tier=control-plane,component='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
    }

    prefix=tier=control-plane,component=etcd
    _fzf_complete_kubectl 'kubectl get pods -l '
}

@test 'Testing completion: kubectl get pods -l tier=control-plane,component==**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane,component'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl get pods -l tier=control-plane,component=='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
    }

    prefix=tier=control-plane,component==
    _fzf_complete_kubectl 'kubectl get pods -l '
}

@test 'Testing completion: kubectl get pods -l tier=control-plane,component==etcd**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane,component'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl get pods -l tier=control-plane,component=='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
    }

    prefix=tier=control-plane,component==etcd
    _fzf_complete_kubectl 'kubectl get pods -l '
}

@test 'Testing completion: kubectl get pods -l tier=control-plane,component!=**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane,component'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl get pods -l tier=control-plane,component!='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
    }

    prefix=tier=control-plane,component!=
    _fzf_complete_kubectl 'kubectl get pods -l '
}

@test 'Testing completion: kubectl get pods -l tier=control-plane,component!=etcd**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane,component'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl get pods -l tier=control-plane,component!='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
    }

    prefix=tier=control-plane,component!=etcd
    _fzf_complete_kubectl 'kubectl get pods -l '
}

@test 'Testing completion: kubectl get pods -l**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods -l'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=-l
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods -l** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--namespace=kube-system'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods -l'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=-l
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods -l** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--namespace'
        assert $4 same_as ''
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods -l'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    RBUFFER=' --namespace ""'
    prefix=-l
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods -ltier=control-plane --namespace=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'namespaces'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAME          STATUS   AGE'
        echo 'default       Active   1d'
        echo 'kube-system   Active   1d'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl get pods -ltier=control-plane --namespace='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME          ${reset_color}STATUS   AGE"
        assert ${lines[2]} same_as "${fg[yellow]}default       ${reset_color}Active   1d"
        assert ${lines[3]} same_as "${fg[yellow]}kube-system   ${reset_color}Active   1d"
    }

    prefix=--namespace=
    _fzf_complete_kubectl 'kubectl get pods -ltier=control-plane '
}

@test 'Testing completion: kubectl get pods -ltier=control-plane,**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods -ltier=control-plane,'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=-ltier=control-plane,
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods -ltier=control-plane,component**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods -ltier=control-plane,'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=-ltier=control-plane,component
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods -ltier=control-plane,\!**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods -ltier=control-plane,\!'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUES"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd, kube-apiserver, kube-controller-manager, kube-scheduler"
        assert ${lines[3]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix='-ltier=control-plane,\!'
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods -ltier=control-plane,\!component**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods -ltier=control-plane,\!'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUES"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd, kube-apiserver, kube-controller-manager, kube-scheduler"
        assert ${lines[3]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix='-ltier=control-plane,\!component'
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods -ltier=control-plane,component=**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane,component'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl get pods -ltier=control-plane,component='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
    }

    prefix=-ltier=control-plane,component=
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods -ltier=control-plane,component=etcd**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane,component'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl get pods -ltier=control-plane,component='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
    }

    prefix=-ltier=control-plane,component=etcd
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods -ltier=control-plane,component==**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane,component'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl get pods -ltier=control-plane,component=='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
    }

    prefix=-ltier=control-plane,component==
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods -ltier=control-plane,component==etcd**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane,component'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl get pods -ltier=control-plane,component=='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
    }

    prefix=-ltier=control-plane,component==etcd
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods -ltier=control-plane,component!=**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane,component'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl get pods -ltier=control-plane,component!='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
    }

    prefix=-ltier=control-plane,component!=
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods -ltier=control-plane,component!=etcd**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--selector=tier=control-plane,component'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl get pods -ltier=control-plane,component!='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
    }

    prefix=-ltier=control-plane,component!=etcd
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods ** --label-columns=component,k8s-app' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--label-columns=component,k8s-app'
        assert $6 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES   COMPONENT                 K8S-APP'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>            etcd'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>            kube-apiserver'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>            kube-controller-manager'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>                                      kube-proxy'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>            kube-scheduler'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES   COMPONENT                 K8S-APP"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>            etcd"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>            kube-apiserver"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>            kube-controller-manager"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>                                      kube-proxy"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>            kube-scheduler"
    }

    RBUFFER=' --label-columns=component,k8s-app'
    prefix=
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods ** --label-columns=component --label-columns=k8s-app' {
    kubectl_mock_1() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--label-columns=component'
        assert $6 same_as '--label-columns=k8s-app'
        assert $7 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES   COMPONENT                 K8S-APP'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>            etcd'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>            kube-apiserver'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>            kube-controller-manager'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>                                      kube-proxy'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>            kube-scheduler'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES   COMPONENT                 K8S-APP"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>            etcd"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>            kube-apiserver"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>            kube-controller-manager"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>                                      kube-proxy"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>            kube-scheduler"
    }

    RBUFFER=' --label-columns=component --label-columns=k8s-app'
    prefix=
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods --label-columns=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods --label-columns='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUES"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd, kube-apiserver, kube-controller-manager, kube-scheduler"
        assert ${lines[3]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[4]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=--label-columns=
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods --label-columns=tier,**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--label-columns=tier'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods --label-columns=tier,'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUES"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd, kube-apiserver, kube-controller-manager, kube-scheduler"
        assert ${lines[3]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=--label-columns=tier,
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods --label-columns=tier,component**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--label-columns=tier'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods --label-columns=tier,'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUES"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd, kube-apiserver, kube-controller-manager, kube-scheduler"
        assert ${lines[3]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=--label-columns=tier,component
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods --label-columns **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods --label-columns '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUES"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd, kube-apiserver, kube-controller-manager, kube-scheduler"
        assert ${lines[3]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[4]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl get pods --label-columns '
}

@test 'Testing completion: kubectl get pods --label-columns tier,**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--label-columns=tier'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods --label-columns tier,'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUES"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd, kube-apiserver, kube-controller-manager, kube-scheduler"
        assert ${lines[3]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=tier,
    _fzf_complete_kubectl 'kubectl get pods --label-columns '
}

@test 'Testing completion: kubectl get pods --label-columns tier,component**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--label-columns=tier'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods --label-columns tier,'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUES"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd, kube-apiserver, kube-controller-manager, kube-scheduler"
        assert ${lines[3]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=tier,component
    _fzf_complete_kubectl 'kubectl get pods --label-columns '
}

@test 'Testing completion: kubectl get pods -L **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods -L '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUES"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd, kube-apiserver, kube-controller-manager, kube-scheduler"
        assert ${lines[3]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[4]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl get pods -L '
}

@test 'Testing completion: kubectl get pods -L tier,**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--label-columns=tier'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods -L tier,'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUES"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd, kube-apiserver, kube-controller-manager, kube-scheduler"
        assert ${lines[3]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=tier,
    _fzf_complete_kubectl 'kubectl get pods -L '
}

@test 'Testing completion: kubectl get pods -L tier,component**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--label-columns=tier'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods -L tier,'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUES"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd, kube-apiserver, kube-controller-manager, kube-scheduler"
        assert ${lines[3]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=tier,component
    _fzf_complete_kubectl 'kubectl get pods -L '
}

@test 'Testing completion: kubectl get pods -L**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods -L'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUES"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd, kube-apiserver, kube-controller-manager, kube-scheduler"
        assert ${lines[3]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[4]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=-L
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods -Ltier,**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--label-columns=tier'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods -Ltier,'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUES"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd, kube-apiserver, kube-controller-manager, kube-scheduler"
        assert ${lines[3]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=-Ltier,
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods -Ltier,component**' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '--label-columns=tier'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods -Ltier,'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUES"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd, kube-apiserver, kube-controller-manager, kube-scheduler"
        assert ${lines[3]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=-Ltier,component
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl get pods '
}

@test 'Testing completion: kubectl get pods/** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl get '
}

@test 'Testing completion: kubectl get pods/** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl get pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl get '
}

@test 'Testing completion: kubectl exec **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl exec '
}

@test 'Testing completion: kubectl exec pods/**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=pods/
    _fzf_complete_kubectl 'kubectl exec '
}

@test 'Testing completion: kubectl exec etcd-minikube --container=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec etcd-minikube --container='

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    prefix=--container=
    _fzf_complete_kubectl 'kubectl exec etcd-minikube '
}

@test 'Testing completion: kubectl exec pods/etcd-minikube --container=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec pods/etcd-minikube --container='

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    prefix=--container=
    _fzf_complete_kubectl 'kubectl exec pods/etcd-minikube '
}

@test 'Testing completion: kubectl exec etcd-minikube --container **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec etcd-minikube --container '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl exec etcd-minikube --container '
}

@test 'Testing completion: kubectl exec pods/etcd-minikube --container **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec pods/etcd-minikube --container '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl exec pods/etcd-minikube --container '
}

@test 'Testing completion: kubectl exec etcd-minikube -c **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec etcd-minikube -c '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl exec etcd-minikube -c '
}

@test 'Testing completion: kubectl exec pods/etcd-minikube -c **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec pods/etcd-minikube -c '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl exec pods/etcd-minikube -c '
}

@test 'Testing completion: kubectl exec etcd-minikube -c**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec etcd-minikube -c'

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    prefix=-c
    _fzf_complete_kubectl 'kubectl exec etcd-minikube '
}

@test 'Testing completion: kubectl exec pods/etcd-minikube -c**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec pods/etcd-minikube -c'

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    prefix=-c
    _fzf_complete_kubectl 'kubectl exec pods/etcd-minikube '
}

@test 'Testing completion: kubectl exec ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[3]} same_as "${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[4]} same_as "${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[5]} same_as "${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[6]} same_as "${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl exec '
}

@test 'Testing completion: kubectl exec ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[3]} same_as "${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[4]} same_as "${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[5]} same_as "${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[6]} same_as "${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl exec '
}

@test 'Testing completion: kubectl exec pods/** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[3]} same_as "${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[4]} same_as "${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[5]} same_as "${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[6]} same_as "${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl exec '
}

@test 'Testing completion: kubectl exec pods/** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[3]} same_as "${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[4]} same_as "${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[5]} same_as "${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[6]} same_as "${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl exec '
}

@test 'Testing completion: kubectl exec etcd-minikube --container=** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec etcd-minikube --container='

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=--container=
    _fzf_complete_kubectl 'kubectl exec etcd-minikube '
}

@test 'Testing completion: kubectl exec etcd-minikube --container=** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec etcd-minikube --container='

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace ""'
    prefix=--container=
    _fzf_complete_kubectl 'kubectl exec etcd-minikube '
}

@test 'Testing completion: kubectl exec pods/etcd-minikube --container=** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec pods/etcd-minikube --container='

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=--container=
    _fzf_complete_kubectl 'kubectl exec pods/etcd-minikube '
}

@test 'Testing completion: kubectl exec pods/etcd-minikube --container=** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec pods/etcd-minikube --container='

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace ""'
    prefix=--container=
    _fzf_complete_kubectl 'kubectl exec pods/etcd-minikube '
}

@test 'Testing completion: kubectl exec etcd-minikube --container ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec etcd-minikube --container '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl exec etcd-minikube --container '
}

@test 'Testing completion: kubectl exec etcd-minikube --container ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec etcd-minikube --container '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl exec etcd-minikube --container '
}

@test 'Testing completion: kubectl exec pods/etcd-minikube --container ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec pods/etcd-minikube --container '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl exec pods/etcd-minikube --container '
}

@test 'Testing completion: kubectl exec pods/etcd-minikube --container ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec pods/etcd-minikube --container '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl exec pods/etcd-minikube --container '
}

@test 'Testing completion: kubectl exec etcd-minikube -c ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec etcd-minikube -c '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl exec etcd-minikube -c '
}

@test 'Testing completion: kubectl exec etcd-minikube -c ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec etcd-minikube -c '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl exec etcd-minikube -c '
}

@test 'Testing completion: kubectl exec pods/etcd-minikube -c ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec pods/etcd-minikube -c '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl exec pods/etcd-minikube -c '
}

@test 'Testing completion: kubectl exec pods/etcd-minikube -c ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec pods/etcd-minikube -c '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl exec pods/etcd-minikube -c '
}

@test 'Testing completion: kubectl exec etcd-minikube -c** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec etcd-minikube -c'

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=-c
    _fzf_complete_kubectl 'kubectl exec etcd-minikube '
}

@test 'Testing completion: kubectl exec etcd-minikube -c** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec etcd-minikube -c'

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace ""'
    prefix=-c
    _fzf_complete_kubectl 'kubectl exec etcd-minikube '
}

@test 'Testing completion: kubectl exec pods/etcd-minikube -c** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec pods/etcd-minikube -c'

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=-c
    _fzf_complete_kubectl 'kubectl exec pods/etcd-minikube '
}

@test 'Testing completion: kubectl exec pods/etcd-minikube -c** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl exec pods/etcd-minikube -c'

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace ""'
    prefix=-c
    _fzf_complete_kubectl 'kubectl exec pods/etcd-minikube '
}

@test 'Testing completion: kubectl explain **' {
    kubectl_mock_1() {
        assert $# equals 3
        assert $1 same_as 'api-resources'
        assert $2 same_as '--cached'
        assert $3 same_as '--verbs=get'

        echo 'NAME         SHORTNAMES   APIGROUP                    NAMESPACED   KIND'
        echo 'configmaps   cm                                       true         ConfigMap'
        echo 'namespaces   ns                                       false        Namespace'
        echo 'nodes        no                                       false        Node'
        echo 'pods         po                                       true         Pod'
        echo 'secrets                                               true         Secret'
        echo 'services     svc                                      true         Service'
        echo 'ingresses    ing          extensions                  true         Ingress'
        echo 'roles                     rbac.authorization.k8s.io   true         Role'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl explain '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 9
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}SHORTNAMES   APIGROUP                    NAMESPACED   KIND"
        assert ${lines[2]} same_as "${fg[yellow]}configmaps   ${reset_color}cm                                       true         ConfigMap"
        assert ${lines[3]} same_as "${fg[yellow]}namespaces   ${reset_color}ns                                       false        Namespace"
        assert ${lines[4]} same_as "${fg[yellow]}nodes        ${reset_color}no                                       false        Node"
        assert ${lines[5]} same_as "${fg[yellow]}pods         ${reset_color}po                                       true         Pod"
        assert ${lines[6]} same_as "${fg[yellow]}secrets      ${reset_color}                                         true         Secret"
        assert ${lines[7]} same_as "${fg[yellow]}services     ${reset_color}svc                                      true         Service"
        assert ${lines[8]} same_as "${fg[yellow]}ingresses    ${reset_color}ing          extensions                  true         Ingress"
        assert ${lines[9]} same_as "${fg[yellow]}roles        ${reset_color}             rbac.authorization.k8s.io   true         Role"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl explain '
}

@test 'Testing completion: kubectl label **' {
    kubectl_mock_1() {
        assert $# equals 3
        assert $1 same_as 'api-resources'
        assert $2 same_as '--cached'
        assert $3 same_as '--verbs=get'

        echo 'NAME         SHORTNAMES   APIGROUP                    NAMESPACED   KIND'
        echo 'configmaps   cm                                       true         ConfigMap'
        echo 'namespaces   ns                                       false        Namespace'
        echo 'nodes        no                                       false        Node'
        echo 'pods         po                                       true         Pod'
        echo 'secrets                                               true         Secret'
        echo 'services     svc                                      true         Service'
        echo 'ingresses    ing          extensions                  true         Ingress'
        echo 'roles                     rbac.authorization.k8s.io   true         Role'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl label '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 9
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}SHORTNAMES   APIGROUP                    NAMESPACED   KIND"
        assert ${lines[2]} same_as "${fg[yellow]}configmaps   ${reset_color}cm                                       true         ConfigMap"
        assert ${lines[3]} same_as "${fg[yellow]}namespaces   ${reset_color}ns                                       false        Namespace"
        assert ${lines[4]} same_as "${fg[yellow]}nodes        ${reset_color}no                                       false        Node"
        assert ${lines[5]} same_as "${fg[yellow]}pods         ${reset_color}po                                       true         Pod"
        assert ${lines[6]} same_as "${fg[yellow]}secrets      ${reset_color}                                         true         Secret"
        assert ${lines[7]} same_as "${fg[yellow]}services     ${reset_color}svc                                      true         Service"
        assert ${lines[8]} same_as "${fg[yellow]}ingresses    ${reset_color}ing          extensions                  true         Ingress"
        assert ${lines[9]} same_as "${fg[yellow]}roles        ${reset_color}             rbac.authorization.k8s.io   true         Role"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl label '
}

@test 'Testing completion: kubectl label pods **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl label pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl label pods '
}

@test 'Testing completion: kubectl label pods/**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl label pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=pods/
    _fzf_complete_kubectl 'kubectl label '
}

@test 'Testing completion: kubectl label pods --selector=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl label pods --selector='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=--selector=
    _fzf_complete_kubectl 'kubectl label pods '
}

@test 'Testing completion: kubectl label pods --selector **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl label pods --selector '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl label pods --selector '
}

@test 'Testing completion: kubectl label pods -l **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl label pods -l '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl label pods -l '
}

@test 'Testing completion: kubectl label pods -l**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl label pods -l'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=-l
    _fzf_complete_kubectl 'kubectl label pods '
}

@test 'Testing completion: kubectl label pods etcd-minikube **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl label pods etcd-minikube '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl label pods etcd-minikube '
}

@test 'Testing completion: kubectl label pods/etcd-minikube **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.metadata.labels}'

        echo '{"component":"etcd","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl label pods/etcd-minikube '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl label pods/etcd-minikube '
}

@test 'Testing completion: kubectl label pods ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl label pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl label pods '
}

@test 'Testing completion: kubectl label pods ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl label pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl label pods '
}

@test 'Testing completion: kubectl label pods/** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl label pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl label '
}

@test 'Testing completion: kubectl label pods/** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl label pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl label '
}

@test 'Testing completion: kubectl label pods etcd-minikube ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl label pods etcd-minikube '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl label pods etcd-minikube '
}

@test 'Testing completion: kubectl label pods etcd-minikube ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={.metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl label pods etcd-minikube '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl label pods etcd-minikube '
}

@test 'Testing completion: kubectl label pods/etcd-minikube ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={.metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl label pods/etcd-minikube '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl label pods/etcd-minikube '
}

@test 'Testing completion: kubectl label pods/etcd-minikube ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={.metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl label pods/etcd-minikube '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl label pods/etcd-minikube '
}

@test 'Testing completion: kubectl logs **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl logs '
}

@test 'Testing completion: kubectl logs -f **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs -f '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl logs -f '
}

@test 'Testing completion: kubectl logs pods/**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=pods/
    _fzf_complete_kubectl 'kubectl logs '
}

@test 'Testing completion: kubectl logs pods --selector=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl logs pods --selector='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=--selector=
    _fzf_complete_kubectl 'kubectl logs pods '
}

@test 'Testing completion: kubectl logs pods --selector **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl logs pods --selector '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl logs pods --selector '
}

@test 'Testing completion: kubectl logs pods -l **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl logs pods -l '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl logs pods -l '
}

@test 'Testing completion: kubectl logs pods -l**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl logs pods -l'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=-l
    _fzf_complete_kubectl 'kubectl logs pods '
}

@test 'Testing completion: kubectl logs etcd-minikube --container=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs etcd-minikube --container='

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    prefix=--container=
    _fzf_complete_kubectl 'kubectl logs etcd-minikube '
}

@test 'Testing completion: kubectl logs pods/etcd-minikube --container=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs pods/etcd-minikube --container='

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    prefix=--container=
    _fzf_complete_kubectl 'kubectl logs pods/etcd-minikube '
}

@test 'Testing completion: kubectl logs etcd-minikube --container **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs etcd-minikube --container '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl logs etcd-minikube --container '
}

@test 'Testing completion: kubectl logs pods/etcd-minikube --container **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs pods/etcd-minikube --container '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl logs pods/etcd-minikube --container '
}

@test 'Testing completion: kubectl logs etcd-minikube -c **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs etcd-minikube -c '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl logs etcd-minikube -c '
}

@test 'Testing completion: kubectl logs pods/etcd-minikube -c **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs pods/etcd-minikube -c '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl logs pods/etcd-minikube -c '
}

@test 'Testing completion: kubectl logs etcd-minikube -c**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs etcd-minikube -c'

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    prefix=-c
    _fzf_complete_kubectl 'kubectl logs etcd-minikube '
}

@test 'Testing completion: kubectl logs pods/etcd-minikube -c**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs pods/etcd-minikube -c'

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    prefix=-c
    _fzf_complete_kubectl 'kubectl logs pods/etcd-minikube '
}

@test 'Testing completion: kubectl logs ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[3]} same_as "${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[4]} same_as "${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[5]} same_as "${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[6]} same_as "${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl logs '
}

@test 'Testing completion: kubectl logs ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[3]} same_as "${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[4]} same_as "${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[5]} same_as "${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[6]} same_as "${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl logs '
}

@test 'Testing completion: kubectl logs pods/** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[3]} same_as "${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[4]} same_as "${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[5]} same_as "${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[6]} same_as "${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl logs '
}

@test 'Testing completion: kubectl logs pods/** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[3]} same_as "${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[4]} same_as "${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[5]} same_as "${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[6]} same_as "${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl logs '
}

@test 'Testing completion: kubectl logs etcd-minikube --container=** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs etcd-minikube --container='

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=--container=
    _fzf_complete_kubectl 'kubectl logs etcd-minikube '
}

@test 'Testing completion: kubectl logs etcd-minikube --container=** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs etcd-minikube --container='

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace ""'
    prefix=--container=
    _fzf_complete_kubectl 'kubectl logs etcd-minikube '
}

@test 'Testing completion: kubectl logs pods/etcd-minikube --container=** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs pods/etcd-minikube --container='

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=--container=
    _fzf_complete_kubectl 'kubectl logs pods/etcd-minikube '
}

@test 'Testing completion: kubectl logs pods/etcd-minikube --container=** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs pods/etcd-minikube --container='

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace ""'
    prefix=--container=
    _fzf_complete_kubectl 'kubectl logs pods/etcd-minikube '
}

@test 'Testing completion: kubectl logs etcd-minikube --container ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs etcd-minikube --container '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl logs etcd-minikube --container '
}

@test 'Testing completion: kubectl logs etcd-minikube --container ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs etcd-minikube --container '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl logs etcd-minikube --container '
}

@test 'Testing completion: kubectl logs pods/etcd-minikube --container ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs pods/etcd-minikube --container '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl logs pods/etcd-minikube --container '
}

@test 'Testing completion: kubectl logs pods/etcd-minikube --container ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs pods/etcd-minikube --container '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl logs pods/etcd-minikube --container '
}

@test 'Testing completion: kubectl logs etcd-minikube -c ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs etcd-minikube -c '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl logs etcd-minikube -c '
}

@test 'Testing completion: kubectl logs etcd-minikube -c ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs etcd-minikube -c '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl logs etcd-minikube -c '
}

@test 'Testing completion: kubectl logs pods/etcd-minikube -c ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs pods/etcd-minikube -c '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl logs pods/etcd-minikube -c '
}

@test 'Testing completion: kubectl logs pods/etcd-minikube -c ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs pods/etcd-minikube -c '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl logs pods/etcd-minikube -c '
}

@test 'Testing completion: kubectl logs etcd-minikube -c** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs etcd-minikube -c'

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=-c
    _fzf_complete_kubectl 'kubectl logs etcd-minikube '
}

@test 'Testing completion: kubectl logs etcd-minikube -c** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs etcd-minikube -c'

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace ""'
    prefix=-c
    _fzf_complete_kubectl 'kubectl logs etcd-minikube '
}

@test 'Testing completion: kubectl logs pods/etcd-minikube -c** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs pods/etcd-minikube -c'

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=-c
    _fzf_complete_kubectl 'kubectl logs pods/etcd-minikube '
}

@test 'Testing completion: kubectl logs pods/etcd-minikube -c** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl logs pods/etcd-minikube -c'

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace ""'
    prefix=-c
    _fzf_complete_kubectl 'kubectl logs pods/etcd-minikube '
}

@test 'Testing completion: kubectl port-forward **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                      READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000     1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   coredns-000000000-00000   1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   coredns-000000000-00001   1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl port-forward '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                      ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000     ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}coredns-000000000-00000   ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}coredns-000000000-00001   ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl port-forward '
}

@test 'Testing completion: kubectl port-forward pods/**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                      READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000     1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   coredns-000000000-00000   1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   coredns-000000000-00001   1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl port-forward pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                      ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000     ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}coredns-000000000-00000   ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}coredns-000000000-00001   ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
    }

    prefix=pods/
    _fzf_complete_kubectl 'kubectl port-forward '
}

@test 'Testing completion: kubectl port-forward services/**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'services'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)                  AGE   SELECTOR'
        echo 'default       kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP                  1d    <none>'
        echo 'kube-system   kube-dns     ClusterIP   10.96.0.10   <none>        53/UDP,53/TCP,9153/TCP   1d    k8s-app=kube-dns'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl port-forward services/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME         ${reset_color}TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)                  AGE   SELECTOR"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}kubernetes   ${reset_color}ClusterIP   10.96.0.1    <none>        443/TCP                  1d    <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-dns     ${reset_color}ClusterIP   10.96.0.10   <none>        53/UDP,53/TCP,9153/TCP   1d    k8s-app=kube-dns"
    }

    prefix=services/
    _fzf_complete_kubectl 'kubectl port-forward '
}

@test 'Testing completion: kubectl port-forward coredns-000000000-00000 **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'coredns-000000000-00000'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath=PORT PROTOCOL NAME{"\\n"}{range ..ports[*]}{.targetPort} {.containerPort} {.protocol} {.name}{"\\n"}{end}'

        echo 'PORT PROTOCOL NAME'
        echo ' 53 UDP dns'
        echo ' 53 TCP dns-tcp'
        echo ' 9153 TCP metrics'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl port-forward coredns-000000000-00000 '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}PORT$reset_color  ${reset_color}PROTOCOL$reset_color  NAME"
        assert ${lines[2]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}UDP     $reset_color  dns"
        assert ${lines[3]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}TCP     $reset_color  dns-tcp"
        assert ${lines[4]} same_as "${fg[yellow]}9153$reset_color  ${reset_color}TCP     $reset_color  metrics"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl port-forward coredns-000000000-00000 '
}

@test 'Testing completion: kubectl port-forward pods/coredns-000000000-00000 **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'coredns-000000000-00000'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath=PORT PROTOCOL NAME{"\\n"}{range ..ports[*]}{.targetPort} {.containerPort} {.protocol} {.name}{"\\n"}{end}'

        echo 'PORT PROTOCOL NAME'
        echo ' 53 UDP dns'
        echo ' 53 TCP dns-tcp'
        echo ' 9153 TCP metrics'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl port-forward pods/coredns-000000000-00000 '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}PORT$reset_color  ${reset_color}PROTOCOL$reset_color  NAME"
        assert ${lines[2]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}UDP     $reset_color  dns"
        assert ${lines[3]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}TCP     $reset_color  dns-tcp"
        assert ${lines[4]} same_as "${fg[yellow]}9153$reset_color  ${reset_color}TCP     $reset_color  metrics"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl port-forward pods/coredns-000000000-00000 '
}

@test 'Testing completion: kubectl port-forward services/kube-dns **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'services'
        assert $3 same_as 'kube-dns'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath=PORT PROTOCOL NAME{"\\n"}{range ..ports[*]}{.targetPort} {.containerPort} {.protocol} {.name}{"\\n"}{end}'

        echo 'PORT PROTOCOL NAME'
        echo '53  UDP dns'
        echo '53  TCP dns-tcp'
        echo '9153  TCP metrics'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl port-forward services/kube-dns '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}PORT$reset_color  ${reset_color}PROTOCOL$reset_color  NAME"
        assert ${lines[2]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}UDP     $reset_color  dns"
        assert ${lines[3]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}TCP     $reset_color  dns-tcp"
        assert ${lines[4]} same_as "${fg[yellow]}9153$reset_color  ${reset_color}TCP     $reset_color  metrics"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl port-forward services/kube-dns '
}

@test 'Testing completion: kubectl port-forward coredns-000000000-00000 53:**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'coredns-000000000-00000'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath=PORT PROTOCOL NAME{"\\n"}{range ..ports[*]}{.targetPort} {.containerPort} {.protocol} {.name}{"\\n"}{end}'

        echo 'PORT PROTOCOL NAME'
        echo ' 53 UDP dns'
        echo ' 53 TCP dns-tcp'
        echo ' 9153 TCP metrics'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl port-forward coredns-000000000-00000 53:'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}PORT$reset_color  ${reset_color}PROTOCOL$reset_color  NAME"
        assert ${lines[2]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}UDP     $reset_color  dns"
        assert ${lines[3]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}TCP     $reset_color  dns-tcp"
        assert ${lines[4]} same_as "${fg[yellow]}9153$reset_color  ${reset_color}TCP     $reset_color  metrics"
    }

    prefix=53:
    _fzf_complete_kubectl 'kubectl port-forward coredns-000000000-00000 '
}

@test 'Testing completion: kubectl port-forward pods/coredns-000000000-00000 53:**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'coredns-000000000-00000'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath=PORT PROTOCOL NAME{"\\n"}{range ..ports[*]}{.targetPort} {.containerPort} {.protocol} {.name}{"\\n"}{end}'

        echo 'PORT PROTOCOL NAME'
        echo ' 53 UDP dns'
        echo ' 53 TCP dns-tcp'
        echo ' 9153 TCP metrics'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl port-forward pods/coredns-000000000-00000 53:'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}PORT$reset_color  ${reset_color}PROTOCOL$reset_color  NAME"
        assert ${lines[2]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}UDP     $reset_color  dns"
        assert ${lines[3]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}TCP     $reset_color  dns-tcp"
        assert ${lines[4]} same_as "${fg[yellow]}9153$reset_color  ${reset_color}TCP     $reset_color  metrics"
    }

    prefix=53:
    _fzf_complete_kubectl 'kubectl port-forward pods/coredns-000000000-00000 '
}

@test 'Testing completion: kubectl port-forward services/kube-dns 53:**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'services'
        assert $3 same_as 'kube-dns'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath=PORT PROTOCOL NAME{"\\n"}{range ..ports[*]}{.targetPort} {.containerPort} {.protocol} {.name}{"\\n"}{end}'

        echo 'PORT PROTOCOL NAME'
        echo '53  UDP dns'
        echo '53  TCP dns-tcp'
        echo '9153  TCP metrics'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl port-forward services/kube-dns 53:'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}PORT$reset_color  ${reset_color}PROTOCOL$reset_color  NAME"
        assert ${lines[2]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}UDP     $reset_color  dns"
        assert ${lines[3]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}TCP     $reset_color  dns-tcp"
        assert ${lines[4]} same_as "${fg[yellow]}9153$reset_color  ${reset_color}TCP     $reset_color  metrics"
    }

    prefix=53:
    _fzf_complete_kubectl 'kubectl port-forward services/kube-dns '
}

@test 'Testing completion: kubectl port-forward ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAME                      READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'coredns-000000000-00000   1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'coredns-000000000-00001   1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl port-forward '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME                      ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "${fg[yellow]}coredns-000000000-00000   ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[3]} same_as "${fg[yellow]}coredns-000000000-00001   ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl port-forward '
}

@test 'Testing completion: kubectl port-forward ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAME                      READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'coredns-000000000-00000   1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'coredns-000000000-00001   1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl port-forward '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME                      ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "${fg[yellow]}coredns-000000000-00000   ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[3]} same_as "${fg[yellow]}coredns-000000000-00001   ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl port-forward '
}

@test 'Testing completion: kubectl port-forward pods/** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAME                      READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'coredns-000000000-00000   1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'coredns-000000000-00001   1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl port-forward pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME                      ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "${fg[yellow]}coredns-000000000-00000   ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[3]} same_as "${fg[yellow]}coredns-000000000-00001   ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl port-forward '
}

@test 'Testing completion: kubectl port-forward pods/** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAME                      READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'coredns-000000000-00000   1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'coredns-000000000-00001   1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl port-forward pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME                      ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "${fg[yellow]}coredns-000000000-00000   ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[3]} same_as "${fg[yellow]}coredns-000000000-00001   ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl port-forward '
}

@test 'Testing completion: kubectl port-forward services/** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'services'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAME       TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)                  AGE   SELECTOR'
        echo 'kube-dns   ClusterIP   10.96.0.10   <none>        53/UDP,53/TCP,9153/TCP   1d    k8s-app=kube-dns'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl port-forward services/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "${fg[yellow]}NAME       ${reset_color}TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)                  AGE   SELECTOR"
        assert ${lines[2]} same_as "${fg[yellow]}kube-dns   ${reset_color}ClusterIP   10.96.0.10   <none>        53/UDP,53/TCP,9153/TCP   1d    k8s-app=kube-dns"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=services/
    _fzf_complete_kubectl 'kubectl port-forward '
}

@test 'Testing completion: kubectl port-forward services/** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'services'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAME       TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)                  AGE   SELECTOR'
        echo 'kube-dns   ClusterIP   10.96.0.10   <none>        53/UDP,53/TCP,9153/TCP   1d    k8s-app=kube-dns'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl port-forward services/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "${fg[yellow]}NAME       ${reset_color}TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)                  AGE   SELECTOR"
        assert ${lines[2]} same_as "${fg[yellow]}kube-dns   ${reset_color}ClusterIP   10.96.0.10   <none>        53/UDP,53/TCP,9153/TCP   1d    k8s-app=kube-dns"
    }

    RBUFFER=' --namespace ""'
    prefix=services/
    _fzf_complete_kubectl 'kubectl port-forward '
}

@test 'Testing completion: kubectl port-forward coredns-000000000-00000 ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'coredns-000000000-00000'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath=PORT PROTOCOL NAME{"\\n"}{range ..ports[*]}{.targetPort} {.containerPort} {.protocol} {.name}{"\\n"}{end}'

        echo 'PORT PROTOCOL NAME'
        echo ' 53 UDP dns'
        echo ' 53 TCP dns-tcp'
        echo ' 9153 TCP metrics'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl port-forward coredns-000000000-00000 '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}PORT$reset_color  ${reset_color}PROTOCOL$reset_color  NAME"
        assert ${lines[2]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}UDP     $reset_color  dns"
        assert ${lines[3]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}TCP     $reset_color  dns-tcp"
        assert ${lines[4]} same_as "${fg[yellow]}9153$reset_color  ${reset_color}TCP     $reset_color  metrics"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl port-forward coredns-000000000-00000 '
}

@test 'Testing completion: kubectl port-forward coredns-000000000-00000 ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'coredns-000000000-00000'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath=PORT PROTOCOL NAME{"\\n"}{range ..ports[*]}{.targetPort} {.containerPort} {.protocol} {.name}{"\\n"}{end}'

        echo 'PORT PROTOCOL NAME'
        echo ' 53 UDP dns'
        echo ' 53 TCP dns-tcp'
        echo ' 9153 TCP metrics'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl port-forward coredns-000000000-00000 '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}PORT$reset_color  ${reset_color}PROTOCOL$reset_color  NAME"
        assert ${lines[2]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}UDP     $reset_color  dns"
        assert ${lines[3]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}TCP     $reset_color  dns-tcp"
        assert ${lines[4]} same_as "${fg[yellow]}9153$reset_color  ${reset_color}TCP     $reset_color  metrics"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl port-forward coredns-000000000-00000 '
}

@test 'Testing completion: kubectl port-forward pods/coredns-000000000-00000 ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'coredns-000000000-00000'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath=PORT PROTOCOL NAME{"\\n"}{range ..ports[*]}{.targetPort} {.containerPort} {.protocol} {.name}{"\\n"}{end}'

        echo 'PORT PROTOCOL NAME'
        echo ' 53 UDP dns'
        echo ' 53 TCP dns-tcp'
        echo ' 9153 TCP metrics'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl port-forward pods/coredns-000000000-00000 '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}PORT$reset_color  ${reset_color}PROTOCOL$reset_color  NAME"
        assert ${lines[2]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}UDP     $reset_color  dns"
        assert ${lines[3]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}TCP     $reset_color  dns-tcp"
        assert ${lines[4]} same_as "${fg[yellow]}9153$reset_color  ${reset_color}TCP     $reset_color  metrics"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl port-forward pods/coredns-000000000-00000 '
}

@test 'Testing completion: kubectl port-forward pods/coredns-000000000-00000 ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'coredns-000000000-00000'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath=PORT PROTOCOL NAME{"\\n"}{range ..ports[*]}{.targetPort} {.containerPort} {.protocol} {.name}{"\\n"}{end}'

        echo 'PORT PROTOCOL NAME'
        echo ' 53 UDP dns'
        echo ' 53 TCP dns-tcp'
        echo ' 9153 TCP metrics'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl port-forward pods/coredns-000000000-00000 '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}PORT$reset_color  ${reset_color}PROTOCOL$reset_color  NAME"
        assert ${lines[2]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}UDP     $reset_color  dns"
        assert ${lines[3]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}TCP     $reset_color  dns-tcp"
        assert ${lines[4]} same_as "${fg[yellow]}9153$reset_color  ${reset_color}TCP     $reset_color  metrics"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl port-forward pods/coredns-000000000-00000 '
}

@test 'Testing completion: kubectl port-forward services/kube-dns ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'services'
        assert $3 same_as 'kube-dns'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath=PORT PROTOCOL NAME{"\\n"}{range ..ports[*]}{.targetPort} {.containerPort} {.protocol} {.name}{"\\n"}{end}'

        echo 'PORT PROTOCOL NAME'
        echo '53  UDP dns'
        echo '53  TCP dns-tcp'
        echo '9153  TCP metrics'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl port-forward services/kube-dns '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}PORT$reset_color  ${reset_color}PROTOCOL$reset_color  NAME"
        assert ${lines[2]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}UDP     $reset_color  dns"
        assert ${lines[3]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}TCP     $reset_color  dns-tcp"
        assert ${lines[4]} same_as "${fg[yellow]}9153$reset_color  ${reset_color}TCP     $reset_color  metrics"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl port-forward services/kube-dns '
}

@test 'Testing completion: kubectl port-forward services/kube-dns ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'services'
        assert $3 same_as 'kube-dns'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath=PORT PROTOCOL NAME{"\\n"}{range ..ports[*]}{.targetPort} {.containerPort} {.protocol} {.name}{"\\n"}{end}'

        echo 'PORT PROTOCOL NAME'
        echo '53  UDP dns'
        echo '53  TCP dns-tcp'
        echo '9153  TCP metrics'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl port-forward services/kube-dns '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}PORT$reset_color  ${reset_color}PROTOCOL$reset_color  NAME"
        assert ${lines[2]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}UDP     $reset_color  dns"
        assert ${lines[3]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}TCP     $reset_color  dns-tcp"
        assert ${lines[4]} same_as "${fg[yellow]}9153$reset_color  ${reset_color}TCP     $reset_color  metrics"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl port-forward services/kube-dns '
}

@test 'Testing completion: kubectl port-forward coredns-000000000-00000 53:** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'coredns-000000000-00000'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath=PORT PROTOCOL NAME{"\\n"}{range ..ports[*]}{.targetPort} {.containerPort} {.protocol} {.name}{"\\n"}{end}'

        echo 'PORT PROTOCOL NAME'
        echo ' 53 UDP dns'
        echo ' 53 TCP dns-tcp'
        echo ' 9153 TCP metrics'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl port-forward coredns-000000000-00000 53:'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}PORT$reset_color  ${reset_color}PROTOCOL$reset_color  NAME"
        assert ${lines[2]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}UDP     $reset_color  dns"
        assert ${lines[3]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}TCP     $reset_color  dns-tcp"
        assert ${lines[4]} same_as "${fg[yellow]}9153$reset_color  ${reset_color}TCP     $reset_color  metrics"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=53:
    _fzf_complete_kubectl 'kubectl port-forward coredns-000000000-00000 '
}

@test 'Testing completion: kubectl port-forward coredns-000000000-00000 53:** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'coredns-000000000-00000'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath=PORT PROTOCOL NAME{"\\n"}{range ..ports[*]}{.targetPort} {.containerPort} {.protocol} {.name}{"\\n"}{end}'

        echo 'PORT PROTOCOL NAME'
        echo ' 53 UDP dns'
        echo ' 53 TCP dns-tcp'
        echo ' 9153 TCP metrics'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl port-forward coredns-000000000-00000 53:'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}PORT$reset_color  ${reset_color}PROTOCOL$reset_color  NAME"
        assert ${lines[2]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}UDP     $reset_color  dns"
        assert ${lines[3]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}TCP     $reset_color  dns-tcp"
        assert ${lines[4]} same_as "${fg[yellow]}9153$reset_color  ${reset_color}TCP     $reset_color  metrics"
    }

    RBUFFER=' --namespace ""'
    prefix=53:
    _fzf_complete_kubectl 'kubectl port-forward coredns-000000000-00000 '
}

@test 'Testing completion: kubectl port-forward pods/coredns-000000000-00000 53:** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'coredns-000000000-00000'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath=PORT PROTOCOL NAME{"\\n"}{range ..ports[*]}{.targetPort} {.containerPort} {.protocol} {.name}{"\\n"}{end}'

        echo 'PORT PROTOCOL NAME'
        echo ' 53 UDP dns'
        echo ' 53 TCP dns-tcp'
        echo ' 9153 TCP metrics'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl port-forward pods/coredns-000000000-00000 53:'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}PORT$reset_color  ${reset_color}PROTOCOL$reset_color  NAME"
        assert ${lines[2]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}UDP     $reset_color  dns"
        assert ${lines[3]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}TCP     $reset_color  dns-tcp"
        assert ${lines[4]} same_as "${fg[yellow]}9153$reset_color  ${reset_color}TCP     $reset_color  metrics"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=53:
    _fzf_complete_kubectl 'kubectl port-forward pods/coredns-000000000-00000 '
}

@test 'Testing completion: kubectl port-forward pods/coredns-000000000-00000 53:** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'coredns-000000000-00000'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath=PORT PROTOCOL NAME{"\\n"}{range ..ports[*]}{.targetPort} {.containerPort} {.protocol} {.name}{"\\n"}{end}'

        echo 'PORT PROTOCOL NAME'
        echo ' 53 UDP dns'
        echo ' 53 TCP dns-tcp'
        echo ' 9153 TCP metrics'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl port-forward pods/coredns-000000000-00000 53:'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}PORT$reset_color  ${reset_color}PROTOCOL$reset_color  NAME"
        assert ${lines[2]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}UDP     $reset_color  dns"
        assert ${lines[3]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}TCP     $reset_color  dns-tcp"
        assert ${lines[4]} same_as "${fg[yellow]}9153$reset_color  ${reset_color}TCP     $reset_color  metrics"
    }

    RBUFFER=' --namespace ""'
    prefix=53:
    _fzf_complete_kubectl 'kubectl port-forward pods/coredns-000000000-00000 '
}

@test 'Testing completion: kubectl port-forward services/kube-dns 53:** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'services'
        assert $3 same_as 'kube-dns'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath=PORT PROTOCOL NAME{"\\n"}{range ..ports[*]}{.targetPort} {.containerPort} {.protocol} {.name}{"\\n"}{end}'

        echo 'PORT PROTOCOL NAME'
        echo '53  UDP dns'
        echo '53  TCP dns-tcp'
        echo '9153  TCP metrics'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl port-forward services/kube-dns 53:'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}PORT$reset_color  ${reset_color}PROTOCOL$reset_color  NAME"
        assert ${lines[2]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}UDP     $reset_color  dns"
        assert ${lines[3]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}TCP     $reset_color  dns-tcp"
        assert ${lines[4]} same_as "${fg[yellow]}9153$reset_color  ${reset_color}TCP     $reset_color  metrics"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=53:
    _fzf_complete_kubectl 'kubectl port-forward services/kube-dns '
}

@test 'Testing completion: kubectl port-forward services/kube-dns 53:** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'services'
        assert $3 same_as 'kube-dns'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath=PORT PROTOCOL NAME{"\\n"}{range ..ports[*]}{.targetPort} {.containerPort} {.protocol} {.name}{"\\n"}{end}'

        echo 'PORT PROTOCOL NAME'
        echo '53  UDP dns'
        echo '53  TCP dns-tcp'
        echo '9153  TCP metrics'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl port-forward services/kube-dns 53:'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}PORT$reset_color  ${reset_color}PROTOCOL$reset_color  NAME"
        assert ${lines[2]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}UDP     $reset_color  dns"
        assert ${lines[3]} same_as "${fg[yellow]}53  $reset_color  ${reset_color}TCP     $reset_color  dns-tcp"
        assert ${lines[4]} same_as "${fg[yellow]}9153$reset_color  ${reset_color}TCP     $reset_color  metrics"
    }

    RBUFFER=' --namespace ""'
    prefix=53:
    _fzf_complete_kubectl 'kubectl port-forward services/kube-dns '
}

@test 'Testing completion: kubectl rollout **' {
    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'kubectl rollout '

        run cat
        assert kubectl mock_times 0
        assert ${#lines} equals 6
        assert ${lines[1]} same_as history
        assert ${lines[2]} same_as pause
        assert ${lines[3]} same_as restart
        assert ${lines[4]} same_as resume
        assert ${lines[5]} same_as status
        assert ${lines[6]} same_as undo
    }

    prefix=
    _fzf_complete_kubectl 'kubectl rollout '
}

@test 'Testing completion: kubectl rollout restart **' {
    kubectl_mock_1() {
        assert $# equals 3
        assert $1 same_as 'api-resources'
        assert $2 same_as '--cached'
        assert $3 same_as '--verbs=get'

        echo 'NAME         SHORTNAMES   APIGROUP                    NAMESPACED   KIND'
        echo 'configmaps   cm                                       true         ConfigMap'
        echo 'namespaces   ns                                       false        Namespace'
        echo 'nodes        no                                       false        Node'
        echo 'pods         po                                       true         Pod'
        echo 'secrets                                               true         Secret'
        echo 'services     svc                                      true         Service'
        echo 'ingresses    ing          extensions                  true         Ingress'
        echo 'roles                     rbac.authorization.k8s.io   true         Role'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl rollout restart '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 9
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}SHORTNAMES   APIGROUP                    NAMESPACED   KIND"
        assert ${lines[2]} same_as "${fg[yellow]}configmaps   ${reset_color}cm                                       true         ConfigMap"
        assert ${lines[3]} same_as "${fg[yellow]}namespaces   ${reset_color}ns                                       false        Namespace"
        assert ${lines[4]} same_as "${fg[yellow]}nodes        ${reset_color}no                                       false        Node"
        assert ${lines[5]} same_as "${fg[yellow]}pods         ${reset_color}po                                       true         Pod"
        assert ${lines[6]} same_as "${fg[yellow]}secrets      ${reset_color}                                         true         Secret"
        assert ${lines[7]} same_as "${fg[yellow]}services     ${reset_color}svc                                      true         Service"
        assert ${lines[8]} same_as "${fg[yellow]}ingresses    ${reset_color}ing          extensions                  true         Ingress"
        assert ${lines[9]} same_as "${fg[yellow]}roles        ${reset_color}             rbac.authorization.k8s.io   true         Role"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl rollout restart '
}

@test 'Testing completion: kubectl rollout restart deployments **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'deployments'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl rollout restart deployments '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl rollout restart deployments '
}

@test 'Testing completion: kubectl rollout restart deployments/**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'deployments'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl rollout restart deployments/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=deployments/
    _fzf_complete_kubectl 'kubectl rollout restart '
}

@test 'Testing completion: kubectl rollout restart deployments ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'deployments'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl rollout restart deployments '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl rollout restart deployments '
}

@test 'Testing completion: kubectl rollout restart deployments ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'deployments'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl rollout restart deployments '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl rollout restart deployments '
}

@test 'Testing completion: kubectl rollout restart deployments/** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'deployments'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl rollout restart deployments/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=deployments/
    _fzf_complete_kubectl 'kubectl rollout restart '
}

@test 'Testing completion: kubectl rollout restart deployments/** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'deployments'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl rollout restart deployments/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=deployments/
    _fzf_complete_kubectl 'kubectl rollout restart '
}

@test 'Testing completion: kubectl set **' {
    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'kubectl set '

        run cat
        assert kubectl mock_times 0
        assert ${#lines} equals 6
        assert ${lines[1]} same_as env
        assert ${lines[2]} same_as image
        assert ${lines[3]} same_as resources
        assert ${lines[4]} same_as selector
        assert ${lines[5]} same_as serviceaccount
        assert ${lines[6]} same_as subject
    }

    prefix=
    _fzf_complete_kubectl 'kubectl set '
}

@test 'Testing completion: kubectl set env **' {
    kubectl_mock_1() {
        assert $# equals 3
        assert $1 same_as 'api-resources'
        assert $2 same_as '--cached'
        assert $3 same_as '--verbs=get'

        echo 'NAME         SHORTNAMES   APIGROUP                    NAMESPACED   KIND'
        echo 'configmaps   cm                                       true         ConfigMap'
        echo 'namespaces   ns                                       false        Namespace'
        echo 'nodes        no                                       false        Node'
        echo 'pods         po                                       true         Pod'
        echo 'secrets                                               true         Secret'
        echo 'services     svc                                      true         Service'
        echo 'ingresses    ing          extensions                  true         Ingress'
        echo 'roles                     rbac.authorization.k8s.io   true         Role'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl set env '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 9
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}SHORTNAMES   APIGROUP                    NAMESPACED   KIND"
        assert ${lines[2]} same_as "${fg[yellow]}configmaps   ${reset_color}cm                                       true         ConfigMap"
        assert ${lines[3]} same_as "${fg[yellow]}namespaces   ${reset_color}ns                                       false        Namespace"
        assert ${lines[4]} same_as "${fg[yellow]}nodes        ${reset_color}no                                       false        Node"
        assert ${lines[5]} same_as "${fg[yellow]}pods         ${reset_color}po                                       true         Pod"
        assert ${lines[6]} same_as "${fg[yellow]}secrets      ${reset_color}                                         true         Secret"
        assert ${lines[7]} same_as "${fg[yellow]}services     ${reset_color}svc                                      true         Service"
        assert ${lines[8]} same_as "${fg[yellow]}ingresses    ${reset_color}ing          extensions                  true         Ingress"
        assert ${lines[9]} same_as "${fg[yellow]}roles        ${reset_color}             rbac.authorization.k8s.io   true         Role"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl set env '
}

@test 'Testing completion: kubectl set env pods **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl set env pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl set env pods '
}

@test 'Testing completion: kubectl set env pods/**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl set env pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=pods/
    _fzf_complete_kubectl 'kubectl set env '
}

@test 'Testing completion: kubectl set env pods --selector=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl set env pods --selector='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=--selector=
    _fzf_complete_kubectl 'kubectl set env pods '
}

@test 'Testing completion: kubectl set env pods --selector **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl set env pods --selector '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl set env pods --selector '
}

@test 'Testing completion: kubectl set env pods -l **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl set env pods -l '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl set env pods -l '
}

@test 'Testing completion: kubectl set env pods -l**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl set env pods -l'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=-l
    _fzf_complete_kubectl 'kubectl set env pods '
}

@test 'Testing completion: kubectl set env pods ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl set env pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl set env pods '
}

@test 'Testing completion: kubectl set env pods ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl set env pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl set env pods '
}

@test 'Testing completion: kubectl set env pods/** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl set env pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl set env '
}

@test 'Testing completion: kubectl set env pods/** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl set env pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl set env '
}

@test 'Testing completion: kubectl set image **' {
    kubectl_mock_1() {
        assert $# equals 3
        assert $1 same_as 'api-resources'
        assert $2 same_as '--cached'
        assert $3 same_as '--verbs=get'

        echo 'NAME         SHORTNAMES   APIGROUP                    NAMESPACED   KIND'
        echo 'configmaps   cm                                       true         ConfigMap'
        echo 'namespaces   ns                                       false        Namespace'
        echo 'nodes        no                                       false        Node'
        echo 'pods         po                                       true         Pod'
        echo 'secrets                                               true         Secret'
        echo 'services     svc                                      true         Service'
        echo 'ingresses    ing          extensions                  true         Ingress'
        echo 'roles                     rbac.authorization.k8s.io   true         Role'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl set image '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 9
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}SHORTNAMES   APIGROUP                    NAMESPACED   KIND"
        assert ${lines[2]} same_as "${fg[yellow]}configmaps   ${reset_color}cm                                       true         ConfigMap"
        assert ${lines[3]} same_as "${fg[yellow]}namespaces   ${reset_color}ns                                       false        Namespace"
        assert ${lines[4]} same_as "${fg[yellow]}nodes        ${reset_color}no                                       false        Node"
        assert ${lines[5]} same_as "${fg[yellow]}pods         ${reset_color}po                                       true         Pod"
        assert ${lines[6]} same_as "${fg[yellow]}secrets      ${reset_color}                                         true         Secret"
        assert ${lines[7]} same_as "${fg[yellow]}services     ${reset_color}svc                                      true         Service"
        assert ${lines[8]} same_as "${fg[yellow]}ingresses    ${reset_color}ing          extensions                  true         Ingress"
        assert ${lines[9]} same_as "${fg[yellow]}roles        ${reset_color}             rbac.authorization.k8s.io   true         Role"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl set image '
}

@test 'Testing completion: kubectl set image pods **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl set image pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl set image pods '
}

@test 'Testing completion: kubectl set image pods/**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl set image pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=pods/
    _fzf_complete_kubectl 'kubectl set image '
}

@test 'Testing completion: kubectl set image pods --selector=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl set image pods --selector='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=--selector=
    _fzf_complete_kubectl 'kubectl set image pods '
}

@test 'Testing completion: kubectl set image pods --selector **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl set image pods --selector '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl set image pods --selector '
}

@test 'Testing completion: kubectl set image pods -l **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl set image pods -l '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl set image pods -l '
}

@test 'Testing completion: kubectl set image pods -l**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl set image pods -l'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=-l
    _fzf_complete_kubectl 'kubectl set image pods '
}

@test 'Testing completion: kubectl set image pods etcd-minikube **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl set image pods etcd-minikube '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl set image pods etcd-minikube '
}

@test 'Testing completion: kubectl set image pods/etcd-minikube **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl set image pods/etcd-minikube '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl set image pods/etcd-minikube '
}

@test 'Testing completion: kubectl set image pods ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl set image pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl set image pods '
}

@test 'Testing completion: kubectl set image pods ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl set image pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl set image pods '
}

@test 'Testing completion: kubectl set image pods/** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl set image pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl set image '
}

@test 'Testing completion: kubectl set image pods/** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl set image pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl set image '
}

@test 'Testing completion: kubectl set image pods etcd-minikube ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl set image pods etcd-minikube '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl set image pods etcd-minikube '
}

@test 'Testing completion: kubectl set image pods etcd-minikube ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl set image pods etcd-minikube '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl set image pods etcd-minikube '
}

@test 'Testing completion: kubectl set image pods/etcd-minikube ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace=kube-system'
        assert $5 same_as '-o'
        assert $6 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl set image pods/etcd-minikube '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl set image pods/etcd-minikube '
}

@test 'Testing completion: kubectl set image pods/etcd-minikube ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..initContainers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'initcontainer busybox:musl'
    }

    kubectl_mock_2() {
        assert $# equals 7
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as 'etcd-minikube'
        assert $4 same_as '--namespace'
        assert $5 same_as ''
        assert $6 same_as '-o'
        assert $7 same_as 'jsonpath={range ..containers[*]}{.name} {.image}{"\\n"}{end}'

        echo 'etcd k8s.gcr.io/etcd:3.4.13-0'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl set image pods/etcd-minikube '

        run cat
        assert kubectl mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}  IMAGE"
        assert ${lines[2]} same_as "${fg[yellow]}initcontainer${reset_color}  busybox:musl"
        assert ${lines[3]} same_as "${fg[yellow]}etcd         ${reset_color}  k8s.gcr.io/etcd:3.4.13-0"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl set image pods/etcd-minikube '
}


@test 'Testing completion: kubectl set resources **' {
    kubectl_mock_1() {
        assert $# equals 3
        assert $1 same_as 'api-resources'
        assert $2 same_as '--cached'
        assert $3 same_as '--verbs=get'

        echo 'NAME         SHORTNAMES   APIGROUP                    NAMESPACED   KIND'
        echo 'configmaps   cm                                       true         ConfigMap'
        echo 'namespaces   ns                                       false        Namespace'
        echo 'nodes        no                                       false        Node'
        echo 'pods         po                                       true         Pod'
        echo 'secrets                                               true         Secret'
        echo 'services     svc                                      true         Service'
        echo 'ingresses    ing          extensions                  true         Ingress'
        echo 'roles                     rbac.authorization.k8s.io   true         Role'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl set resources '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 9
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}SHORTNAMES   APIGROUP                    NAMESPACED   KIND"
        assert ${lines[2]} same_as "${fg[yellow]}configmaps   ${reset_color}cm                                       true         ConfigMap"
        assert ${lines[3]} same_as "${fg[yellow]}namespaces   ${reset_color}ns                                       false        Namespace"
        assert ${lines[4]} same_as "${fg[yellow]}nodes        ${reset_color}no                                       false        Node"
        assert ${lines[5]} same_as "${fg[yellow]}pods         ${reset_color}po                                       true         Pod"
        assert ${lines[6]} same_as "${fg[yellow]}secrets      ${reset_color}                                         true         Secret"
        assert ${lines[7]} same_as "${fg[yellow]}services     ${reset_color}svc                                      true         Service"
        assert ${lines[8]} same_as "${fg[yellow]}ingresses    ${reset_color}ing          extensions                  true         Ingress"
        assert ${lines[9]} same_as "${fg[yellow]}roles        ${reset_color}             rbac.authorization.k8s.io   true         Role"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl set resources '
}

@test 'Testing completion: kubectl set resources pods **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl set resources pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl set resources pods '
}

@test 'Testing completion: kubectl set resources pods/**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl set resources pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=pods/
    _fzf_complete_kubectl 'kubectl set resources '
}

@test 'Testing completion: kubectl set resources pods --selector=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl set resources pods --selector='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=--selector=
    _fzf_complete_kubectl 'kubectl set resources pods '
}

@test 'Testing completion: kubectl set resources pods --selector **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl set resources pods --selector '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl set resources pods --selector '
}

@test 'Testing completion: kubectl set resources pods -l **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl set resources pods -l '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl set resources pods -l '
}

@test 'Testing completion: kubectl set resources pods -l**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl set resources pods -l'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=-l
    _fzf_complete_kubectl 'kubectl set resources pods '
}

@test 'Testing completion: kubectl set resources pods ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl set resources pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl set resources pods '
}

@test 'Testing completion: kubectl set resources pods ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl set resources pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl set resources pods '
}

@test 'Testing completion: kubectl set resources pods/** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl set resources pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl set resources '
}

@test 'Testing completion: kubectl set resources pods/** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl set resources pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl set resources '
}

@test 'Testing completion: kubectl set subject **' {
    kubectl_mock_1() {
        assert $# equals 3
        assert $1 same_as 'api-resources'
        assert $2 same_as '--cached'
        assert $3 same_as '--verbs=get'

        echo 'NAME         SHORTNAMES   APIGROUP                    NAMESPACED   KIND'
        echo 'configmaps   cm                                       true         ConfigMap'
        echo 'namespaces   ns                                       false        Namespace'
        echo 'nodes        no                                       false        Node'
        echo 'pods         po                                       true         Pod'
        echo 'secrets                                               true         Secret'
        echo 'services     svc                                      true         Service'
        echo 'ingresses    ing          extensions                  true         Ingress'
        echo 'roles                     rbac.authorization.k8s.io   true         Role'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl set subject '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 9
        assert ${lines[1]} same_as "${fg[yellow]}NAME         ${reset_color}SHORTNAMES   APIGROUP                    NAMESPACED   KIND"
        assert ${lines[2]} same_as "${fg[yellow]}configmaps   ${reset_color}cm                                       true         ConfigMap"
        assert ${lines[3]} same_as "${fg[yellow]}namespaces   ${reset_color}ns                                       false        Namespace"
        assert ${lines[4]} same_as "${fg[yellow]}nodes        ${reset_color}no                                       false        Node"
        assert ${lines[5]} same_as "${fg[yellow]}pods         ${reset_color}po                                       true         Pod"
        assert ${lines[6]} same_as "${fg[yellow]}secrets      ${reset_color}                                         true         Secret"
        assert ${lines[7]} same_as "${fg[yellow]}services     ${reset_color}svc                                      true         Service"
        assert ${lines[8]} same_as "${fg[yellow]}ingresses    ${reset_color}ing          extensions                  true         Ingress"
        assert ${lines[9]} same_as "${fg[yellow]}roles        ${reset_color}             rbac.authorization.k8s.io   true         Role"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl set subject '
}

@test 'Testing completion: kubectl set subject pods **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl set subject pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl set subject pods '
}

@test 'Testing completion: kubectl set subject pods/**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl set subject pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=pods/
    _fzf_complete_kubectl 'kubectl set subject '
}

@test 'Testing completion: kubectl set subject pods --selector=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl set subject pods --selector='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=--selector=
    _fzf_complete_kubectl 'kubectl set subject pods '
}

@test 'Testing completion: kubectl set subject pods --selector **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl set subject pods --selector '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl set subject pods --selector '
}

@test 'Testing completion: kubectl set subject pods -l **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl set subject pods -l '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl set subject pods -l '
}

@test 'Testing completion: kubectl set subject pods -l**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl set subject pods -l'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=-l
    _fzf_complete_kubectl 'kubectl set subject pods '
}

@test 'Testing completion: kubectl set subject pods ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl set subject pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl set subject pods '
}

@test 'Testing completion: kubectl set subject pods ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl set subject pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl set subject pods '
}

@test 'Testing completion: kubectl set subject pods/** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl set subject pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl set subject '
}

@test 'Testing completion: kubectl set subject pods/** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl set subject pods/'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=pods/
    _fzf_complete_kubectl 'kubectl set subject '
}

@test 'Testing completion: kubectl taint **' {
    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'kubectl taint '

        run cat
        assert kubectl mock_times 0
        assert ${#lines} equals 1
        assert ${lines[1]} same_as nodes
    }

    prefix=
    _fzf_complete_kubectl 'kubectl taint '
}

@test 'Testing completion: kubectl taint --selector=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node01","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node02","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node03","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl taint --selector='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY                                  ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}kubernetes.io/arch                   ${reset_color}  amd64"
        assert ${lines[3]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node01"
        assert ${lines[4]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node02"
        assert ${lines[5]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node03"
        assert ${lines[6]} same_as "${fg[yellow]}kubernetes.io/os                     ${reset_color}  linux"
        assert ${lines[7]} same_as "${fg[yellow]}node-role.kubernetes.io/control-plane${reset_color}  "
    }

    prefix=--selector=
    _fzf_complete_kubectl 'kubectl taint '
}

@test 'Testing completion: kubectl taint --selector **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node01","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node02","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node03","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl taint --selector '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY                                  ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}kubernetes.io/arch                   ${reset_color}  amd64"
        assert ${lines[3]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node01"
        assert ${lines[4]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node02"
        assert ${lines[5]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node03"
        assert ${lines[6]} same_as "${fg[yellow]}kubernetes.io/os                     ${reset_color}  linux"
        assert ${lines[7]} same_as "${fg[yellow]}node-role.kubernetes.io/control-plane${reset_color}  "
    }

    prefix=
    _fzf_complete_kubectl 'kubectl taint --selector '
}

@test 'Testing completion: kubectl taint -l **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node01","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node02","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node03","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl taint -l '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY                                  ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}kubernetes.io/arch                   ${reset_color}  amd64"
        assert ${lines[3]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node01"
        assert ${lines[4]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node02"
        assert ${lines[5]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node03"
        assert ${lines[6]} same_as "${fg[yellow]}kubernetes.io/os                     ${reset_color}  linux"
        assert ${lines[7]} same_as "${fg[yellow]}node-role.kubernetes.io/control-plane${reset_color}  "
    }

    prefix=
    _fzf_complete_kubectl 'kubectl taint -l '
}

@test 'Testing completion: kubectl taint -l**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node01","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node02","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node03","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl taint -l'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY                                  ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}kubernetes.io/arch                   ${reset_color}  amd64"
        assert ${lines[3]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node01"
        assert ${lines[4]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node02"
        assert ${lines[5]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node03"
        assert ${lines[6]} same_as "${fg[yellow]}kubernetes.io/os                     ${reset_color}  linux"
        assert ${lines[7]} same_as "${fg[yellow]}node-role.kubernetes.io/control-plane${reset_color}  "
    }

    prefix=-l
    _fzf_complete_kubectl 'kubectl taint '
}

@test 'Testing completion: kubectl taint nodes **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAME       STATUS   ROLES    AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE     KERNEL-VERSION   CONTAINER-RUNTIME'
        echo 'minikube   Ready    master   20d   v1.19.2   192.0.2.1     <none>        Arch Linux   5.8.14-arch1-1   docker://19.3.13'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl taint nodes '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "${fg[yellow]}NAME       ${reset_color}STATUS   ROLES    AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE     KERNEL-VERSION   CONTAINER-RUNTIME"
        assert ${lines[2]} same_as "${fg[yellow]}minikube   ${reset_color}Ready    master   20d   v1.19.2   192.0.2.1     <none>        Arch Linux   5.8.14-arch1-1   docker://19.3.13"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl taint nodes '
}

@test 'Testing completion: kubectl taint nodes --selector=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node01","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node02","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node03","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl taint nodes --selector='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY                                  ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}kubernetes.io/arch                   ${reset_color}  amd64"
        assert ${lines[3]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node01"
        assert ${lines[4]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node02"
        assert ${lines[5]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node03"
        assert ${lines[6]} same_as "${fg[yellow]}kubernetes.io/os                     ${reset_color}  linux"
        assert ${lines[7]} same_as "${fg[yellow]}node-role.kubernetes.io/control-plane${reset_color}  "
    }

    prefix=--selector=
    _fzf_complete_kubectl 'kubectl taint nodes '
}

@test 'Testing completion: kubectl taint nodes --selector **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node01","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node02","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node03","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl taint nodes --selector '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY                                  ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}kubernetes.io/arch                   ${reset_color}  amd64"
        assert ${lines[3]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node01"
        assert ${lines[4]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node02"
        assert ${lines[5]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node03"
        assert ${lines[6]} same_as "${fg[yellow]}kubernetes.io/os                     ${reset_color}  linux"
        assert ${lines[7]} same_as "${fg[yellow]}node-role.kubernetes.io/control-plane${reset_color}  "
    }

    prefix=
    _fzf_complete_kubectl 'kubectl taint nodes --selector '
}

@test 'Testing completion: kubectl taint nodes -l **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node01","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node02","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node03","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl taint nodes -l '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY                                  ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}kubernetes.io/arch                   ${reset_color}  amd64"
        assert ${lines[3]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node01"
        assert ${lines[4]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node02"
        assert ${lines[5]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node03"
        assert ${lines[6]} same_as "${fg[yellow]}kubernetes.io/os                     ${reset_color}  linux"
        assert ${lines[7]} same_as "${fg[yellow]}node-role.kubernetes.io/control-plane${reset_color}  "
    }

    prefix=
    _fzf_complete_kubectl 'kubectl taint nodes -l '
}

@test 'Testing completion: kubectl taint nodes -l**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node01","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node02","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node03","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl taint nodes -l'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY                                  ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}kubernetes.io/arch                   ${reset_color}  amd64"
        assert ${lines[3]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node01"
        assert ${lines[4]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node02"
        assert ${lines[5]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node03"
        assert ${lines[6]} same_as "${fg[yellow]}kubernetes.io/os                     ${reset_color}  linux"
        assert ${lines[7]} same_as "${fg[yellow]}node-role.kubernetes.io/control-plane${reset_color}  "
    }

    prefix=-l
    _fzf_complete_kubectl 'kubectl taint nodes '
}

@test 'Testing completion: kubectl taint nodes minikube **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as 'minikube'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={range .spec.taints[*]}{.key} {.value} {.effect}{"\\n"}{end}'

        echo 'key1 value1 NoSchedule'
        echo 'key2 value2 NoExecute'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl taint nodes minikube '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}KEY ${reset_color}  ${reset_color}VALUE ${reset_color}  EFFECT"
        assert ${lines[2]} same_as "${fg[yellow]}key1${reset_color}  ${reset_color}value1${reset_color}  NoSchedule"
        assert ${lines[3]} same_as "${fg[yellow]}key2${reset_color}  ${reset_color}value2${reset_color}  NoExecute"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl taint nodes minikube '
}

@test 'Testing completion: kubectl top **' {
    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'kubectl top '

        run cat
        assert kubectl mock_times 0
        assert ${#lines} equals 2
        assert ${lines[1]} same_as nodes
        assert ${lines[2]} same_as pods
    }

    prefix=
    _fzf_complete_kubectl 'kubectl top '
}

@test 'Testing completion: kubectl top nodes **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAME       STATUS   ROLES    AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE     KERNEL-VERSION   CONTAINER-RUNTIME'
        echo 'minikube   Ready    master   20d   v1.19.2   192.0.2.1     <none>        Arch Linux   5.8.14-arch1-1   docker://19.3.13'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl top nodes '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "${fg[yellow]}NAME       ${reset_color}STATUS   ROLES    AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE     KERNEL-VERSION   CONTAINER-RUNTIME"
        assert ${lines[2]} same_as "${fg[yellow]}minikube   ${reset_color}Ready    master   20d   v1.19.2   192.0.2.1     <none>        Arch Linux   5.8.14-arch1-1   docker://19.3.13"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl top nodes '
}

@test 'Testing completion: kubectl top nodes --selector=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node01","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node02","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node03","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl top nodes --selector='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY                                  ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}kubernetes.io/arch                   ${reset_color}  amd64"
        assert ${lines[3]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node01"
        assert ${lines[4]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node02"
        assert ${lines[5]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node03"
        assert ${lines[6]} same_as "${fg[yellow]}kubernetes.io/os                     ${reset_color}  linux"
        assert ${lines[7]} same_as "${fg[yellow]}node-role.kubernetes.io/control-plane${reset_color}  "
    }

    prefix=--selector=
    _fzf_complete_kubectl 'kubectl top nodes '
}

@test 'Testing completion: kubectl top nodes --selector **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node01","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node02","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node03","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl top nodes --selector '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY                                  ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}kubernetes.io/arch                   ${reset_color}  amd64"
        assert ${lines[3]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node01"
        assert ${lines[4]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node02"
        assert ${lines[5]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node03"
        assert ${lines[6]} same_as "${fg[yellow]}kubernetes.io/os                     ${reset_color}  linux"
        assert ${lines[7]} same_as "${fg[yellow]}node-role.kubernetes.io/control-plane${reset_color}  "
    }

    prefix=
    _fzf_complete_kubectl 'kubectl top nodes --selector '
}

@test 'Testing completion: kubectl top nodes -l **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node01","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node02","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node03","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl top nodes -l '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY                                  ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}kubernetes.io/arch                   ${reset_color}  amd64"
        assert ${lines[3]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node01"
        assert ${lines[4]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node02"
        assert ${lines[5]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node03"
        assert ${lines[6]} same_as "${fg[yellow]}kubernetes.io/os                     ${reset_color}  linux"
        assert ${lines[7]} same_as "${fg[yellow]}node-role.kubernetes.io/control-plane${reset_color}  "
    }

    prefix=
    _fzf_complete_kubectl 'kubectl top nodes -l '
}

@test 'Testing completion: kubectl top nodes -l**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'nodes'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node01","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node02","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
        echo -n '{"kubernetes.io/arch":"amd64","kubernetes.io/hostname":"node03","kubernetes.io/os":"linux","node-role.kubernetes.io/control-plane":""}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl top nodes -l'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY                                  ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}kubernetes.io/arch                   ${reset_color}  amd64"
        assert ${lines[3]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node01"
        assert ${lines[4]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node02"
        assert ${lines[5]} same_as "${fg[yellow]}kubernetes.io/hostname               ${reset_color}  node03"
        assert ${lines[6]} same_as "${fg[yellow]}kubernetes.io/os                     ${reset_color}  linux"
        assert ${lines[7]} same_as "${fg[yellow]}node-role.kubernetes.io/control-plane${reset_color}  "
    }

    prefix=-l
    _fzf_complete_kubectl 'kubectl top nodes '
}

@test 'Testing completion: kubectl top pods **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--all-namespaces'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl top pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl top pods '
}

@test 'Testing completion: kubectl top pods --selector=**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl top pods --selector='

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=--selector=
    _fzf_complete_kubectl 'kubectl top pods '
}

@test 'Testing completion: kubectl top pods --selector **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl top pods --selector '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl top pods --selector '
}

@test 'Testing completion: kubectl top pods -l **' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl top pods -l '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=
    _fzf_complete_kubectl 'kubectl top pods -l '
}

@test 'Testing completion: kubectl top pods -l**' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '--all-namespaces'
        assert $4 same_as '-o'
        assert $5 same_as 'jsonpath={.items[*].metadata.labels}'

        echo -n '{"component":"etcd","tier":"control-plane"}'
        echo -n '{"component":"kube-apiserver","tier":"control-plane"}'
        echo -n '{"component":"kube-controller-manager","tier":"control-plane"}'
        echo -n '{"k8s-app":"kube-proxy"}'
        echo -n '{"component":"kube-scheduler","tier":"control-plane"}'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--multi'
        assert $5 same_as '--'
        assert $6 same_as 'kubectl top pods -l'

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "${fg[yellow]}KEY      ${reset_color}  VALUE"
        assert ${lines[2]} same_as "${fg[yellow]}component${reset_color}  etcd"
        assert ${lines[3]} same_as "${fg[yellow]}component${reset_color}  kube-apiserver"
        assert ${lines[4]} same_as "${fg[yellow]}component${reset_color}  kube-controller-manager"
        assert ${lines[5]} same_as "${fg[yellow]}component${reset_color}  kube-scheduler"
        assert ${lines[6]} same_as "${fg[yellow]}k8s-app  ${reset_color}  kube-proxy"
        assert ${lines[7]} same_as "${fg[yellow]}tier     ${reset_color}  control-plane"
    }

    prefix=-l
    _fzf_complete_kubectl 'kubectl top pods '
}

@test 'Testing completion: kubectl top pods ** --namespace=kube-system' {
    kubectl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace=kube-system'

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl top pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace=kube-system'
    prefix=
    _fzf_complete_kubectl 'kubectl top pods '
}

@test 'Testing completion: kubectl top pods ** --namespace ""' {
    kubectl_mock_1() {
        assert $# equals 6
        assert $1 same_as 'get'
        assert $2 same_as 'pods'
        assert $3 same_as '-o'
        assert $4 same_as 'wide'
        assert $5 same_as '--namespace'
        assert $6 same_as ''

        echo 'NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES'
        echo 'default       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        echo 'kube-system   etcd-minikube                      1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>'
        echo 'kube-system   kube-apiserver-minikube            1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>'
        echo 'kube-system   kube-controller-manager-minikube   1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>'
        echo 'kube-system   kube-proxy-00000                   1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>'
        echo 'kube-system   kube-scheduler-minikube            1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'kubectl top pods '

        run cat
        assert kubectl mock_times 1
        assert ${#lines} equals 7
        assert ${lines[1]} same_as "\x1c${fg[green]}NAMESPACE     $reset_color${fg[yellow]}NAME                               ${reset_color}READY   STATUS    RESTARTS   AGE   IP         NODE       NOMINATED NODE   READINESS GATES"
        assert ${lines[2]} same_as "\x1c${fg[green]}default       $reset_color${fg[yellow]}test-0000000000-00000              ${reset_color}1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        assert ${lines[3]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}etcd-minikube                      ${reset_color}1/1     Running   0          1d    10.0.0.2   minikube   <none>           <none>"
        assert ${lines[4]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-apiserver-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.3   minikube   <none>           <none>"
        assert ${lines[5]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-controller-manager-minikube   ${reset_color}1/1     Running   0          1d    10.0.0.4   minikube   <none>           <none>"
        assert ${lines[6]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-proxy-00000                   ${reset_color}1/1     Running   0          1d    10.0.0.5   minikube   <none>           <none>"
        assert ${lines[7]} same_as "\x1c${fg[green]}kube-system   $reset_color${fg[yellow]}kube-scheduler-minikube            ${reset_color}1/1     Running   0          1d    10.0.0.6   minikube   <none>           <none>"
    }

    RBUFFER=' --namespace ""'
    prefix=
    _fzf_complete_kubectl 'kubectl top pods '
}

@test 'Testing completion: kubectl "" top pods **' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    _fzf_path_completion() {
        assert $# equals 2
        assert $1 same_as ''
        assert $2 same_as 'kubectl "" top pods '
    }

    prefix=
    _fzf_complete_kubectl 'kubectl "" top pods '

    assert kubectl mock_times 0
}

@test 'Testing post: a resource type without API group' {
    input=(
        'podtemplates                v1           true         PodTemplate'
    )

    run _fzf_complete_kubectl-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'podtemplates'
}

@test 'Testing post: a resource type without API group (shortname)' {
    input=(
        'pods           po           v1           true         Pod'
    )

    run _fzf_complete_kubectl-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'pods'
}

@test 'Testing post: a resource type with API group' {
    input=(
        'jobs                        batch/v1     true         Job'
    )

    run _fzf_complete_kubectl-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'jobs.batch'
}

@test 'Testing post: a resource type with API group (shortname)' {
    input=(
        'deployments    deploy       apps/v1      true         Deployment'
    )

    run _fzf_complete_kubectl-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'deployments.apps'
}

@test 'Testing post: a resource name' {
    input=(
        'test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
    )

    run _fzf_complete_kubectl-resource-names_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'test-0000000000-00000'
}

@test 'Testing post: a prefixed resource name' {
    input=(
        'test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
    )

    prefix_option=pods/
    run _fzf_complete_kubectl-resource-names_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'test-0000000000-00000'
}

@test 'Testing post: resource names' {
    input=(
        'test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        'test-0000000000-00001              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        'test-0000000000-00002              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
    )

    run _fzf_complete_kubectl-resource-names_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 3
    assert ${lines[1]} same_as 'test-0000000000-00000'
    assert ${lines[2]} same_as 'test-0000000000-00001'
    assert ${lines[3]} same_as 'test-0000000000-00002'
}

@test 'Testing post: prefixed resource names' {
    input=(
        'test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        'test-0000000000-00001              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
        'test-0000000000-00002              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>'
    )

    prefix_option=pods/
    run _fzf_complete_kubectl-resource-names_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 3
    assert ${lines[1]} same_as 'test-0000000000-00000'
    assert ${lines[2]} same_as 'pods/test-0000000000-00001'
    assert ${lines[3]} same_as 'pods/test-0000000000-00002'
}

@test 'Testing post: a resource name (with namespace)' {
    input=(
        "\x1cdefault       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
    )

    run _fzf_complete_kubectl-resource-names_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 2
    assert ${lines[1]} same_as 'test-0000000000-00000'
    assert ${lines[2]} same_as '--namespace=default'
}

@test 'Testing post: a prefixed resource name (with namespace)' {
    input=(
        "\x1cdefault       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
    )

    prefix_option=pods/
    run _fzf_complete_kubectl-resource-names_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 2
    assert ${lines[1]} same_as 'test-0000000000-00000'
    assert ${lines[2]} same_as '--namespace=default'
}

@test 'Testing post: resource names (with namespace)' {
    input=(
        "\x1cdefault       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        "\x1cdefault       test-0000000000-00001              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        "\x1cdefault       test-0000000000-00002              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
    )

    run _fzf_complete_kubectl-resource-names_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 4
    assert ${lines[1]} same_as 'test-0000000000-00000'
    assert ${lines[2]} same_as 'test-0000000000-00001'
    assert ${lines[3]} same_as 'test-0000000000-00002'
    assert ${lines[4]} same_as '--namespace=default'
}

@test 'Testing post: prefixed resource names (with namespace)' {
    input=(
        "\x1cdefault       test-0000000000-00000              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        "\x1cdefault       test-0000000000-00001              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
        "\x1cdefault       test-0000000000-00002              1/1     Running   0          1d    10.0.0.1   minikube   <none>           <none>"
    )

    prefix_option=pods/
    run _fzf_complete_kubectl-resource-names_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 4
    assert ${lines[1]} same_as 'test-0000000000-00000'
    assert ${lines[2]} same_as 'pods/test-0000000000-00001'
    assert ${lines[3]} same_as 'pods/test-0000000000-00002'
    assert ${lines[4]} same_as '--namespace=default'
}

@test 'Testing post: a container name' {
    input=(
        'app  alpine:latest'
    )

    run _fzf_complete_kubectl-containers_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'app'
}

@test 'Testing post: a container name and image' {
    input=(
        'app  alpine:latest'
    )

    subcommands=(set image)
    run _fzf_complete_kubectl-containers_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'app=alpine:latest'
}

@test 'Testing post: a port number' {
    input=(
        '53    TCP       dns-tcp'
        '9153  TCP       metrics'
    )

    run _fzf_complete_kubectl-ports_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 2
    assert ${lines[1]} same_as '53'
    assert ${lines[2]} same_as '9153'
}

@test 'Testing post: an annotation name' {
    input=(
        'cni.projectcalico.org/podIP=10.0.0.1/32'
        $'note=line\nbreaks'
    )

    run _fzf_complete_kubectl-annotations_post <<< ${(pj:\0:)input}

    assert $state equals 0
    assert ${#lines} equals 2
    assert ${lines[1]} same_as "cni.projectcalico.org/podIP=10.0.0.1/32"
    assert ${lines[2]} same_as "note=\$'line\\nbreaks'"
}

@test 'Testing post: a label name' {
    input=(
        'component  etcd'
        'tier       control-plane'
    )

    run _fzf_complete_kubectl-labels_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 2
    assert ${lines[1]} same_as 'component=etcd'
    assert ${lines[2]} same_as 'tier=control-plane'
}

@test 'Testing post: a label selector' {
    input=(
        'component  etcd'
        'tier       control-plane'
    )

    prefix_option=--selector=
    run _fzf_complete_kubectl-selectors_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'component=etcd,tier=control-plane'
}

@test 'Testing post: a label selector (with !)' {
    input=(
        'component  etcd, kube-apiserver, kube-controller-manager, kube-scheduler'
        'tier       control-plane'
    )

    prefix_option=--selector=!
    run _fzf_complete_kubectl-selectors_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'component,\!tier'
}

@test 'Testing post: a label selector (with key)' {
    input=(
        'component  etcd'
    )

    prefix_option=--selector=component=
    selector=component
    run _fzf_complete_kubectl-selectors_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'etcd'
}

@test 'Testing post: a label column' {
    input=(
        'component  etcd, kube-apiserver, kube-controller-manager, kube-scheduler'
        'tier       control-plane'
    )

    run _fzf_complete_kubectl-label-columns_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'component,tier'
}

@test 'Testing post: a taint' {
    input=(
        'key1  value1  NoSchedule'
        'key2  value2  NoExecute'
    )

    run _fzf_complete_kubectl-taints_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 2
    assert ${lines[1]} same_as 'key1=value1:NoSchedule'
    assert ${lines[2]} same_as 'key2=value2:NoExecute'
}
