#!/usr/bin/env zunit

@setup {
    load ../fzf-zsh-completions.plugin.zsh
    load _helpers/mock.zsh
    load _helpers/assertions.zsh
    mock cf
    mock _fzf_complete_cf_unknown-subcommand
    mock __fzf_extract_command

    CF_HOME=tests/_support/cf
}

@teardown {
    (unmock cf)
    (unmock _fzf_complete_cf_app)
    (unmock _fzf_complete_cf_unknown-subcommand)
    (unmock __fzf_extract_command)
}

@test 'Testing overridden completion: cf app **' {
    mock _fzf_complete_cf_app

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf app '

        echo 'cf'
    }

    _fzf_complete_cf_app_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf app '
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_cf 'cf app '

    assert _fzf_complete_cf_app mock_times 1
}

@test 'Testing overridden completion: cf unknown-subcommand **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf unknown-subcommand '

        echo 'cf'
    }

    _fzf_complete_cf_unknown-subcommand_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf unknown-subcommand '
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_cf 'cf unknown-subcommand '

    assert _fzf_complete_cf_unknown-subcommand mock_times 1
}

@test 'Testing completion: cf **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf '

        echo 'cf'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    _fzf_path_completion() {
        assert $# equals 2
        assert $1 same_as ''
        assert $2 same_as 'cf '

        assert __fzf_extract_command mock_times 1
    }

    prefix=
    _fzf_complete_cf 'cf '
}

@test 'Testing completion: cf app **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf app '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf app '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf app '
}

@test 'Testing completion: TEST1=value1 TEST2=value2 cf app **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'TEST1=value1 TEST2=value2 cf app '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'TEST1=value1 TEST2=value2 cf app '

        assert $TEST1 same_as value1
        assert $TEST2 same_as value2

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'TEST1=value1 TEST2=value2 cf app '

    assert $TEST1 is_empty
    assert $TEST2 is_empty
}

@test 'Testing completion: cf d **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf d '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf d '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf d '
}

@test 'Testing completion: cf delete **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf delete '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf delete '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf delete '
}

@test 'Testing completion: cf disable-ssh **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf disable-ssh '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf disable-ssh '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf disable-ssh '
}

@test 'Testing completion: cf e **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf e '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf e '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf e '
}

@test 'Testing completion: cf enable-ssh **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf enable-ssh '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf enable-ssh '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf enable-ssh '
}

@test 'Testing completion: cf env **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf env '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf env '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf env '
}

@test 'Testing completion: cf events **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf events '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf events '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf events '
}

@test 'Testing completion: cf get-health-check **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf get-health-check '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf get-health-check '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf get-health-check '
}

@test 'Testing completion: cf logs **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf logs '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf logs '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf logs '
}

@test 'Testing completion: cf rename **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf rename '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf rename '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf rename '
}

@test 'Testing completion: cf restage **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf restage '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf restage '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf restage '
}

@test 'Testing completion: cf restart **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf restart '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf restart '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf restart '
}

@test 'Testing completion: cf rg **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf rg '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf rg '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf rg '
}

@test 'Testing completion: cf rs **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf rs '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf rs '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf rs '
}

@test 'Testing completion: cf sp **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf sp '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf sp '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf sp '
}

@test 'Testing completion: cf ssh-enabled **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf ssh-enabled '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf ssh-enabled '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf ssh-enabled '
}

@test 'Testing completion: cf st **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf st '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf st '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf st '
}

@test 'Testing completion: cf start **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf start '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf start '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf start '
}

@test 'Testing completion: cf stop **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf stop '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf stop '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf stop '
}

@test 'Testing completion: cf tasks **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf tasks '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf tasks '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf tasks '
}

@test 'Testing completion: cf v3-delete **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf v3-delete '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf v3-delete '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf v3-delete '
}

@test 'Testing completion: cf v3-droplets **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf v3-droplets '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf v3-droplets '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf v3-droplets '
}

@test 'Testing completion: cf v3-env **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf v3-env '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf v3-env '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf v3-env '
}

@test 'Testing completion: cf v3-get-health-check **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf v3-get-health-check '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf v3-get-health-check '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf v3-get-health-check '
}

@test 'Testing completion: cf v3-packages **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf v3-packages '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf v3-packages '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf v3-packages '
}

@test 'Testing completion: cf v3-restart **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf v3-restart '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf v3-restart '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf v3-restart '
}

@test 'Testing completion: cf v3-start **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf v3-start '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf v3-start '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf v3-start '
}

@test 'Testing completion: cf v3-stop **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf v3-stop '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf v3-stop '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf v3-stop '
}

@test 'Testing completion: cf add-network-policy **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf add-network-policy '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf add-network-policy '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf add-network-policy '
}

@test 'Testing completion: cf add-network-policy --destination-app=**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf add-network-policy '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf add-network-policy --destination-app='

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=--destination-app=
    _fzf_complete_cf 'cf add-network-policy '
}

@test 'Testing completion: cf add-network-policy --destination-app **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf add-network-policy --destination-app '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf add-network-policy --destination-app '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf add-network-policy --destination-app '
}

@test 'Testing completion: cf add-network-policy -o org-01 -s space-01 --destination-app=**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'org'
        assert $2 same_as '--guid'
        assert $3 same_as 'org-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/spaces?q=organization_guid:00000000-0000-0000-0000-000000000000&q=name:space-01'

        echo '{
           "total_results": 1,
           "total_pages": 1,
           "prev_url": null,
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-01",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/developers",
                    "managers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/managers",
                    "auditors_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/auditors",
                    "apps_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps",
                    "routes_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/routes",
                    "domains_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/domains",
                    "service_instances_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/service_instances",
                    "app_events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/app_events",
                    "events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/events",
                    "security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/security_groups",
                    "staging_security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/staging_security_groups"
                 }
              }
           ]
        }'
    }

    cf_mock_4() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": null,
           "next_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100&page=2",
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/apps/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "app-01",
                    "production": false,
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "stack_guid": "00000000-0000-0000-0000-000000000000",
                    "buildpack": null,
                    "detected_buildpack": null,
                    "environment_json": null,
                    "memory": 1024,
                    "instances": 3,
                    "disk_quota": 1024,
                    "state": "STARTED",
                    "version": "00000000-0000-0000-0000-000000000000",
                    "command": null,
                    "console": false,
                    "debug": null,
                    "staging_task_id": null,
                    "package_state": "PENDING",
                    "health_check_type": "port",
                    "health_check_timeout": null,
                    "staging_failed_reason": null,
                    "staging_failed_description": null,
                    "diego": false,
                    "docker_image": null,
                    "docker_credentials": {
                      "username": null,
                      "password": null
                    },
                    "package_updated_at": "2021-01-01T00:00:00Z",
                    "detected_start_command": "",
                    "enable_ssh": true,
                    "ports": null,
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "stack_url": "/v2/stacks/00000000-0000-0000-0000-000000000000",
                    "routes_url": "/v2/apps/00000000-0000-0000-0000-000000000000/routes",
                    "events_url": "/v2/apps/00000000-0000-0000-0000-000000000000/events",
                    "service_bindings_url": "/v2/apps/00000000-0000-0000-0000-000000000000/service_bindings",
                    "route_mappings_url": "/v2/apps/00000000-0000-0000-0000-000000000000/route_mappings"
                 }
              },
              {
                 "metadata": {
                    "guid": "11111111-1111-1111-1111-111111111111",
                    "url": "/v2/apps/11111111-1111-1111-1111-111111111111",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "app-02",
                    "production": false,
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "stack_guid": "00000000-0000-0000-0000-000000000000",
                    "buildpack": null,
                    "detected_buildpack": null,
                    "environment_json": null,
                    "memory": 512,
                    "instances": 2,
                    "disk_quota": 1024,
                    "state": "STARTED",
                    "version": "00000000-0000-0000-0000-000000000000",
                    "command": null,
                    "console": false,
                    "debug": null,
                    "staging_task_id": null,
                    "package_state": "PENDING",
                    "health_check_type": "port",
                    "health_check_timeout": null,
                    "staging_failed_reason": null,
                    "staging_failed_description": null,
                    "diego": false,
                    "docker_image": null,
                    "docker_credentials": {
                      "username": null,
                      "password": null
                    },
                    "package_updated_at": "2021-01-01T00:00:00Z",
                    "detected_start_command": "",
                    "enable_ssh": true,
                    "ports": null,
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "stack_url": "/v2/stacks/00000000-0000-0000-0000-000000000000",
                    "routes_url": "/v2/apps/11111111-1111-1111-1111-111111111111/routes",
                    "events_url": "/v2/apps/11111111-1111-1111-1111-111111111111/events",
                    "service_bindings_url": "/v2/apps/11111111-1111-1111-1111-111111111111/service_bindings",
                    "route_mappings_url": "/v2/apps/11111111-1111-1111-1111-111111111111/route_mappings"
                 }
              }
           ]
        }'
    }

    cf_mock_5() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100&page=2'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100&page=1",
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "22222222-2222-2222-2222-222222222222",
                    "url": "/v2/apps/22222222-2222-2222-2222-222222222222",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "app-03",
                    "production": false,
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "stack_guid": "00000000-0000-0000-0000-000000000000",
                    "buildpack": null,
                    "detected_buildpack": null,
                    "environment_json": null,
                    "memory": 256,
                    "instances": 1,
                    "disk_quota": 1024,
                    "state": "STOPPED",
                    "version": "00000000-0000-0000-0000-000000000000",
                    "command": null,
                    "console": false,
                    "debug": null,
                    "staging_task_id": null,
                    "package_state": "PENDING",
                    "health_check_type": "port",
                    "health_check_timeout": null,
                    "staging_failed_reason": null,
                    "staging_failed_description": null,
                    "diego": false,
                    "docker_image": null,
                    "docker_credentials": {
                      "username": null,
                      "password": null
                    },
                    "package_updated_at": "2021-01-01T00:00:00Z",
                    "detected_start_command": "",
                    "enable_ssh": true,
                    "ports": null,
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "stack_url": "/v2/stacks/00000000-0000-0000-0000-000000000000",
                    "routes_url": "/v2/apps/22222222-2222-2222-2222-222222222222/routes",
                    "events_url": "/v2/apps/22222222-2222-2222-2222-222222222222/events",
                    "service_bindings_url": "/v2/apps/22222222-2222-2222-2222-222222222222/service_bindings",
                    "route_mappings_url": "/v2/apps/22222222-2222-2222-2222-222222222222/route_mappings"
                 }
              }
           ]
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf add-network-policy -o org-01 -s space-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf add-network-policy -o org-01 -s space-01 --destination-app='

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 5
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name  ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}app-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}app-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}app-03${reset_color}"
    }

    prefix=--destination-app=
    _fzf_complete_cf 'cf add-network-policy -o org-01 -s space-01 '
}

@test 'Testing completion: cf add-network-policy -s space-01 --destination-app=**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'space'
        assert $2 same_as '--guid'
        assert $3 same_as 'space-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": null,
           "next_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100&page=2",
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/apps/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "app-01",
                    "production": false,
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "stack_guid": "00000000-0000-0000-0000-000000000000",
                    "buildpack": null,
                    "detected_buildpack": null,
                    "environment_json": null,
                    "memory": 1024,
                    "instances": 3,
                    "disk_quota": 1024,
                    "state": "STARTED",
                    "version": "00000000-0000-0000-0000-000000000000",
                    "command": null,
                    "console": false,
                    "debug": null,
                    "staging_task_id": null,
                    "package_state": "PENDING",
                    "health_check_type": "port",
                    "health_check_timeout": null,
                    "staging_failed_reason": null,
                    "staging_failed_description": null,
                    "diego": false,
                    "docker_image": null,
                    "docker_credentials": {
                      "username": null,
                      "password": null
                    },
                    "package_updated_at": "2021-01-01T00:00:00Z",
                    "detected_start_command": "",
                    "enable_ssh": true,
                    "ports": null,
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "stack_url": "/v2/stacks/00000000-0000-0000-0000-000000000000",
                    "routes_url": "/v2/apps/00000000-0000-0000-0000-000000000000/routes",
                    "events_url": "/v2/apps/00000000-0000-0000-0000-000000000000/events",
                    "service_bindings_url": "/v2/apps/00000000-0000-0000-0000-000000000000/service_bindings",
                    "route_mappings_url": "/v2/apps/00000000-0000-0000-0000-000000000000/route_mappings"
                 }
              },
              {
                 "metadata": {
                    "guid": "11111111-1111-1111-1111-111111111111",
                    "url": "/v2/apps/11111111-1111-1111-1111-111111111111",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "app-02",
                    "production": false,
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "stack_guid": "00000000-0000-0000-0000-000000000000",
                    "buildpack": null,
                    "detected_buildpack": null,
                    "environment_json": null,
                    "memory": 512,
                    "instances": 2,
                    "disk_quota": 1024,
                    "state": "STARTED",
                    "version": "00000000-0000-0000-0000-000000000000",
                    "command": null,
                    "console": false,
                    "debug": null,
                    "staging_task_id": null,
                    "package_state": "PENDING",
                    "health_check_type": "port",
                    "health_check_timeout": null,
                    "staging_failed_reason": null,
                    "staging_failed_description": null,
                    "diego": false,
                    "docker_image": null,
                    "docker_credentials": {
                      "username": null,
                      "password": null
                    },
                    "package_updated_at": "2021-01-01T00:00:00Z",
                    "detected_start_command": "",
                    "enable_ssh": true,
                    "ports": null,
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "stack_url": "/v2/stacks/00000000-0000-0000-0000-000000000000",
                    "routes_url": "/v2/apps/11111111-1111-1111-1111-111111111111/routes",
                    "events_url": "/v2/apps/11111111-1111-1111-1111-111111111111/events",
                    "service_bindings_url": "/v2/apps/11111111-1111-1111-1111-111111111111/service_bindings",
                    "route_mappings_url": "/v2/apps/11111111-1111-1111-1111-111111111111/route_mappings"
                 }
              }
           ]
        }'
    }

    cf_mock_4() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100&page=2'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100&page=1",
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "22222222-2222-2222-2222-222222222222",
                    "url": "/v2/apps/22222222-2222-2222-2222-222222222222",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "app-03",
                    "production": false,
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "stack_guid": "00000000-0000-0000-0000-000000000000",
                    "buildpack": null,
                    "detected_buildpack": null,
                    "environment_json": null,
                    "memory": 256,
                    "instances": 1,
                    "disk_quota": 1024,
                    "state": "STOPPED",
                    "version": "00000000-0000-0000-0000-000000000000",
                    "command": null,
                    "console": false,
                    "debug": null,
                    "staging_task_id": null,
                    "package_state": "PENDING",
                    "health_check_type": "port",
                    "health_check_timeout": null,
                    "staging_failed_reason": null,
                    "staging_failed_description": null,
                    "diego": false,
                    "docker_image": null,
                    "docker_credentials": {
                      "username": null,
                      "password": null
                    },
                    "package_updated_at": "2021-01-01T00:00:00Z",
                    "detected_start_command": "",
                    "enable_ssh": true,
                    "ports": null,
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "stack_url": "/v2/stacks/00000000-0000-0000-0000-000000000000",
                    "routes_url": "/v2/apps/22222222-2222-2222-2222-222222222222/routes",
                    "events_url": "/v2/apps/22222222-2222-2222-2222-222222222222/events",
                    "service_bindings_url": "/v2/apps/22222222-2222-2222-2222-222222222222/service_bindings",
                    "route_mappings_url": "/v2/apps/22222222-2222-2222-2222-222222222222/route_mappings"
                 }
              }
           ]
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf add-network-policy -s space-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf add-network-policy -s space-01 --destination-app='

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 4
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name  ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}app-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}app-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}app-03${reset_color}"
    }

    prefix=--destination-app=
    _fzf_complete_cf 'cf add-network-policy -s space-01 '
}

@test 'Testing completion: cf add-network-policy -o **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf add-network-policy -o '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf add-network-policy -o '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf add-network-policy -o '
}

@test 'Testing completion: cf add-network-policy -o org-01 -s **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'org'
        assert $2 same_as '--guid'
        assert $3 same_as 'org-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": null,
           "next_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2",
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-01",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/developers",
                    "managers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/managers",
                    "auditors_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/auditors",
                    "apps_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps",
                    "routes_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/routes",
                    "domains_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/domains",
                    "service_instances_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/service_instances",
                    "app_events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/app_events",
                    "events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/events",
                    "security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/security_groups",
                    "staging_security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/staging_security_groups"
                 }
              },
              {
                 "metadata": {
                    "guid": "11111111-1111-1111-1111-111111111111",
                    "url": "/v2/spaces/11111111-1111-1111-1111-111111111111",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-02",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/developers",
                    "managers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/managers",
                    "auditors_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/auditors",
                    "apps_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/apps",
                    "routes_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/routes",
                    "domains_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/domains",
                    "service_instances_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/service_instances",
                    "app_events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/app_events",
                    "events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/events",
                    "security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/security_groups",
                    "staging_security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/staging_security_groups"
                 }
              }
           ]
        }'
    }

    cf_mock_4() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=1",
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "22222222-2222-2222-2222-222222222222",
                    "url": "/v2/spaces/22222222-2222-2222-2222-222222222222",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-03",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/developers",
                    "managers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/managers",
                    "auditors_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/auditors",
                    "apps_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/apps",
                    "routes_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/routes",
                    "domains_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/domains",
                    "service_instances_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/service_instances",
                    "app_events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/app_events",
                    "events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/events",
                    "security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/security_groups",
                    "staging_security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/staging_security_groups"
                 }
              }
           ]
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf add-network-policy -o org-01 -s '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf add-network-policy -o org-01 -s '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 4
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name    ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf add-network-policy -o org-01 -s '
}

@test 'Testing completion: cf add-network-policy -s **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'spaces'

        echo 'Getting spaces in org org-01 as user-01...'
        echo ''
        echo 'name'
        echo 'space-01'
        echo 'space-02'
        echo 'space-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf add-network-policy -s '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf add-network-policy -s '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf add-network-policy -s '
}

@test 'Testing completion: cf add-network-policy -o**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf add-network-policy '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf add-network-policy -o'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=-o
    _fzf_complete_cf 'cf add-network-policy '
}

@test 'Testing completion: cf add-network-policy -oorg-01 -s**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'org'
        assert $2 same_as '--guid'
        assert $3 same_as 'org-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": null,
           "next_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2",
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-01",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/developers",
                    "managers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/managers",
                    "auditors_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/auditors",
                    "apps_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps",
                    "routes_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/routes",
                    "domains_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/domains",
                    "service_instances_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/service_instances",
                    "app_events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/app_events",
                    "events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/events",
                    "security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/security_groups",
                    "staging_security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/staging_security_groups"
                 }
              },
              {
                 "metadata": {
                    "guid": "11111111-1111-1111-1111-111111111111",
                    "url": "/v2/spaces/11111111-1111-1111-1111-111111111111",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-02",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/developers",
                    "managers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/managers",
                    "auditors_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/auditors",
                    "apps_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/apps",
                    "routes_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/routes",
                    "domains_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/domains",
                    "service_instances_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/service_instances",
                    "app_events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/app_events",
                    "events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/events",
                    "security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/security_groups",
                    "staging_security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/staging_security_groups"
                 }
              }
           ]
        }'
    }

    cf_mock_4() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=1",
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "22222222-2222-2222-2222-222222222222",
                    "url": "/v2/spaces/22222222-2222-2222-2222-222222222222",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-03",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/developers",
                    "managers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/managers",
                    "auditors_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/auditors",
                    "apps_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/apps",
                    "routes_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/routes",
                    "domains_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/domains",
                    "service_instances_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/service_instances",
                    "app_events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/app_events",
                    "events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/events",
                    "security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/security_groups",
                    "staging_security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/staging_security_groups"
                 }
              }
           ]
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf add-network-policy -oorg-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf add-network-policy -oorg-01 -s'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 4
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name    ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=-s
    _fzf_complete_cf 'cf add-network-policy -oorg-01 '
}

@test 'Testing completion: cf add-network-policy -s**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'spaces'

        echo 'Getting spaces in org org-01 as user-01...'
        echo ''
        echo 'name'
        echo 'space-01'
        echo 'space-02'
        echo 'space-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf add-network-policy '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf add-network-policy -s'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=-s
    _fzf_complete_cf 'cf add-network-policy '
}

@test 'Testing completion: cf remove-network-policy **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'network-policies'

        echo 'Listing network policies in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'source   destination   protocol   ports       destination space   destination org'
        echo 'app-01   app-02        tcp        8080        space-01            org-01'
        echo 'app-03   app-04        tcp        8090-8100   space-01            org-01'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf remove-network-policy '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf remove-network-policy '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}source   ${reset_color}destination   protocol   ports       destination space   destination org"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}app-02        tcp        8080        space-01            org-01"
        assert ${lines[3]} same_as "${fg[yellow]}app-03   ${reset_color}app-04        tcp        8090-8100   space-01            org-01"
    }

    prefix=
    _fzf_complete_cf 'cf remove-network-policy '
}

@test 'Testing completion: cf remove-network-policy --destination-app=**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf remove-network-policy '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf remove-network-policy --destination-app='

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=--destination-app=
    _fzf_complete_cf 'cf remove-network-policy '
}

@test 'Testing completion: cf remove-network-policy --destination-app **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf remove-network-policy --destination-app '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf remove-network-policy --destination-app '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf remove-network-policy --destination-app '
}

@test 'Testing completion: cf remove-network-policy -o org-01 -s space-01 --destination-app=**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'org'
        assert $2 same_as '--guid'
        assert $3 same_as 'org-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/spaces?q=organization_guid:00000000-0000-0000-0000-000000000000&q=name:space-01'

        echo '{
           "total_results": 1,
           "total_pages": 1,
           "prev_url": null,
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-01",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/developers",
                    "managers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/managers",
                    "auditors_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/auditors",
                    "apps_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps",
                    "routes_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/routes",
                    "domains_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/domains",
                    "service_instances_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/service_instances",
                    "app_events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/app_events",
                    "events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/events",
                    "security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/security_groups",
                    "staging_security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/staging_security_groups"
                 }
              }
           ]
        }'
    }

    cf_mock_4() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": null,
           "next_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100&page=2",
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/apps/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "app-01",
                    "production": false,
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "stack_guid": "00000000-0000-0000-0000-000000000000",
                    "buildpack": null,
                    "detected_buildpack": null,
                    "environment_json": null,
                    "memory": 1024,
                    "instances": 3,
                    "disk_quota": 1024,
                    "state": "STARTED",
                    "version": "00000000-0000-0000-0000-000000000000",
                    "command": null,
                    "console": false,
                    "debug": null,
                    "staging_task_id": null,
                    "package_state": "PENDING",
                    "health_check_type": "port",
                    "health_check_timeout": null,
                    "staging_failed_reason": null,
                    "staging_failed_description": null,
                    "diego": false,
                    "docker_image": null,
                    "docker_credentials": {
                      "username": null,
                      "password": null
                    },
                    "package_updated_at": "2021-01-01T00:00:00Z",
                    "detected_start_command": "",
                    "enable_ssh": true,
                    "ports": null,
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "stack_url": "/v2/stacks/00000000-0000-0000-0000-000000000000",
                    "routes_url": "/v2/apps/00000000-0000-0000-0000-000000000000/routes",
                    "events_url": "/v2/apps/00000000-0000-0000-0000-000000000000/events",
                    "service_bindings_url": "/v2/apps/00000000-0000-0000-0000-000000000000/service_bindings",
                    "route_mappings_url": "/v2/apps/00000000-0000-0000-0000-000000000000/route_mappings"
                 }
              },
              {
                 "metadata": {
                    "guid": "11111111-1111-1111-1111-111111111111",
                    "url": "/v2/apps/11111111-1111-1111-1111-111111111111",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "app-02",
                    "production": false,
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "stack_guid": "00000000-0000-0000-0000-000000000000",
                    "buildpack": null,
                    "detected_buildpack": null,
                    "environment_json": null,
                    "memory": 512,
                    "instances": 2,
                    "disk_quota": 1024,
                    "state": "STARTED",
                    "version": "00000000-0000-0000-0000-000000000000",
                    "command": null,
                    "console": false,
                    "debug": null,
                    "staging_task_id": null,
                    "package_state": "PENDING",
                    "health_check_type": "port",
                    "health_check_timeout": null,
                    "staging_failed_reason": null,
                    "staging_failed_description": null,
                    "diego": false,
                    "docker_image": null,
                    "docker_credentials": {
                      "username": null,
                      "password": null
                    },
                    "package_updated_at": "2021-01-01T00:00:00Z",
                    "detected_start_command": "",
                    "enable_ssh": true,
                    "ports": null,
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "stack_url": "/v2/stacks/00000000-0000-0000-0000-000000000000",
                    "routes_url": "/v2/apps/11111111-1111-1111-1111-111111111111/routes",
                    "events_url": "/v2/apps/11111111-1111-1111-1111-111111111111/events",
                    "service_bindings_url": "/v2/apps/11111111-1111-1111-1111-111111111111/service_bindings",
                    "route_mappings_url": "/v2/apps/11111111-1111-1111-1111-111111111111/route_mappings"
                 }
              }
           ]
        }'
    }

    cf_mock_5() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100&page=2'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100&page=1",
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "22222222-2222-2222-2222-222222222222",
                    "url": "/v2/apps/22222222-2222-2222-2222-222222222222",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "app-03",
                    "production": false,
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "stack_guid": "00000000-0000-0000-0000-000000000000",
                    "buildpack": null,
                    "detected_buildpack": null,
                    "environment_json": null,
                    "memory": 256,
                    "instances": 1,
                    "disk_quota": 1024,
                    "state": "STOPPED",
                    "version": "00000000-0000-0000-0000-000000000000",
                    "command": null,
                    "console": false,
                    "debug": null,
                    "staging_task_id": null,
                    "package_state": "PENDING",
                    "health_check_type": "port",
                    "health_check_timeout": null,
                    "staging_failed_reason": null,
                    "staging_failed_description": null,
                    "diego": false,
                    "docker_image": null,
                    "docker_credentials": {
                      "username": null,
                      "password": null
                    },
                    "package_updated_at": "2021-01-01T00:00:00Z",
                    "detected_start_command": "",
                    "enable_ssh": true,
                    "ports": null,
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "stack_url": "/v2/stacks/00000000-0000-0000-0000-000000000000",
                    "routes_url": "/v2/apps/22222222-2222-2222-2222-222222222222/routes",
                    "events_url": "/v2/apps/22222222-2222-2222-2222-222222222222/events",
                    "service_bindings_url": "/v2/apps/22222222-2222-2222-2222-222222222222/service_bindings",
                    "route_mappings_url": "/v2/apps/22222222-2222-2222-2222-222222222222/route_mappings"
                 }
              }
           ]
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf remove-network-policy -o org-01 -s space-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf remove-network-policy -o org-01 -s space-01 --destination-app='

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 5
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name  ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}app-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}app-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}app-03${reset_color}"
    }

    prefix=--destination-app=
    _fzf_complete_cf 'cf remove-network-policy -o org-01 -s space-01 '
}

@test 'Testing completion: cf remove-network-policy -s space-01 --destination-app=**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'space'
        assert $2 same_as '--guid'
        assert $3 same_as 'space-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": null,
           "next_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100&page=2",
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/apps/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "app-01",
                    "production": false,
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "stack_guid": "00000000-0000-0000-0000-000000000000",
                    "buildpack": null,
                    "detected_buildpack": null,
                    "environment_json": null,
                    "memory": 1024,
                    "instances": 3,
                    "disk_quota": 1024,
                    "state": "STARTED",
                    "version": "00000000-0000-0000-0000-000000000000",
                    "command": null,
                    "console": false,
                    "debug": null,
                    "staging_task_id": null,
                    "package_state": "PENDING",
                    "health_check_type": "port",
                    "health_check_timeout": null,
                    "staging_failed_reason": null,
                    "staging_failed_description": null,
                    "diego": false,
                    "docker_image": null,
                    "docker_credentials": {
                      "username": null,
                      "password": null
                    },
                    "package_updated_at": "2021-01-01T00:00:00Z",
                    "detected_start_command": "",
                    "enable_ssh": true,
                    "ports": null,
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "stack_url": "/v2/stacks/00000000-0000-0000-0000-000000000000",
                    "routes_url": "/v2/apps/00000000-0000-0000-0000-000000000000/routes",
                    "events_url": "/v2/apps/00000000-0000-0000-0000-000000000000/events",
                    "service_bindings_url": "/v2/apps/00000000-0000-0000-0000-000000000000/service_bindings",
                    "route_mappings_url": "/v2/apps/00000000-0000-0000-0000-000000000000/route_mappings"
                 }
              },
              {
                 "metadata": {
                    "guid": "11111111-1111-1111-1111-111111111111",
                    "url": "/v2/apps/11111111-1111-1111-1111-111111111111",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "app-02",
                    "production": false,
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "stack_guid": "00000000-0000-0000-0000-000000000000",
                    "buildpack": null,
                    "detected_buildpack": null,
                    "environment_json": null,
                    "memory": 512,
                    "instances": 2,
                    "disk_quota": 1024,
                    "state": "STARTED",
                    "version": "00000000-0000-0000-0000-000000000000",
                    "command": null,
                    "console": false,
                    "debug": null,
                    "staging_task_id": null,
                    "package_state": "PENDING",
                    "health_check_type": "port",
                    "health_check_timeout": null,
                    "staging_failed_reason": null,
                    "staging_failed_description": null,
                    "diego": false,
                    "docker_image": null,
                    "docker_credentials": {
                      "username": null,
                      "password": null
                    },
                    "package_updated_at": "2021-01-01T00:00:00Z",
                    "detected_start_command": "",
                    "enable_ssh": true,
                    "ports": null,
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "stack_url": "/v2/stacks/00000000-0000-0000-0000-000000000000",
                    "routes_url": "/v2/apps/11111111-1111-1111-1111-111111111111/routes",
                    "events_url": "/v2/apps/11111111-1111-1111-1111-111111111111/events",
                    "service_bindings_url": "/v2/apps/11111111-1111-1111-1111-111111111111/service_bindings",
                    "route_mappings_url": "/v2/apps/11111111-1111-1111-1111-111111111111/route_mappings"
                 }
              }
           ]
        }'
    }

    cf_mock_4() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100&page=2'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100&page=1",
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "22222222-2222-2222-2222-222222222222",
                    "url": "/v2/apps/22222222-2222-2222-2222-222222222222",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "app-03",
                    "production": false,
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "stack_guid": "00000000-0000-0000-0000-000000000000",
                    "buildpack": null,
                    "detected_buildpack": null,
                    "environment_json": null,
                    "memory": 256,
                    "instances": 1,
                    "disk_quota": 1024,
                    "state": "STOPPED",
                    "version": "00000000-0000-0000-0000-000000000000",
                    "command": null,
                    "console": false,
                    "debug": null,
                    "staging_task_id": null,
                    "package_state": "PENDING",
                    "health_check_type": "port",
                    "health_check_timeout": null,
                    "staging_failed_reason": null,
                    "staging_failed_description": null,
                    "diego": false,
                    "docker_image": null,
                    "docker_credentials": {
                      "username": null,
                      "password": null
                    },
                    "package_updated_at": "2021-01-01T00:00:00Z",
                    "detected_start_command": "",
                    "enable_ssh": true,
                    "ports": null,
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "stack_url": "/v2/stacks/00000000-0000-0000-0000-000000000000",
                    "routes_url": "/v2/apps/22222222-2222-2222-2222-222222222222/routes",
                    "events_url": "/v2/apps/22222222-2222-2222-2222-222222222222/events",
                    "service_bindings_url": "/v2/apps/22222222-2222-2222-2222-222222222222/service_bindings",
                    "route_mappings_url": "/v2/apps/22222222-2222-2222-2222-222222222222/route_mappings"
                 }
              }
           ]
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf remove-network-policy -s space-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf remove-network-policy -s space-01 --destination-app='

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 4
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name  ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}app-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}app-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}app-03${reset_color}"
    }

    prefix=--destination-app=
    _fzf_complete_cf 'cf remove-network-policy -s space-01 '
}

@test 'Testing completion: cf remove-network-policy -o **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf remove-network-policy -o '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf remove-network-policy -o '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf remove-network-policy -o '
}

@test 'Testing completion: cf remove-network-policy -o org-01 -s **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'org'
        assert $2 same_as '--guid'
        assert $3 same_as 'org-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": null,
           "next_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2",
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-01",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/developers",
                    "managers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/managers",
                    "auditors_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/auditors",
                    "apps_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps",
                    "routes_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/routes",
                    "domains_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/domains",
                    "service_instances_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/service_instances",
                    "app_events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/app_events",
                    "events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/events",
                    "security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/security_groups",
                    "staging_security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/staging_security_groups"
                 }
              },
              {
                 "metadata": {
                    "guid": "11111111-1111-1111-1111-111111111111",
                    "url": "/v2/spaces/11111111-1111-1111-1111-111111111111",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-02",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/developers",
                    "managers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/managers",
                    "auditors_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/auditors",
                    "apps_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/apps",
                    "routes_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/routes",
                    "domains_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/domains",
                    "service_instances_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/service_instances",
                    "app_events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/app_events",
                    "events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/events",
                    "security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/security_groups",
                    "staging_security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/staging_security_groups"
                 }
              }
           ]
        }'
    }

    cf_mock_4() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=1",
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "22222222-2222-2222-2222-222222222222",
                    "url": "/v2/spaces/22222222-2222-2222-2222-222222222222",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-03",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/developers",
                    "managers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/managers",
                    "auditors_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/auditors",
                    "apps_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/apps",
                    "routes_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/routes",
                    "domains_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/domains",
                    "service_instances_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/service_instances",
                    "app_events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/app_events",
                    "events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/events",
                    "security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/security_groups",
                    "staging_security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/staging_security_groups"
                 }
              }
           ]
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf remove-network-policy -o org-01 -s '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf remove-network-policy -o org-01 -s '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 4
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name    ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf remove-network-policy -o org-01 -s '
}

@test 'Testing completion: cf remove-network-policy -s **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'spaces'

        echo 'Getting spaces in org org-01 as user-01...'
        echo ''
        echo 'name'
        echo 'space-01'
        echo 'space-02'
        echo 'space-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf remove-network-policy -s '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf remove-network-policy -s '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf remove-network-policy -s '
}

@test 'Testing completion: cf remove-network-policy -o**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf remove-network-policy '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf remove-network-policy -o'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=-o
    _fzf_complete_cf 'cf remove-network-policy '
}

@test 'Testing completion: cf remove-network-policy -oorg-01 -s**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'org'
        assert $2 same_as '--guid'
        assert $3 same_as 'org-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": null,
           "next_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2",
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-01",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/developers",
                    "managers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/managers",
                    "auditors_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/auditors",
                    "apps_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps",
                    "routes_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/routes",
                    "domains_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/domains",
                    "service_instances_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/service_instances",
                    "app_events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/app_events",
                    "events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/events",
                    "security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/security_groups",
                    "staging_security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/staging_security_groups"
                 }
              },
              {
                 "metadata": {
                    "guid": "11111111-1111-1111-1111-111111111111",
                    "url": "/v2/spaces/11111111-1111-1111-1111-111111111111",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-02",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/developers",
                    "managers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/managers",
                    "auditors_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/auditors",
                    "apps_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/apps",
                    "routes_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/routes",
                    "domains_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/domains",
                    "service_instances_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/service_instances",
                    "app_events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/app_events",
                    "events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/events",
                    "security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/security_groups",
                    "staging_security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/staging_security_groups"
                 }
              }
           ]
        }'
    }

    cf_mock_4() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=1",
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "22222222-2222-2222-2222-222222222222",
                    "url": "/v2/spaces/22222222-2222-2222-2222-222222222222",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-03",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/developers",
                    "managers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/managers",
                    "auditors_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/auditors",
                    "apps_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/apps",
                    "routes_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/routes",
                    "domains_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/domains",
                    "service_instances_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/service_instances",
                    "app_events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/app_events",
                    "events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/events",
                    "security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/security_groups",
                    "staging_security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/staging_security_groups"
                 }
              }
           ]
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf remove-network-policy -oorg-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf remove-network-policy -oorg-01 -s'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 4
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name    ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=-s
    _fzf_complete_cf 'cf remove-network-policy -oorg-01 '
}

@test 'Testing completion: cf remove-network-policy -s**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'spaces'

        echo 'Getting spaces in org org-01 as user-01...'
        echo ''
        echo 'name'
        echo 'space-01'
        echo 'space-02'
        echo 'space-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf remove-network-policy '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf remove-network-policy -s'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=-s
    _fzf_complete_cf 'cf remove-network-policy '
}

@test 'Testing completion: cf bind-service **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf bind-service '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf bind-service '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf bind-service '
}

@test 'Testing completion: cf bind-service app-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'services'

        echo 'Getting services in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name                                service         plan      bound apps       last operation     broker              upgrade available'
        echo 'service-instance-01                 service-01      plan-01   app-01           create succeeded   service-broker-01   '
        echo 'service-instance-02                 service-01      plan-02                    create failed      service-broker-01   '
        echo 'service-instance-03                 service-02      plan-01                    update succeeded   service-broker-02   '
        echo 'user-provided-service-instance-01   user-provided             app-01, app-02                                          '
        echo 'user-provided-service-instance-02   user-provided             app-03                                                  '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf bind-service app-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf bind-service app-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                                ${reset_color}service         plan      bound apps       last operation     broker              upgrade available"
        assert ${lines[2]} same_as "${fg[yellow]}service-instance-01                 ${reset_color}service-01      plan-01   app-01           create succeeded   service-broker-01   "
        assert ${lines[3]} same_as "${fg[yellow]}service-instance-02                 ${reset_color}service-01      plan-02                    create failed      service-broker-01   "
        assert ${lines[4]} same_as "${fg[yellow]}service-instance-03                 ${reset_color}service-02      plan-01                    update succeeded   service-broker-02   "
        assert ${lines[5]} same_as "${fg[yellow]}user-provided-service-instance-01   ${reset_color}user-provided             app-01, app-02                                          "
        assert ${lines[6]} same_as "${fg[yellow]}user-provided-service-instance-02   ${reset_color}user-provided             app-03                                                  "
    }

    prefix=
    _fzf_complete_cf 'cf bind-service app-01 '
}

@test 'Testing completion: cf bs **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf bs '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf bs '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf bs '
}

@test 'Testing completion: cf bs app-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'services'

        echo 'Getting services in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name                                service         plan      bound apps       last operation     broker              upgrade available'
        echo 'service-instance-01                 service-01      plan-01   app-01           create succeeded   service-broker-01   '
        echo 'service-instance-02                 service-01      plan-02                    create failed      service-broker-01   '
        echo 'service-instance-03                 service-02      plan-01                    update succeeded   service-broker-02   '
        echo 'user-provided-service-instance-01   user-provided             app-01, app-02                                          '
        echo 'user-provided-service-instance-02   user-provided             app-03                                                  '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf bs app-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf bs app-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                                ${reset_color}service         plan      bound apps       last operation     broker              upgrade available"
        assert ${lines[2]} same_as "${fg[yellow]}service-instance-01                 ${reset_color}service-01      plan-01   app-01           create succeeded   service-broker-01   "
        assert ${lines[3]} same_as "${fg[yellow]}service-instance-02                 ${reset_color}service-01      plan-02                    create failed      service-broker-01   "
        assert ${lines[4]} same_as "${fg[yellow]}service-instance-03                 ${reset_color}service-02      plan-01                    update succeeded   service-broker-02   "
        assert ${lines[5]} same_as "${fg[yellow]}user-provided-service-instance-01   ${reset_color}user-provided             app-01, app-02                                          "
        assert ${lines[6]} same_as "${fg[yellow]}user-provided-service-instance-02   ${reset_color}user-provided             app-03                                                  "
    }

    prefix=
    _fzf_complete_cf 'cf bs app-01 '
}

@test 'Testing completion: cf unbind-service **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf unbind-service '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf unbind-service '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf unbind-service '
}

@test 'Testing completion: cf unbind-service app-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'services'

        echo 'Getting services in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name                                service         plan      bound apps       last operation     broker              upgrade available'
        echo 'service-instance-01                 service-01      plan-01   app-01           create succeeded   service-broker-01   '
        echo 'service-instance-02                 service-01      plan-02                    create failed      service-broker-01   '
        echo 'service-instance-03                 service-02      plan-01                    update succeeded   service-broker-02   '
        echo 'user-provided-service-instance-01   user-provided             app-01, app-02                                          '
        echo 'user-provided-service-instance-02   user-provided             app-03                                                  '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf unbind-service app-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf unbind-service app-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                                ${reset_color}service         plan      bound apps       last operation     broker              upgrade available"
        assert ${lines[2]} same_as "${fg[yellow]}service-instance-01                 ${reset_color}service-01      plan-01   app-01           create succeeded   service-broker-01   "
        assert ${lines[3]} same_as "${fg[yellow]}service-instance-02                 ${reset_color}service-01      plan-02                    create failed      service-broker-01   "
        assert ${lines[4]} same_as "${fg[yellow]}service-instance-03                 ${reset_color}service-02      plan-01                    update succeeded   service-broker-02   "
        assert ${lines[5]} same_as "${fg[yellow]}user-provided-service-instance-01   ${reset_color}user-provided             app-01, app-02                                          "
        assert ${lines[6]} same_as "${fg[yellow]}user-provided-service-instance-02   ${reset_color}user-provided             app-03                                                  "
    }

    prefix=
    _fzf_complete_cf 'cf unbind-service app-01 '
}

@test 'Testing completion: cf ub **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf ub '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf ub '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf ub '
}

@test 'Testing completion: cf ub app-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'services'

        echo 'Getting services in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name                                service         plan      bound apps       last operation     broker              upgrade available'
        echo 'service-instance-01                 service-01      plan-01   app-01           create succeeded   service-broker-01   '
        echo 'service-instance-02                 service-01      plan-02                    create failed      service-broker-01   '
        echo 'service-instance-03                 service-02      plan-01                    update succeeded   service-broker-02   '
        echo 'user-provided-service-instance-01   user-provided             app-01, app-02                                          '
        echo 'user-provided-service-instance-02   user-provided             app-03                                                  '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf ub app-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf ub app-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                                ${reset_color}service         plan      bound apps       last operation     broker              upgrade available"
        assert ${lines[2]} same_as "${fg[yellow]}service-instance-01                 ${reset_color}service-01      plan-01   app-01           create succeeded   service-broker-01   "
        assert ${lines[3]} same_as "${fg[yellow]}service-instance-02                 ${reset_color}service-01      plan-02                    create failed      service-broker-01   "
        assert ${lines[4]} same_as "${fg[yellow]}service-instance-03                 ${reset_color}service-02      plan-01                    update succeeded   service-broker-02   "
        assert ${lines[5]} same_as "${fg[yellow]}user-provided-service-instance-01   ${reset_color}user-provided             app-01, app-02                                          "
        assert ${lines[6]} same_as "${fg[yellow]}user-provided-service-instance-02   ${reset_color}user-provided             app-03                                                  "
    }

    prefix=
    _fzf_complete_cf 'cf ub app-01 '
}

@test 'Testing completion: cf copy-source **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf copy-source '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf copy-source '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf copy-source '
}

@test 'Testing completion: cf copy-source app-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf copy-source app-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf copy-source app-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf copy-source app-01 '
}

@test 'Testing completion: cf copy-source -o org-01 -s space-01 app-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'org'
        assert $2 same_as '--guid'
        assert $3 same_as 'org-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/spaces?q=organization_guid:00000000-0000-0000-0000-000000000000&q=name:space-01'

        echo '{
           "total_results": 1,
           "total_pages": 1,
           "prev_url": null,
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-01",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/developers",
                    "managers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/managers",
                    "auditors_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/auditors",
                    "apps_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps",
                    "routes_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/routes",
                    "domains_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/domains",
                    "service_instances_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/service_instances",
                    "app_events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/app_events",
                    "events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/events",
                    "security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/security_groups",
                    "staging_security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/staging_security_groups"
                 }
              }
           ]
        }'
    }

    cf_mock_4() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": null,
           "next_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100&page=2",
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/apps/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "app-01",
                    "production": false,
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "stack_guid": "00000000-0000-0000-0000-000000000000",
                    "buildpack": null,
                    "detected_buildpack": null,
                    "environment_json": null,
                    "memory": 1024,
                    "instances": 3,
                    "disk_quota": 1024,
                    "state": "STARTED",
                    "version": "00000000-0000-0000-0000-000000000000",
                    "command": null,
                    "console": false,
                    "debug": null,
                    "staging_task_id": null,
                    "package_state": "PENDING",
                    "health_check_type": "port",
                    "health_check_timeout": null,
                    "staging_failed_reason": null,
                    "staging_failed_description": null,
                    "diego": false,
                    "docker_image": null,
                    "docker_credentials": {
                      "username": null,
                      "password": null
                    },
                    "package_updated_at": "2021-01-01T00:00:00Z",
                    "detected_start_command": "",
                    "enable_ssh": true,
                    "ports": null,
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "stack_url": "/v2/stacks/00000000-0000-0000-0000-000000000000",
                    "routes_url": "/v2/apps/00000000-0000-0000-0000-000000000000/routes",
                    "events_url": "/v2/apps/00000000-0000-0000-0000-000000000000/events",
                    "service_bindings_url": "/v2/apps/00000000-0000-0000-0000-000000000000/service_bindings",
                    "route_mappings_url": "/v2/apps/00000000-0000-0000-0000-000000000000/route_mappings"
                 }
              },
              {
                 "metadata": {
                    "guid": "11111111-1111-1111-1111-111111111111",
                    "url": "/v2/apps/11111111-1111-1111-1111-111111111111",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "app-02",
                    "production": false,
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "stack_guid": "00000000-0000-0000-0000-000000000000",
                    "buildpack": null,
                    "detected_buildpack": null,
                    "environment_json": null,
                    "memory": 512,
                    "instances": 2,
                    "disk_quota": 1024,
                    "state": "STARTED",
                    "version": "00000000-0000-0000-0000-000000000000",
                    "command": null,
                    "console": false,
                    "debug": null,
                    "staging_task_id": null,
                    "package_state": "PENDING",
                    "health_check_type": "port",
                    "health_check_timeout": null,
                    "staging_failed_reason": null,
                    "staging_failed_description": null,
                    "diego": false,
                    "docker_image": null,
                    "docker_credentials": {
                      "username": null,
                      "password": null
                    },
                    "package_updated_at": "2021-01-01T00:00:00Z",
                    "detected_start_command": "",
                    "enable_ssh": true,
                    "ports": null,
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "stack_url": "/v2/stacks/00000000-0000-0000-0000-000000000000",
                    "routes_url": "/v2/apps/11111111-1111-1111-1111-111111111111/routes",
                    "events_url": "/v2/apps/11111111-1111-1111-1111-111111111111/events",
                    "service_bindings_url": "/v2/apps/11111111-1111-1111-1111-111111111111/service_bindings",
                    "route_mappings_url": "/v2/apps/11111111-1111-1111-1111-111111111111/route_mappings"
                 }
              }
           ]
        }'
    }

    cf_mock_5() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100&page=2'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100&page=1",
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "22222222-2222-2222-2222-222222222222",
                    "url": "/v2/apps/22222222-2222-2222-2222-222222222222",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "app-03",
                    "production": false,
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "stack_guid": "00000000-0000-0000-0000-000000000000",
                    "buildpack": null,
                    "detected_buildpack": null,
                    "environment_json": null,
                    "memory": 256,
                    "instances": 1,
                    "disk_quota": 1024,
                    "state": "STOPPED",
                    "version": "00000000-0000-0000-0000-000000000000",
                    "command": null,
                    "console": false,
                    "debug": null,
                    "staging_task_id": null,
                    "package_state": "PENDING",
                    "health_check_type": "port",
                    "health_check_timeout": null,
                    "staging_failed_reason": null,
                    "staging_failed_description": null,
                    "diego": false,
                    "docker_image": null,
                    "docker_credentials": {
                      "username": null,
                      "password": null
                    },
                    "package_updated_at": "2021-01-01T00:00:00Z",
                    "detected_start_command": "",
                    "enable_ssh": true,
                    "ports": null,
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "stack_url": "/v2/stacks/00000000-0000-0000-0000-000000000000",
                    "routes_url": "/v2/apps/22222222-2222-2222-2222-222222222222/routes",
                    "events_url": "/v2/apps/22222222-2222-2222-2222-222222222222/events",
                    "service_bindings_url": "/v2/apps/22222222-2222-2222-2222-222222222222/service_bindings",
                    "route_mappings_url": "/v2/apps/22222222-2222-2222-2222-222222222222/route_mappings"
                 }
              }
           ]
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf copy-source -o org-01 -s space-01 app-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf copy-source -o org-01 -s space-01 app-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 5
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name  ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}app-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}app-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}app-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf copy-source -o org-01 -s space-01 app-01 '
}

@test 'Testing completion: cf copy-source -s space-01 app-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'space'
        assert $2 same_as '--guid'
        assert $3 same_as 'space-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": null,
           "next_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100&page=2",
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/apps/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "app-01",
                    "production": false,
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "stack_guid": "00000000-0000-0000-0000-000000000000",
                    "buildpack": null,
                    "detected_buildpack": null,
                    "environment_json": null,
                    "memory": 1024,
                    "instances": 3,
                    "disk_quota": 1024,
                    "state": "STARTED",
                    "version": "00000000-0000-0000-0000-000000000000",
                    "command": null,
                    "console": false,
                    "debug": null,
                    "staging_task_id": null,
                    "package_state": "PENDING",
                    "health_check_type": "port",
                    "health_check_timeout": null,
                    "staging_failed_reason": null,
                    "staging_failed_description": null,
                    "diego": false,
                    "docker_image": null,
                    "docker_credentials": {
                      "username": null,
                      "password": null
                    },
                    "package_updated_at": "2021-01-01T00:00:00Z",
                    "detected_start_command": "",
                    "enable_ssh": true,
                    "ports": null,
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "stack_url": "/v2/stacks/00000000-0000-0000-0000-000000000000",
                    "routes_url": "/v2/apps/00000000-0000-0000-0000-000000000000/routes",
                    "events_url": "/v2/apps/00000000-0000-0000-0000-000000000000/events",
                    "service_bindings_url": "/v2/apps/00000000-0000-0000-0000-000000000000/service_bindings",
                    "route_mappings_url": "/v2/apps/00000000-0000-0000-0000-000000000000/route_mappings"
                 }
              },
              {
                 "metadata": {
                    "guid": "11111111-1111-1111-1111-111111111111",
                    "url": "/v2/apps/11111111-1111-1111-1111-111111111111",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "app-02",
                    "production": false,
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "stack_guid": "00000000-0000-0000-0000-000000000000",
                    "buildpack": null,
                    "detected_buildpack": null,
                    "environment_json": null,
                    "memory": 512,
                    "instances": 2,
                    "disk_quota": 1024,
                    "state": "STARTED",
                    "version": "00000000-0000-0000-0000-000000000000",
                    "command": null,
                    "console": false,
                    "debug": null,
                    "staging_task_id": null,
                    "package_state": "PENDING",
                    "health_check_type": "port",
                    "health_check_timeout": null,
                    "staging_failed_reason": null,
                    "staging_failed_description": null,
                    "diego": false,
                    "docker_image": null,
                    "docker_credentials": {
                      "username": null,
                      "password": null
                    },
                    "package_updated_at": "2021-01-01T00:00:00Z",
                    "detected_start_command": "",
                    "enable_ssh": true,
                    "ports": null,
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "stack_url": "/v2/stacks/00000000-0000-0000-0000-000000000000",
                    "routes_url": "/v2/apps/11111111-1111-1111-1111-111111111111/routes",
                    "events_url": "/v2/apps/11111111-1111-1111-1111-111111111111/events",
                    "service_bindings_url": "/v2/apps/11111111-1111-1111-1111-111111111111/service_bindings",
                    "route_mappings_url": "/v2/apps/11111111-1111-1111-1111-111111111111/route_mappings"
                 }
              }
           ]
        }'
    }

    cf_mock_4() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100&page=2'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100&page=1",
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "22222222-2222-2222-2222-222222222222",
                    "url": "/v2/apps/22222222-2222-2222-2222-222222222222",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "app-03",
                    "production": false,
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "stack_guid": "00000000-0000-0000-0000-000000000000",
                    "buildpack": null,
                    "detected_buildpack": null,
                    "environment_json": null,
                    "memory": 256,
                    "instances": 1,
                    "disk_quota": 1024,
                    "state": "STOPPED",
                    "version": "00000000-0000-0000-0000-000000000000",
                    "command": null,
                    "console": false,
                    "debug": null,
                    "staging_task_id": null,
                    "package_state": "PENDING",
                    "health_check_type": "port",
                    "health_check_timeout": null,
                    "staging_failed_reason": null,
                    "staging_failed_description": null,
                    "diego": false,
                    "docker_image": null,
                    "docker_credentials": {
                      "username": null,
                      "password": null
                    },
                    "package_updated_at": "2021-01-01T00:00:00Z",
                    "detected_start_command": "",
                    "enable_ssh": true,
                    "ports": null,
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "stack_url": "/v2/stacks/00000000-0000-0000-0000-000000000000",
                    "routes_url": "/v2/apps/22222222-2222-2222-2222-222222222222/routes",
                    "events_url": "/v2/apps/22222222-2222-2222-2222-222222222222/events",
                    "service_bindings_url": "/v2/apps/22222222-2222-2222-2222-222222222222/service_bindings",
                    "route_mappings_url": "/v2/apps/22222222-2222-2222-2222-222222222222/route_mappings"
                 }
              }
           ]
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf copy-source -s space-01 app-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf copy-source -s space-01 app-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 4
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name  ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}app-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}app-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}app-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf copy-source -s space-01 app-01 '
}

@test 'Testing completion: cf copy-source -o **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf copy-source -o '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf copy-source -o '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf copy-source -o '
}

@test 'Testing completion: cf copy-source -o org-01 -s **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'org'
        assert $2 same_as '--guid'
        assert $3 same_as 'org-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": null,
           "next_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2",
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-01",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/developers",
                    "managers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/managers",
                    "auditors_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/auditors",
                    "apps_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps",
                    "routes_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/routes",
                    "domains_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/domains",
                    "service_instances_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/service_instances",
                    "app_events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/app_events",
                    "events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/events",
                    "security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/security_groups",
                    "staging_security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/staging_security_groups"
                 }
              },
              {
                 "metadata": {
                    "guid": "11111111-1111-1111-1111-111111111111",
                    "url": "/v2/spaces/11111111-1111-1111-1111-111111111111",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-02",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/developers",
                    "managers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/managers",
                    "auditors_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/auditors",
                    "apps_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/apps",
                    "routes_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/routes",
                    "domains_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/domains",
                    "service_instances_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/service_instances",
                    "app_events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/app_events",
                    "events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/events",
                    "security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/security_groups",
                    "staging_security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/staging_security_groups"
                 }
              }
           ]
        }'
    }

    cf_mock_4() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=1",
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "22222222-2222-2222-2222-222222222222",
                    "url": "/v2/spaces/22222222-2222-2222-2222-222222222222",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-03",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/developers",
                    "managers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/managers",
                    "auditors_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/auditors",
                    "apps_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/apps",
                    "routes_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/routes",
                    "domains_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/domains",
                    "service_instances_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/service_instances",
                    "app_events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/app_events",
                    "events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/events",
                    "security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/security_groups",
                    "staging_security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/staging_security_groups"
                 }
              }
           ]
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf copy-source -o org-01 -s '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf copy-source -o org-01 -s '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 4
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name    ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf copy-source -o org-01 -s '
}

@test 'Testing completion: cf copy-source -s **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'spaces'

        echo 'Getting spaces in org org-01 as user-01...'
        echo ''
        echo 'name'
        echo 'space-01'
        echo 'space-02'
        echo 'space-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf copy-source -s '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf copy-source -s '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf copy-source -s '
}

@test 'Testing completion: cf copy-source -oorg-01 -sspace-01 app-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'org'
        assert $2 same_as '--guid'
        assert $3 same_as 'org-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/spaces?q=organization_guid:00000000-0000-0000-0000-000000000000&q=name:space-01'

        echo '{
           "total_results": 1,
           "total_pages": 1,
           "prev_url": null,
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-01",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/developers",
                    "managers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/managers",
                    "auditors_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/auditors",
                    "apps_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps",
                    "routes_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/routes",
                    "domains_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/domains",
                    "service_instances_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/service_instances",
                    "app_events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/app_events",
                    "events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/events",
                    "security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/security_groups",
                    "staging_security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/staging_security_groups"
                 }
              }
           ]
        }'
    }

    cf_mock_4() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": null,
           "next_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100&page=2",
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/apps/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "app-01",
                    "production": false,
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "stack_guid": "00000000-0000-0000-0000-000000000000",
                    "buildpack": null,
                    "detected_buildpack": null,
                    "environment_json": null,
                    "memory": 1024,
                    "instances": 3,
                    "disk_quota": 1024,
                    "state": "STARTED",
                    "version": "00000000-0000-0000-0000-000000000000",
                    "command": null,
                    "console": false,
                    "debug": null,
                    "staging_task_id": null,
                    "package_state": "PENDING",
                    "health_check_type": "port",
                    "health_check_timeout": null,
                    "staging_failed_reason": null,
                    "staging_failed_description": null,
                    "diego": false,
                    "docker_image": null,
                    "docker_credentials": {
                      "username": null,
                      "password": null
                    },
                    "package_updated_at": "2021-01-01T00:00:00Z",
                    "detected_start_command": "",
                    "enable_ssh": true,
                    "ports": null,
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "stack_url": "/v2/stacks/00000000-0000-0000-0000-000000000000",
                    "routes_url": "/v2/apps/00000000-0000-0000-0000-000000000000/routes",
                    "events_url": "/v2/apps/00000000-0000-0000-0000-000000000000/events",
                    "service_bindings_url": "/v2/apps/00000000-0000-0000-0000-000000000000/service_bindings",
                    "route_mappings_url": "/v2/apps/00000000-0000-0000-0000-000000000000/route_mappings"
                 }
              },
              {
                 "metadata": {
                    "guid": "11111111-1111-1111-1111-111111111111",
                    "url": "/v2/apps/11111111-1111-1111-1111-111111111111",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "app-02",
                    "production": false,
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "stack_guid": "00000000-0000-0000-0000-000000000000",
                    "buildpack": null,
                    "detected_buildpack": null,
                    "environment_json": null,
                    "memory": 512,
                    "instances": 2,
                    "disk_quota": 1024,
                    "state": "STARTED",
                    "version": "00000000-0000-0000-0000-000000000000",
                    "command": null,
                    "console": false,
                    "debug": null,
                    "staging_task_id": null,
                    "package_state": "PENDING",
                    "health_check_type": "port",
                    "health_check_timeout": null,
                    "staging_failed_reason": null,
                    "staging_failed_description": null,
                    "diego": false,
                    "docker_image": null,
                    "docker_credentials": {
                      "username": null,
                      "password": null
                    },
                    "package_updated_at": "2021-01-01T00:00:00Z",
                    "detected_start_command": "",
                    "enable_ssh": true,
                    "ports": null,
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "stack_url": "/v2/stacks/00000000-0000-0000-0000-000000000000",
                    "routes_url": "/v2/apps/11111111-1111-1111-1111-111111111111/routes",
                    "events_url": "/v2/apps/11111111-1111-1111-1111-111111111111/events",
                    "service_bindings_url": "/v2/apps/11111111-1111-1111-1111-111111111111/service_bindings",
                    "route_mappings_url": "/v2/apps/11111111-1111-1111-1111-111111111111/route_mappings"
                 }
              }
           ]
        }'
    }

    cf_mock_5() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100&page=2'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100&page=1",
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "22222222-2222-2222-2222-222222222222",
                    "url": "/v2/apps/22222222-2222-2222-2222-222222222222",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "app-03",
                    "production": false,
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "stack_guid": "00000000-0000-0000-0000-000000000000",
                    "buildpack": null,
                    "detected_buildpack": null,
                    "environment_json": null,
                    "memory": 256,
                    "instances": 1,
                    "disk_quota": 1024,
                    "state": "STOPPED",
                    "version": "00000000-0000-0000-0000-000000000000",
                    "command": null,
                    "console": false,
                    "debug": null,
                    "staging_task_id": null,
                    "package_state": "PENDING",
                    "health_check_type": "port",
                    "health_check_timeout": null,
                    "staging_failed_reason": null,
                    "staging_failed_description": null,
                    "diego": false,
                    "docker_image": null,
                    "docker_credentials": {
                      "username": null,
                      "password": null
                    },
                    "package_updated_at": "2021-01-01T00:00:00Z",
                    "detected_start_command": "",
                    "enable_ssh": true,
                    "ports": null,
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "stack_url": "/v2/stacks/00000000-0000-0000-0000-000000000000",
                    "routes_url": "/v2/apps/22222222-2222-2222-2222-222222222222/routes",
                    "events_url": "/v2/apps/22222222-2222-2222-2222-222222222222/events",
                    "service_bindings_url": "/v2/apps/22222222-2222-2222-2222-222222222222/service_bindings",
                    "route_mappings_url": "/v2/apps/22222222-2222-2222-2222-222222222222/route_mappings"
                 }
              }
           ]
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf copy-source -oorg-01 -sspace-01 app-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf copy-source -oorg-01 -sspace-01 app-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 5
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name  ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}app-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}app-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}app-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf copy-source -oorg-01 -sspace-01 app-01 '
}

@test 'Testing completion: cf copy-source -sspace-01 app-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'space'
        assert $2 same_as '--guid'
        assert $3 same_as 'space-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": null,
           "next_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100&page=2",
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/apps/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "app-01",
                    "production": false,
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "stack_guid": "00000000-0000-0000-0000-000000000000",
                    "buildpack": null,
                    "detected_buildpack": null,
                    "environment_json": null,
                    "memory": 1024,
                    "instances": 3,
                    "disk_quota": 1024,
                    "state": "STARTED",
                    "version": "00000000-0000-0000-0000-000000000000",
                    "command": null,
                    "console": false,
                    "debug": null,
                    "staging_task_id": null,
                    "package_state": "PENDING",
                    "health_check_type": "port",
                    "health_check_timeout": null,
                    "staging_failed_reason": null,
                    "staging_failed_description": null,
                    "diego": false,
                    "docker_image": null,
                    "docker_credentials": {
                      "username": null,
                      "password": null
                    },
                    "package_updated_at": "2021-01-01T00:00:00Z",
                    "detected_start_command": "",
                    "enable_ssh": true,
                    "ports": null,
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "stack_url": "/v2/stacks/00000000-0000-0000-0000-000000000000",
                    "routes_url": "/v2/apps/00000000-0000-0000-0000-000000000000/routes",
                    "events_url": "/v2/apps/00000000-0000-0000-0000-000000000000/events",
                    "service_bindings_url": "/v2/apps/00000000-0000-0000-0000-000000000000/service_bindings",
                    "route_mappings_url": "/v2/apps/00000000-0000-0000-0000-000000000000/route_mappings"
                 }
              },
              {
                 "metadata": {
                    "guid": "11111111-1111-1111-1111-111111111111",
                    "url": "/v2/apps/11111111-1111-1111-1111-111111111111",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "app-02",
                    "production": false,
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "stack_guid": "00000000-0000-0000-0000-000000000000",
                    "buildpack": null,
                    "detected_buildpack": null,
                    "environment_json": null,
                    "memory": 512,
                    "instances": 2,
                    "disk_quota": 1024,
                    "state": "STARTED",
                    "version": "00000000-0000-0000-0000-000000000000",
                    "command": null,
                    "console": false,
                    "debug": null,
                    "staging_task_id": null,
                    "package_state": "PENDING",
                    "health_check_type": "port",
                    "health_check_timeout": null,
                    "staging_failed_reason": null,
                    "staging_failed_description": null,
                    "diego": false,
                    "docker_image": null,
                    "docker_credentials": {
                      "username": null,
                      "password": null
                    },
                    "package_updated_at": "2021-01-01T00:00:00Z",
                    "detected_start_command": "",
                    "enable_ssh": true,
                    "ports": null,
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "stack_url": "/v2/stacks/00000000-0000-0000-0000-000000000000",
                    "routes_url": "/v2/apps/11111111-1111-1111-1111-111111111111/routes",
                    "events_url": "/v2/apps/11111111-1111-1111-1111-111111111111/events",
                    "service_bindings_url": "/v2/apps/11111111-1111-1111-1111-111111111111/service_bindings",
                    "route_mappings_url": "/v2/apps/11111111-1111-1111-1111-111111111111/route_mappings"
                 }
              }
           ]
        }'
    }

    cf_mock_4() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100&page=2'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps?results-per-page=100&page=1",
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "22222222-2222-2222-2222-222222222222",
                    "url": "/v2/apps/22222222-2222-2222-2222-222222222222",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "app-03",
                    "production": false,
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "stack_guid": "00000000-0000-0000-0000-000000000000",
                    "buildpack": null,
                    "detected_buildpack": null,
                    "environment_json": null,
                    "memory": 256,
                    "instances": 1,
                    "disk_quota": 1024,
                    "state": "STOPPED",
                    "version": "00000000-0000-0000-0000-000000000000",
                    "command": null,
                    "console": false,
                    "debug": null,
                    "staging_task_id": null,
                    "package_state": "PENDING",
                    "health_check_type": "port",
                    "health_check_timeout": null,
                    "staging_failed_reason": null,
                    "staging_failed_description": null,
                    "diego": false,
                    "docker_image": null,
                    "docker_credentials": {
                      "username": null,
                      "password": null
                    },
                    "package_updated_at": "2021-01-01T00:00:00Z",
                    "detected_start_command": "",
                    "enable_ssh": true,
                    "ports": null,
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "stack_url": "/v2/stacks/00000000-0000-0000-0000-000000000000",
                    "routes_url": "/v2/apps/22222222-2222-2222-2222-222222222222/routes",
                    "events_url": "/v2/apps/22222222-2222-2222-2222-222222222222/events",
                    "service_bindings_url": "/v2/apps/22222222-2222-2222-2222-222222222222/service_bindings",
                    "route_mappings_url": "/v2/apps/22222222-2222-2222-2222-222222222222/route_mappings"
                 }
              }
           ]
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf copy-source -sspace-01 app-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf copy-source -sspace-01 app-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 4
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name  ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}app-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}app-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}app-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf copy-source -sspace-01 app-01 '
}

@test 'Testing completion: cf copy-source -o**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf copy-source '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf copy-source -o'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=-o
    _fzf_complete_cf 'cf copy-source '
}

@test 'Testing completion: cf copy-source -oorg-01 -s**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'org'
        assert $2 same_as '--guid'
        assert $3 same_as 'org-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": null,
           "next_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2",
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-01",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/developers",
                    "managers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/managers",
                    "auditors_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/auditors",
                    "apps_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps",
                    "routes_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/routes",
                    "domains_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/domains",
                    "service_instances_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/service_instances",
                    "app_events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/app_events",
                    "events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/events",
                    "security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/security_groups",
                    "staging_security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/staging_security_groups"
                 }
              },
              {
                 "metadata": {
                    "guid": "11111111-1111-1111-1111-111111111111",
                    "url": "/v2/spaces/11111111-1111-1111-1111-111111111111",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-02",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/developers",
                    "managers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/managers",
                    "auditors_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/auditors",
                    "apps_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/apps",
                    "routes_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/routes",
                    "domains_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/domains",
                    "service_instances_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/service_instances",
                    "app_events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/app_events",
                    "events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/events",
                    "security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/security_groups",
                    "staging_security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/staging_security_groups"
                 }
              }
           ]
        }'
    }

    cf_mock_4() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=1",
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "22222222-2222-2222-2222-222222222222",
                    "url": "/v2/spaces/22222222-2222-2222-2222-222222222222",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-03",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/developers",
                    "managers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/managers",
                    "auditors_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/auditors",
                    "apps_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/apps",
                    "routes_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/routes",
                    "domains_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/domains",
                    "service_instances_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/service_instances",
                    "app_events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/app_events",
                    "events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/events",
                    "security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/security_groups",
                    "staging_security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/staging_security_groups"
                 }
              }
           ]
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf copy-source -oorg-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf copy-source -oorg-01 -s'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 4
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name    ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=-s
    _fzf_complete_cf 'cf copy-source -oorg-01 '
}

@test 'Testing completion: cf copy-source -s**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'spaces'

        echo 'Getting spaces in org org-01 as user-01...'
        echo ''
        echo 'name'
        echo 'space-01'
        echo 'space-02'
        echo 'space-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf copy-source '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf copy-source -s'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=-s
    _fzf_complete_cf 'cf copy-source '
}

@test 'Testing completion: cf create-app-manifest **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf create-app-manifest '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf create-app-manifest '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf create-app-manifest '
}

@test 'Testing completion: cf create-app-manifest -p **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf create-app-manifest -p '

        echo 'cf'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'cf create-app-manifest -p '
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=
    _fzf_complete_cf 'cf create-app-manifest -p '

    assert __fzf_extract_command mock_times 1
}

@test 'Testing completion: cf create-app-manifest -p**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf create-app-manifest '

        echo 'cf'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'cf create-app-manifest -p'
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=-p
    _fzf_complete_cf 'cf create-app-manifest '

    assert __fzf_extract_command mock_times 1
}

@test 'Testing completion: cf f **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf f '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf f '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf f '
}

@test 'Testing completion: cf f app-01 -i **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 2
        assert $1 same_as 'app'
        assert $2 same_as 'app-01'

        echo 'Showing health and status for app app-01 in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name:              app-01'
        echo 'requested state:   started'
        echo 'routes:            app-01.example.com'
        echo 'last uploaded:     Sat 01 Jan 09:00:00 JST 2021'
        echo 'stack:             cflinuxfs3'
        echo 'buildpacks:        go'
        echo ''
        echo 'type:           web'
        echo 'instances:      3/3'
        echo 'memory usage:   1024M'
        echo '     state     since                  cpu    memory         disk           details'
        echo '#0   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
        echo '#1   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
        echo '#2   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf f app-01 -i '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf f app-01 -i '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}     ${reset_color}state     since                  cpu    memory         disk           details"
        assert ${lines[2]} same_as "${fg[yellow]}#0   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
        assert ${lines[3]} same_as "${fg[yellow]}#1   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
        assert ${lines[4]} same_as "${fg[yellow]}#2   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
    }

    prefix=
    _fzf_complete_cf 'cf f app-01 -i '
}

@test 'Testing completion: cf f app-01 -i**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 2
        assert $1 same_as 'app'
        assert $2 same_as 'app-01'

        echo 'Showing health and status for app app-01 in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name:              app-01'
        echo 'requested state:   started'
        echo 'routes:            app-01.example.com'
        echo 'last uploaded:     Sat 01 Jan 09:00:00 JST 2021'
        echo 'stack:             cflinuxfs3'
        echo 'buildpacks:        go'
        echo ''
        echo 'type:           web'
        echo 'instances:      3/3'
        echo 'memory usage:   1024M'
        echo '     state     since                  cpu    memory         disk           details'
        echo '#0   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
        echo '#1   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
        echo '#2   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf f app-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf f app-01 -i'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}     ${reset_color}state     since                  cpu    memory         disk           details"
        assert ${lines[2]} same_as "${fg[yellow]}#0   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
        assert ${lines[3]} same_as "${fg[yellow]}#1   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
        assert ${lines[4]} same_as "${fg[yellow]}#2   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
    }

    prefix=-i
    _fzf_complete_cf 'cf f app-01 '
}

@test 'Testing completion: cf files **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf files '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf files '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf files '
}

@test 'Testing completion: cf files app-01 -i **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 2
        assert $1 same_as 'app'
        assert $2 same_as 'app-01'

        echo 'Showing health and status for app app-01 in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name:              app-01'
        echo 'requested state:   started'
        echo 'routes:            app-01.example.com'
        echo 'last uploaded:     Sat 01 Jan 09:00:00 JST 2021'
        echo 'stack:             cflinuxfs3'
        echo 'buildpacks:        go'
        echo ''
        echo 'type:           web'
        echo 'instances:      3/3'
        echo 'memory usage:   1024M'
        echo '     state     since                  cpu    memory         disk           details'
        echo '#0   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
        echo '#1   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
        echo '#2   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf files app-01 -i '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf files app-01 -i '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}     ${reset_color}state     since                  cpu    memory         disk           details"
        assert ${lines[2]} same_as "${fg[yellow]}#0   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
        assert ${lines[3]} same_as "${fg[yellow]}#1   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
        assert ${lines[4]} same_as "${fg[yellow]}#2   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
    }

    prefix=
    _fzf_complete_cf 'cf files app-01 -i '
}

@test 'Testing completion: cf files app-01 -i**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 2
        assert $1 same_as 'app'
        assert $2 same_as 'app-01'

        echo 'Showing health and status for app app-01 in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name:              app-01'
        echo 'requested state:   started'
        echo 'routes:            app-01.example.com'
        echo 'last uploaded:     Sat 01 Jan 09:00:00 JST 2021'
        echo 'stack:             cflinuxfs3'
        echo 'buildpacks:        go'
        echo ''
        echo 'type:           web'
        echo 'instances:      3/3'
        echo 'memory usage:   1024M'
        echo '     state     since                  cpu    memory         disk           details'
        echo '#0   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
        echo '#1   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
        echo '#2   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf files app-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf files app-01 -i'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}     ${reset_color}state     since                  cpu    memory         disk           details"
        assert ${lines[2]} same_as "${fg[yellow]}#0   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
        assert ${lines[3]} same_as "${fg[yellow]}#1   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
        assert ${lines[4]} same_as "${fg[yellow]}#2   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
    }

    prefix=-i
    _fzf_complete_cf 'cf files app-01 '
}

@test 'Testing completion: cf map-route **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf map-route '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf map-route '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf map-route '
}

@test 'Testing completion: cf map-route app-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'routes'

        echo 'Getting routes for org org-01 / space space-01 as user-01 ...'
        echo ''
        echo 'space      host      domain                    port   path   type   apps     service'
        echo 'space-01   app       example.com                                    app-01'
        echo 'space-01   app       example.com                      /sub          app-02'
        echo 'space-01   service   example.com                                    app-03   service-instance-03'
        echo 'space-01   service   example.com                      /sub          app-04   service-instance-03'
        echo 'space-01   app       unbound.example.com'
        echo 'space-01   app       unbound.example.com              /sub'
        echo 'space-01   service   unbound.example.com                                     service-instance-03'
        echo 'space-01   service   unbound.example.com              /sub                   service-instance-03'
        echo 'space-01             example.com                                    app-01'
        echo 'space-01             example.com                      /sub          app-02'
        echo 'space-01             example.com                                    app-03   service-instance-03'
        echo 'space-01             example.com                      /sub          app-04   service-instance-03'
        echo 'space-01             unbound.example.com'
        echo 'space-01             unbound.example.com              /sub'
        echo 'space-01             unbound.example.com                                     service-instance-03'
        echo 'space-01             unbound.example.com              /sub                   service-instance-03'
        echo 'space-01             tcp.example.com           1024          tcp    app-01'
        echo 'space-01             tcp.example.com           1025          tcp    app-03   service-instance-03'
        echo 'space-01             tcp.unbound.example.com   1024          tcp'
        echo 'space-01             tcp.unbound.example.com   1025          tcp             service-instance-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf map-route app-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf map-route app-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 21
        assert ${lines[1]} same_as "${fg[green]}space      ${reset_color}${fg[yellow]}host      ${reset_color}${fg[blue]}domain                    ${reset_color}port   path   type   apps     service"
        assert ${lines[2]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}app       ${reset_color}${fg[blue]}example.com               ${reset_color}                     app-01"
        assert ${lines[3]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}app       ${reset_color}${fg[blue]}example.com               ${reset_color}       /sub          app-02"
        assert ${lines[4]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}service   ${reset_color}${fg[blue]}example.com               ${reset_color}                     app-03   service-instance-03"
        assert ${lines[5]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}service   ${reset_color}${fg[blue]}example.com               ${reset_color}       /sub          app-04   service-instance-03"
        assert ${lines[6]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}app       ${reset_color}${fg[blue]}unbound.example.com${reset_color}"
        assert ${lines[7]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}app       ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}       /sub"
        assert ${lines[8]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}service   ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}                              service-instance-03"
        assert ${lines[9]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}service   ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}       /sub                   service-instance-03"
        assert ${lines[10]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}example.com               ${reset_color}                     app-01"
        assert ${lines[11]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}example.com               ${reset_color}       /sub          app-02"
        assert ${lines[12]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}example.com               ${reset_color}                     app-03   service-instance-03"
        assert ${lines[13]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}example.com               ${reset_color}       /sub          app-04   service-instance-03"
        assert ${lines[14]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}unbound.example.com${reset_color}"
        assert ${lines[15]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}       /sub"
        assert ${lines[16]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}                              service-instance-03"
        assert ${lines[17]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}       /sub                   service-instance-03"
        assert ${lines[18]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}tcp.example.com           ${reset_color}1024          tcp    app-01"
        assert ${lines[19]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}tcp.example.com           ${reset_color}1025          tcp    app-03   service-instance-03"
        assert ${lines[20]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}tcp.unbound.example.com   ${reset_color}1024          tcp"
        assert ${lines[21]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}tcp.unbound.example.com   ${reset_color}1025          tcp             service-instance-03"
    }

    prefix=
    _fzf_complete_cf 'cf map-route app-01 '
}

@test 'Testing completion: cf unmap-route **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf unmap-route '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf unmap-route '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf unmap-route '
}

@test 'Testing completion: cf unmap-route app-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'routes'

        echo 'Getting routes for org org-01 / space space-01 as user-01 ...'
        echo ''
        echo 'space      host      domain                    port   path   type   apps     service'
        echo 'space-01   app       example.com                                    app-01'
        echo 'space-01   app       example.com                      /sub          app-02'
        echo 'space-01   service   example.com                                    app-03   service-instance-03'
        echo 'space-01   service   example.com                      /sub          app-04   service-instance-03'
        echo 'space-01   app       unbound.example.com'
        echo 'space-01   app       unbound.example.com              /sub'
        echo 'space-01   service   unbound.example.com                                     service-instance-03'
        echo 'space-01   service   unbound.example.com              /sub                   service-instance-03'
        echo 'space-01             example.com                                    app-01'
        echo 'space-01             example.com                      /sub          app-02'
        echo 'space-01             example.com                                    app-03   service-instance-03'
        echo 'space-01             example.com                      /sub          app-04   service-instance-03'
        echo 'space-01             unbound.example.com'
        echo 'space-01             unbound.example.com              /sub'
        echo 'space-01             unbound.example.com                                     service-instance-03'
        echo 'space-01             unbound.example.com              /sub                   service-instance-03'
        echo 'space-01             tcp.example.com           1024          tcp    app-01'
        echo 'space-01             tcp.example.com           1025          tcp    app-03   service-instance-03'
        echo 'space-01             tcp.unbound.example.com   1024          tcp'
        echo 'space-01             tcp.unbound.example.com   1025          tcp             service-instance-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf unmap-route app-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf unmap-route app-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 21
        assert ${lines[1]} same_as "${fg[green]}space      ${reset_color}${fg[yellow]}host      ${reset_color}${fg[blue]}domain                    ${reset_color}port   path   type   apps     service"
        assert ${lines[2]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}app       ${reset_color}${fg[blue]}example.com               ${reset_color}                     app-01"
        assert ${lines[3]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}app       ${reset_color}${fg[blue]}example.com               ${reset_color}       /sub          app-02"
        assert ${lines[4]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}service   ${reset_color}${fg[blue]}example.com               ${reset_color}                     app-03   service-instance-03"
        assert ${lines[5]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}service   ${reset_color}${fg[blue]}example.com               ${reset_color}       /sub          app-04   service-instance-03"
        assert ${lines[6]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}app       ${reset_color}${fg[blue]}unbound.example.com${reset_color}"
        assert ${lines[7]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}app       ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}       /sub"
        assert ${lines[8]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}service   ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}                              service-instance-03"
        assert ${lines[9]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}service   ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}       /sub                   service-instance-03"
        assert ${lines[10]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}example.com               ${reset_color}                     app-01"
        assert ${lines[11]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}example.com               ${reset_color}       /sub          app-02"
        assert ${lines[12]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}example.com               ${reset_color}                     app-03   service-instance-03"
        assert ${lines[13]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}example.com               ${reset_color}       /sub          app-04   service-instance-03"
        assert ${lines[14]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}unbound.example.com${reset_color}"
        assert ${lines[15]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}       /sub"
        assert ${lines[16]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}                              service-instance-03"
        assert ${lines[17]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}       /sub                   service-instance-03"
        assert ${lines[18]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}tcp.example.com           ${reset_color}1024          tcp    app-01"
        assert ${lines[19]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}tcp.example.com           ${reset_color}1025          tcp    app-03   service-instance-03"
        assert ${lines[20]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}tcp.unbound.example.com   ${reset_color}1024          tcp"
        assert ${lines[21]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}tcp.unbound.example.com   ${reset_color}1025          tcp             service-instance-03"
    }

    prefix=
    _fzf_complete_cf 'cf unmap-route app-01 '
}

@test 'Testing completion: cf p **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf p '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf p '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf p '
}

@test 'Testing completion: cf p -b **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'buildpacks'

        echo 'Getting buildpacks...'
        echo ''
        echo 'buildpack          position   enabled   locked   filename                                  stack'
        echo 'binary_buildpack   1          true      true     binary-buildpack-cflinuxfs3-v1.0.39.zip   cflinuxfs3'
        echo 'go_buildpack       2          true      true     go-buildpack-cflinuxfs3-v1.9.34.zip       cflinuxfs3'
        echo 'java_buildpack     3          true      true     java-buildpack-v4.40.zip                  cflinuxfs3'
        echo 'nodejs_buildpack   4          true      true     nodejs-buildpack-cflinuxfs3-v1.7.57.zip   cflinuxfs3'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf p -b '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf p -b '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}buildpack          ${reset_color}position   enabled   locked   filename                                  stack"
        assert ${lines[2]} same_as "${fg[yellow]}binary_buildpack   ${reset_color}1          true      true     binary-buildpack-cflinuxfs3-v1.0.39.zip   cflinuxfs3"
        assert ${lines[3]} same_as "${fg[yellow]}go_buildpack       ${reset_color}2          true      true     go-buildpack-cflinuxfs3-v1.9.34.zip       cflinuxfs3"
        assert ${lines[4]} same_as "${fg[yellow]}java_buildpack     ${reset_color}3          true      true     java-buildpack-v4.40.zip                  cflinuxfs3"
        assert ${lines[5]} same_as "${fg[yellow]}nodejs_buildpack   ${reset_color}4          true      true     nodejs-buildpack-cflinuxfs3-v1.7.57.zip   cflinuxfs3"
    }

    prefix=
    _fzf_complete_cf 'cf p -b '
}

@test 'Testing completion: cf p -b**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'buildpacks'

        echo 'Getting buildpacks...'
        echo ''
        echo 'buildpack          position   enabled   locked   filename                                  stack'
        echo 'binary_buildpack   1          true      true     binary-buildpack-cflinuxfs3-v1.0.39.zip   cflinuxfs3'
        echo 'go_buildpack       2          true      true     go-buildpack-cflinuxfs3-v1.9.34.zip       cflinuxfs3'
        echo 'java_buildpack     3          true      true     java-buildpack-v4.40.zip                  cflinuxfs3'
        echo 'nodejs_buildpack   4          true      true     nodejs-buildpack-cflinuxfs3-v1.7.57.zip   cflinuxfs3'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf p '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf p -b'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}buildpack          ${reset_color}position   enabled   locked   filename                                  stack"
        assert ${lines[2]} same_as "${fg[yellow]}binary_buildpack   ${reset_color}1          true      true     binary-buildpack-cflinuxfs3-v1.0.39.zip   cflinuxfs3"
        assert ${lines[3]} same_as "${fg[yellow]}go_buildpack       ${reset_color}2          true      true     go-buildpack-cflinuxfs3-v1.9.34.zip       cflinuxfs3"
        assert ${lines[4]} same_as "${fg[yellow]}java_buildpack     ${reset_color}3          true      true     java-buildpack-v4.40.zip                  cflinuxfs3"
        assert ${lines[5]} same_as "${fg[yellow]}nodejs_buildpack   ${reset_color}4          true      true     nodejs-buildpack-cflinuxfs3-v1.7.57.zip   cflinuxfs3"
    }

    prefix=-b
    _fzf_complete_cf 'cf p '
}

@test 'Testing completion: cf p -d **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'domains'

        echo 'Getting domains in org org-01 as user-01...'
        echo 'name                      status   type   details'
        echo 'example.com               shared          '
        echo 'unbound.example.com       shared          '
        echo 'tcp.example.com           shared   tcp    '
        echo 'tcp.unbound.example.com   shared   tcp    '
        echo 'apps.internal             shared          internal'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf p -d '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf p -d '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                      ${reset_color}status   type   details"
        assert ${lines[2]} same_as "${fg[yellow]}example.com               ${reset_color}shared          "
        assert ${lines[3]} same_as "${fg[yellow]}unbound.example.com       ${reset_color}shared          "
        assert ${lines[4]} same_as "${fg[yellow]}tcp.example.com           ${reset_color}shared   tcp    "
        assert ${lines[5]} same_as "${fg[yellow]}tcp.unbound.example.com   ${reset_color}shared   tcp    "
        assert ${lines[6]} same_as "${fg[yellow]}apps.internal             ${reset_color}shared          internal"
    }

    prefix=
    _fzf_complete_cf 'cf p -d '
}

@test 'Testing completion: cf p -d**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'domains'

        echo 'Getting domains in org org-01 as user-01...'
        echo 'name                      status   type   details'
        echo 'example.com               shared          '
        echo 'unbound.example.com       shared          '
        echo 'tcp.example.com           shared   tcp    '
        echo 'tcp.unbound.example.com   shared   tcp    '
        echo 'apps.internal             shared          internal'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf p '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf p -d'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                      ${reset_color}status   type   details"
        assert ${lines[2]} same_as "${fg[yellow]}example.com               ${reset_color}shared          "
        assert ${lines[3]} same_as "${fg[yellow]}unbound.example.com       ${reset_color}shared          "
        assert ${lines[4]} same_as "${fg[yellow]}tcp.example.com           ${reset_color}shared   tcp    "
        assert ${lines[5]} same_as "${fg[yellow]}tcp.unbound.example.com   ${reset_color}shared   tcp    "
        assert ${lines[6]} same_as "${fg[yellow]}apps.internal             ${reset_color}shared          internal"
    }

    prefix=-d
    _fzf_complete_cf 'cf p '
}

@test 'Testing completion: cf p -s **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'stacks'

        echo 'Getting stacks in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name          description'
        echo 'windows2016   Microsoft Windows 2016'
        echo 'cflinuxfs3    Cloud Foundry Linux-based filesystem - Ubuntu Bionic 18.04 LTS'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf p -s '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf p -s '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name          ${reset_color}description"
        assert ${lines[2]} same_as "${fg[yellow]}windows2016   ${reset_color}Microsoft Windows 2016"
        assert ${lines[3]} same_as "${fg[yellow]}cflinuxfs3    ${reset_color}Cloud Foundry Linux-based filesystem - Ubuntu Bionic 18.04 LTS"
    }

    prefix=
    _fzf_complete_cf 'cf p -s '
}

@test 'Testing completion: cf p -s**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'stacks'

        echo 'Getting stacks in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name          description'
        echo 'windows2016   Microsoft Windows 2016'
        echo 'cflinuxfs3    Cloud Foundry Linux-based filesystem - Ubuntu Bionic 18.04 LTS'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf p '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf p -s'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name          ${reset_color}description"
        assert ${lines[2]} same_as "${fg[yellow]}windows2016   ${reset_color}Microsoft Windows 2016"
        assert ${lines[3]} same_as "${fg[yellow]}cflinuxfs3    ${reset_color}Cloud Foundry Linux-based filesystem - Ubuntu Bionic 18.04 LTS"
    }

    prefix=-s
    _fzf_complete_cf 'cf p '
}

@test 'Testing completion: cf p app-01 **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf p app-01 '

        echo 'cf'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    _fzf_path_completion() {
        assert $# equals 2
        assert $1 same_as ''
        assert $2 same_as 'cf p app-01 '

        assert __fzf_extract_command mock_times 1
    }

    prefix=
    _fzf_complete_cf 'cf p app-01 '
}

@test 'Testing completion: cf push **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf push '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf push '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf push '
}

@test 'Testing completion: cf push -b **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'buildpacks'

        echo 'Getting buildpacks...'
        echo ''
        echo 'buildpack          position   enabled   locked   filename                                  stack'
        echo 'binary_buildpack   1          true      true     binary-buildpack-cflinuxfs3-v1.0.39.zip   cflinuxfs3'
        echo 'go_buildpack       2          true      true     go-buildpack-cflinuxfs3-v1.9.34.zip       cflinuxfs3'
        echo 'java_buildpack     3          true      true     java-buildpack-v4.40.zip                  cflinuxfs3'
        echo 'nodejs_buildpack   4          true      true     nodejs-buildpack-cflinuxfs3-v1.7.57.zip   cflinuxfs3'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf push -b '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf push -b '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}buildpack          ${reset_color}position   enabled   locked   filename                                  stack"
        assert ${lines[2]} same_as "${fg[yellow]}binary_buildpack   ${reset_color}1          true      true     binary-buildpack-cflinuxfs3-v1.0.39.zip   cflinuxfs3"
        assert ${lines[3]} same_as "${fg[yellow]}go_buildpack       ${reset_color}2          true      true     go-buildpack-cflinuxfs3-v1.9.34.zip       cflinuxfs3"
        assert ${lines[4]} same_as "${fg[yellow]}java_buildpack     ${reset_color}3          true      true     java-buildpack-v4.40.zip                  cflinuxfs3"
        assert ${lines[5]} same_as "${fg[yellow]}nodejs_buildpack   ${reset_color}4          true      true     nodejs-buildpack-cflinuxfs3-v1.7.57.zip   cflinuxfs3"
    }

    prefix=
    _fzf_complete_cf 'cf push -b '
}

@test 'Testing completion: cf push -b**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'buildpacks'

        echo 'Getting buildpacks...'
        echo ''
        echo 'buildpack          position   enabled   locked   filename                                  stack'
        echo 'binary_buildpack   1          true      true     binary-buildpack-cflinuxfs3-v1.0.39.zip   cflinuxfs3'
        echo 'go_buildpack       2          true      true     go-buildpack-cflinuxfs3-v1.9.34.zip       cflinuxfs3'
        echo 'java_buildpack     3          true      true     java-buildpack-v4.40.zip                  cflinuxfs3'
        echo 'nodejs_buildpack   4          true      true     nodejs-buildpack-cflinuxfs3-v1.7.57.zip   cflinuxfs3'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf push '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf push -b'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}buildpack          ${reset_color}position   enabled   locked   filename                                  stack"
        assert ${lines[2]} same_as "${fg[yellow]}binary_buildpack   ${reset_color}1          true      true     binary-buildpack-cflinuxfs3-v1.0.39.zip   cflinuxfs3"
        assert ${lines[3]} same_as "${fg[yellow]}go_buildpack       ${reset_color}2          true      true     go-buildpack-cflinuxfs3-v1.9.34.zip       cflinuxfs3"
        assert ${lines[4]} same_as "${fg[yellow]}java_buildpack     ${reset_color}3          true      true     java-buildpack-v4.40.zip                  cflinuxfs3"
        assert ${lines[5]} same_as "${fg[yellow]}nodejs_buildpack   ${reset_color}4          true      true     nodejs-buildpack-cflinuxfs3-v1.7.57.zip   cflinuxfs3"
    }

    prefix=-b
    _fzf_complete_cf 'cf push '
}

@test 'Testing completion: cf push -d **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'domains'

        echo 'Getting domains in org org-01 as user-01...'
        echo 'name                      status   type   details'
        echo 'example.com               shared          '
        echo 'unbound.example.com       shared          '
        echo 'tcp.example.com           shared   tcp    '
        echo 'tcp.unbound.example.com   shared   tcp    '
        echo 'apps.internal             shared          internal'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf push -d '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf push -d '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                      ${reset_color}status   type   details"
        assert ${lines[2]} same_as "${fg[yellow]}example.com               ${reset_color}shared          "
        assert ${lines[3]} same_as "${fg[yellow]}unbound.example.com       ${reset_color}shared          "
        assert ${lines[4]} same_as "${fg[yellow]}tcp.example.com           ${reset_color}shared   tcp    "
        assert ${lines[5]} same_as "${fg[yellow]}tcp.unbound.example.com   ${reset_color}shared   tcp    "
        assert ${lines[6]} same_as "${fg[yellow]}apps.internal             ${reset_color}shared          internal"
    }

    prefix=
    _fzf_complete_cf 'cf push -d '
}

@test 'Testing completion: cf push -d**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'domains'

        echo 'Getting domains in org org-01 as user-01...'
        echo 'name                      status   type   details'
        echo 'example.com               shared          '
        echo 'unbound.example.com       shared          '
        echo 'tcp.example.com           shared   tcp    '
        echo 'tcp.unbound.example.com   shared   tcp    '
        echo 'apps.internal             shared          internal'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf push '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf push -d'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                      ${reset_color}status   type   details"
        assert ${lines[2]} same_as "${fg[yellow]}example.com               ${reset_color}shared          "
        assert ${lines[3]} same_as "${fg[yellow]}unbound.example.com       ${reset_color}shared          "
        assert ${lines[4]} same_as "${fg[yellow]}tcp.example.com           ${reset_color}shared   tcp    "
        assert ${lines[5]} same_as "${fg[yellow]}tcp.unbound.example.com   ${reset_color}shared   tcp    "
        assert ${lines[6]} same_as "${fg[yellow]}apps.internal             ${reset_color}shared          internal"
    }

    prefix=-d
    _fzf_complete_cf 'cf push '
}

@test 'Testing completion: cf push -s **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'stacks'

        echo 'Getting stacks in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name          description'
        echo 'windows2016   Microsoft Windows 2016'
        echo 'cflinuxfs3    Cloud Foundry Linux-based filesystem - Ubuntu Bionic 18.04 LTS'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf push -s '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf push -s '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name          ${reset_color}description"
        assert ${lines[2]} same_as "${fg[yellow]}windows2016   ${reset_color}Microsoft Windows 2016"
        assert ${lines[3]} same_as "${fg[yellow]}cflinuxfs3    ${reset_color}Cloud Foundry Linux-based filesystem - Ubuntu Bionic 18.04 LTS"
    }

    prefix=
    _fzf_complete_cf 'cf push -s '
}

@test 'Testing completion: cf push -s**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'stacks'

        echo 'Getting stacks in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name          description'
        echo 'windows2016   Microsoft Windows 2016'
        echo 'cflinuxfs3    Cloud Foundry Linux-based filesystem - Ubuntu Bionic 18.04 LTS'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf push '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf push -s'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name          ${reset_color}description"
        assert ${lines[2]} same_as "${fg[yellow]}windows2016   ${reset_color}Microsoft Windows 2016"
        assert ${lines[3]} same_as "${fg[yellow]}cflinuxfs3    ${reset_color}Cloud Foundry Linux-based filesystem - Ubuntu Bionic 18.04 LTS"
    }

    prefix=-s
    _fzf_complete_cf 'cf push '
}

@test 'Testing completion: cf push app-01 **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf push app-01 '

        echo 'cf'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    _fzf_path_completion() {
        assert $# equals 2
        assert $1 same_as ''
        assert $2 same_as 'cf push app-01 '

        assert __fzf_extract_command mock_times 1
    }

    prefix=
    _fzf_complete_cf 'cf push app-01 '
}

@test 'Testing completion: cf restart-app-instance **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf restart-app-instance '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf restart-app-instance '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf restart-app-instance '
}

@test 'Testing completion: cf restart-app-instance app-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 2
        assert $1 same_as 'app'
        assert $2 same_as 'app-01'

        echo 'Showing health and status for app app-01 in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name:              app-01'
        echo 'requested state:   started'
        echo 'routes:            app-01.example.com'
        echo 'last uploaded:     Sat 01 Jan 09:00:00 JST 2021'
        echo 'stack:             cflinuxfs3'
        echo 'buildpacks:        go'
        echo ''
        echo 'type:           web'
        echo 'instances:      3/3'
        echo 'memory usage:   1024M'
        echo '     state     since                  cpu    memory         disk           details'
        echo '#0   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
        echo '#1   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
        echo '#2   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf restart-app-instance app-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf restart-app-instance app-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}     ${reset_color}state     since                  cpu    memory         disk           details"
        assert ${lines[2]} same_as "${fg[yellow]}#0   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
        assert ${lines[3]} same_as "${fg[yellow]}#1   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
        assert ${lines[4]} same_as "${fg[yellow]}#2   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
    }

    prefix=
    _fzf_complete_cf 'cf restart-app-instance app-01 '
}

@test 'Testing completion: cf v3-restart-app-instance **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf v3-restart-app-instance '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf v3-restart-app-instance '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf v3-restart-app-instance '
}

@test 'Testing completion: cf v3-restart-app-instance app-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 2
        assert $1 same_as 'app'
        assert $2 same_as 'app-01'

        echo 'Showing health and status for app app-01 in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name:              app-01'
        echo 'requested state:   started'
        echo 'routes:            app-01.example.com'
        echo 'last uploaded:     Sat 01 Jan 09:00:00 JST 2021'
        echo 'stack:             cflinuxfs3'
        echo 'buildpacks:        go'
        echo ''
        echo 'type:           web'
        echo 'instances:      3/3'
        echo 'memory usage:   1024M'
        echo '     state     since                  cpu    memory         disk           details'
        echo '#0   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
        echo '#1   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
        echo '#2   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf v3-restart-app-instance app-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf v3-restart-app-instance app-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}     ${reset_color}state     since                  cpu    memory         disk           details"
        assert ${lines[2]} same_as "${fg[yellow]}#0   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
        assert ${lines[3]} same_as "${fg[yellow]}#1   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
        assert ${lines[4]} same_as "${fg[yellow]}#2   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
    }

    prefix=
    _fzf_complete_cf 'cf v3-restart-app-instance app-01 '
}

@test 'Testing completion: cf rt **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf rt '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf rt '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf rt '
}

@test 'Testing completion: cf run-task **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf run-task '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf run-task '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf run-task '
}

@test 'Testing completion: cf se **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf se '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf se '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf se '
}

@test 'Testing completion: cf se app-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'app'
        assert $2 same_as '--guid'
        assert $3 same_as 'app-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/apps/00000000-0000-0000-0000-000000000000/env'

        echo '{
           "staging_env_json": {},
           "running_env_json": {},
           "environment_json": {
              "key-01": "value-01",
              "key-02": "value-02",
              "key-03": "value-03"
           },
           "system_env_json": {
              "VCAP_SERVICES": {}
           },
           "application_env_json": {
              "VCAP_APPLICATION": {
                 "cf_api": "https://api.example.com",
                 "limits": {
                    "fds": 16384,
                    "mem": 128,
                    "disk": 1024
                 },
                 "application_name": "app-01",
                 "application_uris": [
                    "app-01.example.com"
                 ],
                 "name": "app-01",
                 "space_name": "space-01",
                 "space_id": "00000000-0000-0000-0000-000000000000",
                 "organization_id": "00000000-0000-0000-0000-000000000000",
                 "organization_name": "org-01",
                 "uris": [
                    "app-01.example.com"
                 ],
                 "users": null,
                 "process_id": "00000000-0000-0000-0000-000000000000",
                 "process_type": "web",
                 "application_id": "00000000-0000-0000-0000-000000000000",
                 "version": "00000000-0000-0000-0000-000000000000",
                 "application_version": "00000000-0000-0000-0000-000000000000"
              }
           }
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf se app-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf se app-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 3
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name  ${reset_color}  value"
        assert ${lines[2]} same_as "${fg[yellow]}key-01${reset_color}  value-01"
        assert ${lines[3]} same_as "${fg[yellow]}key-02${reset_color}  value-02"
        assert ${lines[4]} same_as "${fg[yellow]}key-03${reset_color}  value-03"
    }

    prefix=
    _fzf_complete_cf 'cf se app-01 '
}

@test 'Testing completion: cf set-env **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf set-env '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf set-env '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf set-env '
}

@test 'Testing completion: cf set-env app-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'app'
        assert $2 same_as '--guid'
        assert $3 same_as 'app-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/apps/00000000-0000-0000-0000-000000000000/env'

        echo '{
           "staging_env_json": {},
           "running_env_json": {},
           "environment_json": {
              "key-01": "value-01",
              "key-02": "value-02",
              "key-03": "value-03"
           },
           "system_env_json": {
              "VCAP_SERVICES": {}
           },
           "application_env_json": {
              "VCAP_APPLICATION": {
                 "cf_api": "https://api.example.com",
                 "limits": {
                    "fds": 16384,
                    "mem": 128,
                    "disk": 1024
                 },
                 "application_name": "app-01",
                 "application_uris": [
                    "app-01.example.com"
                 ],
                 "name": "app-01",
                 "space_name": "space-01",
                 "space_id": "00000000-0000-0000-0000-000000000000",
                 "organization_id": "00000000-0000-0000-0000-000000000000",
                 "organization_name": "org-01",
                 "uris": [
                    "app-01.example.com"
                 ],
                 "users": null,
                 "process_id": "00000000-0000-0000-0000-000000000000",
                 "process_type": "web",
                 "application_id": "00000000-0000-0000-0000-000000000000",
                 "version": "00000000-0000-0000-0000-000000000000",
                 "application_version": "00000000-0000-0000-0000-000000000000"
              }
           }
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf set-env app-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf set-env app-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 3
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name  ${reset_color}  value"
        assert ${lines[2]} same_as "${fg[yellow]}key-01${reset_color}  value-01"
        assert ${lines[3]} same_as "${fg[yellow]}key-02${reset_color}  value-02"
        assert ${lines[4]} same_as "${fg[yellow]}key-03${reset_color}  value-03"
    }

    prefix=
    _fzf_complete_cf 'cf set-env app-01 '
}

@test 'Testing completion: cf ue **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf ue '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf ue '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf ue '
}

@test 'Testing completion: cf ue app-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'app'
        assert $2 same_as '--guid'
        assert $3 same_as 'app-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/apps/00000000-0000-0000-0000-000000000000/env'

        echo '{
           "staging_env_json": {},
           "running_env_json": {},
           "environment_json": {
              "key-01": "value-01",
              "key-02": "value-02",
              "key-03": "value-03"
           },
           "system_env_json": {
              "VCAP_SERVICES": {}
           },
           "application_env_json": {
              "VCAP_APPLICATION": {
                 "cf_api": "https://api.example.com",
                 "limits": {
                    "fds": 16384,
                    "mem": 128,
                    "disk": 1024
                 },
                 "application_name": "app-01",
                 "application_uris": [
                    "app-01.example.com"
                 ],
                 "name": "app-01",
                 "space_name": "space-01",
                 "space_id": "00000000-0000-0000-0000-000000000000",
                 "organization_id": "00000000-0000-0000-0000-000000000000",
                 "organization_name": "org-01",
                 "uris": [
                    "app-01.example.com"
                 ],
                 "users": null,
                 "process_id": "00000000-0000-0000-0000-000000000000",
                 "process_type": "web",
                 "application_id": "00000000-0000-0000-0000-000000000000",
                 "version": "00000000-0000-0000-0000-000000000000",
                 "application_version": "00000000-0000-0000-0000-000000000000"
              }
           }
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf ue app-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf ue app-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 3
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name  ${reset_color}  value"
        assert ${lines[2]} same_as "${fg[yellow]}key-01${reset_color}  value-01"
        assert ${lines[3]} same_as "${fg[yellow]}key-02${reset_color}  value-02"
        assert ${lines[4]} same_as "${fg[yellow]}key-03${reset_color}  value-03"
    }

    prefix=
    _fzf_complete_cf 'cf ue app-01 '
}

@test 'Testing completion: cf unset-env **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf unset-env '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf unset-env '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf unset-env '
}

@test 'Testing completion: cf unset-env app-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'app'
        assert $2 same_as '--guid'
        assert $3 same_as 'app-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/apps/00000000-0000-0000-0000-000000000000/env'

        echo '{
           "staging_env_json": {},
           "running_env_json": {},
           "environment_json": {
              "key-01": "value-01",
              "key-02": "value-02",
              "key-03": "value-03"
           },
           "system_env_json": {
              "VCAP_SERVICES": {}
           },
           "application_env_json": {
              "VCAP_APPLICATION": {
                 "cf_api": "https://api.example.com",
                 "limits": {
                    "fds": 16384,
                    "mem": 128,
                    "disk": 1024
                 },
                 "application_name": "app-01",
                 "application_uris": [
                    "app-01.example.com"
                 ],
                 "name": "app-01",
                 "space_name": "space-01",
                 "space_id": "00000000-0000-0000-0000-000000000000",
                 "organization_id": "00000000-0000-0000-0000-000000000000",
                 "organization_name": "org-01",
                 "uris": [
                    "app-01.example.com"
                 ],
                 "users": null,
                 "process_id": "00000000-0000-0000-0000-000000000000",
                 "process_type": "web",
                 "application_id": "00000000-0000-0000-0000-000000000000",
                 "version": "00000000-0000-0000-0000-000000000000",
                 "application_version": "00000000-0000-0000-0000-000000000000"
              }
           }
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf unset-env app-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf unset-env app-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 3
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name  ${reset_color}  value"
        assert ${lines[2]} same_as "${fg[yellow]}key-01${reset_color}  value-01"
        assert ${lines[3]} same_as "${fg[yellow]}key-02${reset_color}  value-02"
        assert ${lines[4]} same_as "${fg[yellow]}key-03${reset_color}  value-03"
    }

    prefix=
    _fzf_complete_cf 'cf unset-env app-01 '
}

@test 'Testing completion: cf v3-set-env **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf v3-set-env '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf v3-set-env '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf v3-set-env '
}

@test 'Testing completion: cf v3-set-env app-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'app'
        assert $2 same_as '--guid'
        assert $3 same_as 'app-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/apps/00000000-0000-0000-0000-000000000000/env'

        echo '{
           "staging_env_json": {},
           "running_env_json": {},
           "environment_json": {
              "key-01": "value-01",
              "key-02": "value-02",
              "key-03": "value-03"
           },
           "system_env_json": {
              "VCAP_SERVICES": {}
           },
           "application_env_json": {
              "VCAP_APPLICATION": {
                 "cf_api": "https://api.example.com",
                 "limits": {
                    "fds": 16384,
                    "mem": 128,
                    "disk": 1024
                 },
                 "application_name": "app-01",
                 "application_uris": [
                    "app-01.example.com"
                 ],
                 "name": "app-01",
                 "space_name": "space-01",
                 "space_id": "00000000-0000-0000-0000-000000000000",
                 "organization_id": "00000000-0000-0000-0000-000000000000",
                 "organization_name": "org-01",
                 "uris": [
                    "app-01.example.com"
                 ],
                 "users": null,
                 "process_id": "00000000-0000-0000-0000-000000000000",
                 "process_type": "web",
                 "application_id": "00000000-0000-0000-0000-000000000000",
                 "version": "00000000-0000-0000-0000-000000000000",
                 "application_version": "00000000-0000-0000-0000-000000000000"
              }
           }
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf v3-set-env app-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf v3-set-env app-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 3
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name  ${reset_color}  value"
        assert ${lines[2]} same_as "${fg[yellow]}key-01${reset_color}  value-01"
        assert ${lines[3]} same_as "${fg[yellow]}key-02${reset_color}  value-02"
        assert ${lines[4]} same_as "${fg[yellow]}key-03${reset_color}  value-03"
    }

    prefix=
    _fzf_complete_cf 'cf v3-set-env app-01 '
}

@test 'Testing completion: cf v3-unset-env **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf v3-unset-env '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf v3-unset-env '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf v3-unset-env '
}

@test 'Testing completion: cf v3-unset-env app-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'app'
        assert $2 same_as '--guid'
        assert $3 same_as 'app-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/apps/00000000-0000-0000-0000-000000000000/env'

        echo '{
           "staging_env_json": {},
           "running_env_json": {},
           "environment_json": {
              "key-01": "value-01",
              "key-02": "value-02",
              "key-03": "value-03"
           },
           "system_env_json": {
              "VCAP_SERVICES": {}
           },
           "application_env_json": {
              "VCAP_APPLICATION": {
                 "cf_api": "https://api.example.com",
                 "limits": {
                    "fds": 16384,
                    "mem": 128,
                    "disk": 1024
                 },
                 "application_name": "app-01",
                 "application_uris": [
                    "app-01.example.com"
                 ],
                 "name": "app-01",
                 "space_name": "space-01",
                 "space_id": "00000000-0000-0000-0000-000000000000",
                 "organization_id": "00000000-0000-0000-0000-000000000000",
                 "organization_name": "org-01",
                 "uris": [
                    "app-01.example.com"
                 ],
                 "users": null,
                 "process_id": "00000000-0000-0000-0000-000000000000",
                 "process_type": "web",
                 "application_id": "00000000-0000-0000-0000-000000000000",
                 "version": "00000000-0000-0000-0000-000000000000",
                 "application_version": "00000000-0000-0000-0000-000000000000"
              }
           }
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf v3-unset-env app-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf v3-unset-env app-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 3
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name  ${reset_color}  value"
        assert ${lines[2]} same_as "${fg[yellow]}key-01${reset_color}  value-01"
        assert ${lines[3]} same_as "${fg[yellow]}key-02${reset_color}  value-02"
        assert ${lines[4]} same_as "${fg[yellow]}key-03${reset_color}  value-03"
    }

    prefix=
    _fzf_complete_cf 'cf v3-unset-env app-01 '
}

@test 'Testing completion: cf scale **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf scale '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf scale '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf scale '
}

@test 'Testing completion: cf v3-scale **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf v3-scale '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf v3-scale '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf v3-scale '
}

@test 'Testing completion: cf set-health-check **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf set-health-check '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf set-health-check '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf set-health-check '
}

@test 'Testing completion: cf v3-set-health-check **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf v3-set-health-check '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf v3-set-health-check '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf v3-set-health-check '
}

@test 'Testing completion: cf ssh **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf ssh '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf ssh '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf ssh '
}

@test 'Testing completion: cf ssh app-01 --app-instance-index=**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 2
        assert $1 same_as 'app'
        assert $2 same_as 'app-01'

        echo 'Showing health and status for app app-01 in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name:              app-01'
        echo 'requested state:   started'
        echo 'routes:            app-01.example.com'
        echo 'last uploaded:     Sat 01 Jan 09:00:00 JST 2021'
        echo 'stack:             cflinuxfs3'
        echo 'buildpacks:        go'
        echo ''
        echo 'type:           web'
        echo 'instances:      3/3'
        echo 'memory usage:   1024M'
        echo '     state     since                  cpu    memory         disk           details'
        echo '#0   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
        echo '#1   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
        echo '#2   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf ssh app-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf ssh app-01 --app-instance-index='

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}     ${reset_color}state     since                  cpu    memory         disk           details"
        assert ${lines[2]} same_as "${fg[yellow]}#0   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
        assert ${lines[3]} same_as "${fg[yellow]}#1   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
        assert ${lines[4]} same_as "${fg[yellow]}#2   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
    }

    prefix=--app-instance-index=
    _fzf_complete_cf 'cf ssh app-01 '
}

@test 'Testing completion: cf ssh app-01 --app-instance-index **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 2
        assert $1 same_as 'app'
        assert $2 same_as 'app-01'

        echo 'Showing health and status for app app-01 in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name:              app-01'
        echo 'requested state:   started'
        echo 'routes:            app-01.example.com'
        echo 'last uploaded:     Sat 01 Jan 09:00:00 JST 2021'
        echo 'stack:             cflinuxfs3'
        echo 'buildpacks:        go'
        echo ''
        echo 'type:           web'
        echo 'instances:      3/3'
        echo 'memory usage:   1024M'
        echo '     state     since                  cpu    memory         disk           details'
        echo '#0   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
        echo '#1   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
        echo '#2   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf ssh app-01 --app-instance-index '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf ssh app-01 --app-instance-index '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}     ${reset_color}state     since                  cpu    memory         disk           details"
        assert ${lines[2]} same_as "${fg[yellow]}#0   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
        assert ${lines[3]} same_as "${fg[yellow]}#1   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
        assert ${lines[4]} same_as "${fg[yellow]}#2   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
    }

    prefix=
    _fzf_complete_cf 'cf ssh app-01 --app-instance-index '
}

@test 'Testing completion: cf ssh app-01 -i **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 2
        assert $1 same_as 'app'
        assert $2 same_as 'app-01'

        echo 'Showing health and status for app app-01 in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name:              app-01'
        echo 'requested state:   started'
        echo 'routes:            app-01.example.com'
        echo 'last uploaded:     Sat 01 Jan 09:00:00 JST 2021'
        echo 'stack:             cflinuxfs3'
        echo 'buildpacks:        go'
        echo ''
        echo 'type:           web'
        echo 'instances:      3/3'
        echo 'memory usage:   1024M'
        echo '     state     since                  cpu    memory         disk           details'
        echo '#0   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
        echo '#1   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
        echo '#2   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf ssh app-01 -i '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf ssh app-01 -i '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}     ${reset_color}state     since                  cpu    memory         disk           details"
        assert ${lines[2]} same_as "${fg[yellow]}#0   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
        assert ${lines[3]} same_as "${fg[yellow]}#1   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
        assert ${lines[4]} same_as "${fg[yellow]}#2   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
    }

    prefix=
    _fzf_complete_cf 'cf ssh app-01 -i '
}

@test 'Testing completion: cf ssh app-01 -i**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 2
        assert $1 same_as 'app'
        assert $2 same_as 'app-01'

        echo 'Showing health and status for app app-01 in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name:              app-01'
        echo 'requested state:   started'
        echo 'routes:            app-01.example.com'
        echo 'last uploaded:     Sat 01 Jan 09:00:00 JST 2021'
        echo 'stack:             cflinuxfs3'
        echo 'buildpacks:        go'
        echo ''
        echo 'type:           web'
        echo 'instances:      3/3'
        echo 'memory usage:   1024M'
        echo '     state     since                  cpu    memory         disk           details'
        echo '#0   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
        echo '#1   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
        echo '#2   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf ssh app-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf ssh app-01 -i'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}     ${reset_color}state     since                  cpu    memory         disk           details"
        assert ${lines[2]} same_as "${fg[yellow]}#0   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
        assert ${lines[3]} same_as "${fg[yellow]}#1   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
        assert ${lines[4]} same_as "${fg[yellow]}#2   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
    }

    prefix=-i
    _fzf_complete_cf 'cf ssh app-01 '
}

@test 'Testing completion: cf v3-ssh **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf v3-ssh '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf v3-ssh '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf v3-ssh '
}

@test 'Testing completion: cf v3-ssh app-01 --app-instance-index=**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 2
        assert $1 same_as 'app'
        assert $2 same_as 'app-01'

        echo 'Showing health and status for app app-01 in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name:              app-01'
        echo 'requested state:   started'
        echo 'routes:            app-01.example.com'
        echo 'last uploaded:     Sat 01 Jan 09:00:00 JST 2021'
        echo 'stack:             cflinuxfs3'
        echo 'buildpacks:        go'
        echo ''
        echo 'type:           web'
        echo 'instances:      3/3'
        echo 'memory usage:   1024M'
        echo '     state     since                  cpu    memory         disk           details'
        echo '#0   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
        echo '#1   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
        echo '#2   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf v3-ssh app-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf v3-ssh app-01 --app-instance-index='

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}     ${reset_color}state     since                  cpu    memory         disk           details"
        assert ${lines[2]} same_as "${fg[yellow]}#0   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
        assert ${lines[3]} same_as "${fg[yellow]}#1   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
        assert ${lines[4]} same_as "${fg[yellow]}#2   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
    }

    prefix=--app-instance-index=
    _fzf_complete_cf 'cf v3-ssh app-01 '
}

@test 'Testing completion: cf v3-ssh app-01 --app-instance-index **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 2
        assert $1 same_as 'app'
        assert $2 same_as 'app-01'

        echo 'Showing health and status for app app-01 in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name:              app-01'
        echo 'requested state:   started'
        echo 'routes:            app-01.example.com'
        echo 'last uploaded:     Sat 01 Jan 09:00:00 JST 2021'
        echo 'stack:             cflinuxfs3'
        echo 'buildpacks:        go'
        echo ''
        echo 'type:           web'
        echo 'instances:      3/3'
        echo 'memory usage:   1024M'
        echo '     state     since                  cpu    memory         disk           details'
        echo '#0   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
        echo '#1   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
        echo '#2   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf v3-ssh app-01 --app-instance-index '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf v3-ssh app-01 --app-instance-index '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}     ${reset_color}state     since                  cpu    memory         disk           details"
        assert ${lines[2]} same_as "${fg[yellow]}#0   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
        assert ${lines[3]} same_as "${fg[yellow]}#1   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
        assert ${lines[4]} same_as "${fg[yellow]}#2   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
    }

    prefix=
    _fzf_complete_cf 'cf v3-ssh app-01 --app-instance-index '
}

@test 'Testing completion: cf v3-ssh app-01 -i **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 2
        assert $1 same_as 'app'
        assert $2 same_as 'app-01'

        echo 'Showing health and status for app app-01 in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name:              app-01'
        echo 'requested state:   started'
        echo 'routes:            app-01.example.com'
        echo 'last uploaded:     Sat 01 Jan 09:00:00 JST 2021'
        echo 'stack:             cflinuxfs3'
        echo 'buildpacks:        go'
        echo ''
        echo 'type:           web'
        echo 'instances:      3/3'
        echo 'memory usage:   1024M'
        echo '     state     since                  cpu    memory         disk           details'
        echo '#0   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
        echo '#1   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
        echo '#2   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf v3-ssh app-01 -i '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf v3-ssh app-01 -i '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}     ${reset_color}state     since                  cpu    memory         disk           details"
        assert ${lines[2]} same_as "${fg[yellow]}#0   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
        assert ${lines[3]} same_as "${fg[yellow]}#1   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
        assert ${lines[4]} same_as "${fg[yellow]}#2   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
    }

    prefix=
    _fzf_complete_cf 'cf v3-ssh app-01 -i '
}

@test 'Testing completion: cf v3-ssh app-01 -i**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 2
        assert $1 same_as 'app'
        assert $2 same_as 'app-01'

        echo 'Showing health and status for app app-01 in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name:              app-01'
        echo 'requested state:   started'
        echo 'routes:            app-01.example.com'
        echo 'last uploaded:     Sat 01 Jan 09:00:00 JST 2021'
        echo 'stack:             cflinuxfs3'
        echo 'buildpacks:        go'
        echo ''
        echo 'type:           web'
        echo 'instances:      3/3'
        echo 'memory usage:   1024M'
        echo '     state     since                  cpu    memory         disk           details'
        echo '#0   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
        echo '#1   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
        echo '#2   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf v3-ssh app-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf v3-ssh app-01 -i'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}     ${reset_color}state     since                  cpu    memory         disk           details"
        assert ${lines[2]} same_as "${fg[yellow]}#0   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
        assert ${lines[3]} same_as "${fg[yellow]}#1   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
        assert ${lines[4]} same_as "${fg[yellow]}#2   ${reset_color}running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   "
    }

    prefix=-i
    _fzf_complete_cf 'cf v3-ssh app-01 '
}

@test 'Testing completion: cf v3-create-package **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf v3-create-package '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf v3-create-package '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf v3-create-package '
}

@test 'Testing completion: cf v3-create-package -p **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf v3-create-package -p '

        echo 'cf'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'cf v3-create-package -p '
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=
    _fzf_complete_cf 'cf v3-create-package -p '

    assert __fzf_extract_command mock_times 1
}

@test 'Testing completion: cf v3-create-package -p**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf v3-create-package '

        echo 'cf'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'cf v3-create-package -p'
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=-p
    _fzf_complete_cf 'cf v3-create-package '

    assert __fzf_extract_command mock_times 1
}

@test 'Testing completion: cf v3-set-droplet **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf v3-set-droplet '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf v3-set-droplet '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf v3-set-droplet '
}

@test 'Testing completion: cf v3-delete **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf v3-delete '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf v3-delete '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf v3-delete '
}

@test 'Testing completion: cf create-buildpack buildpack-01 **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf create-buildpack buildpack-01 '

        echo 'cf'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    _fzf_path_completion() {
        assert $# equals 2
        assert $1 same_as ''
        assert $2 same_as 'cf create-buildpack buildpack-01 '

        assert __fzf_extract_command mock_times 1
    }

    prefix=
    _fzf_complete_cf 'cf create-buildpack buildpack-01 '
}

@test 'Testing completion: cf create-buildpack buildpack-01 /path/to/buildpack **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'buildpacks'

        echo 'Getting buildpacks...'
        echo ''
        echo 'buildpack          position   enabled   locked   filename                                  stack'
        echo 'binary_buildpack   1          true      true     binary-buildpack-cflinuxfs3-v1.0.39.zip   cflinuxfs3'
        echo 'go_buildpack       2          true      true     go-buildpack-cflinuxfs3-v1.9.34.zip       cflinuxfs3'
        echo 'java_buildpack     3          true      true     java-buildpack-v4.40.zip                  cflinuxfs3'
        echo 'nodejs_buildpack   4          true      true     nodejs-buildpack-cflinuxfs3-v1.7.57.zip   cflinuxfs3'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf create-buildpack buildpack-01 /path/to/buildpack '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf create-buildpack buildpack-01 /path/to/buildpack '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}buildpack          ${reset_color}position   enabled   locked   filename                                  stack"
        assert ${lines[2]} same_as "${fg[yellow]}binary_buildpack   ${reset_color}1          true      true     binary-buildpack-cflinuxfs3-v1.0.39.zip   cflinuxfs3"
        assert ${lines[3]} same_as "${fg[yellow]}go_buildpack       ${reset_color}2          true      true     go-buildpack-cflinuxfs3-v1.9.34.zip       cflinuxfs3"
        assert ${lines[4]} same_as "${fg[yellow]}java_buildpack     ${reset_color}3          true      true     java-buildpack-v4.40.zip                  cflinuxfs3"
        assert ${lines[5]} same_as "${fg[yellow]}nodejs_buildpack   ${reset_color}4          true      true     nodejs-buildpack-cflinuxfs3-v1.7.57.zip   cflinuxfs3"
        assert $resource_column same_as 1
    }

    prefix=
    _fzf_complete_cf 'cf create-buildpack buildpack-01 /path/to/buildpack '
}

@test 'Testing completion: cf delete-buildpack **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'buildpacks'

        echo 'Getting buildpacks...'
        echo ''
        echo 'buildpack          position   enabled   locked   filename                                  stack'
        echo 'binary_buildpack   1          true      true     binary-buildpack-cflinuxfs3-v1.0.39.zip   cflinuxfs3'
        echo 'go_buildpack       2          true      true     go-buildpack-cflinuxfs3-v1.9.34.zip       cflinuxfs3'
        echo 'java_buildpack     3          true      true     java-buildpack-v4.40.zip                  cflinuxfs3'
        echo 'nodejs_buildpack   4          true      true     nodejs-buildpack-cflinuxfs3-v1.7.57.zip   cflinuxfs3'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf delete-buildpack '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf delete-buildpack '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}buildpack          ${reset_color}position   enabled   locked   filename                                  stack"
        assert ${lines[2]} same_as "${fg[yellow]}binary_buildpack   ${reset_color}1          true      true     binary-buildpack-cflinuxfs3-v1.0.39.zip   cflinuxfs3"
        assert ${lines[3]} same_as "${fg[yellow]}go_buildpack       ${reset_color}2          true      true     go-buildpack-cflinuxfs3-v1.9.34.zip       cflinuxfs3"
        assert ${lines[4]} same_as "${fg[yellow]}java_buildpack     ${reset_color}3          true      true     java-buildpack-v4.40.zip                  cflinuxfs3"
        assert ${lines[5]} same_as "${fg[yellow]}nodejs_buildpack   ${reset_color}4          true      true     nodejs-buildpack-cflinuxfs3-v1.7.57.zip   cflinuxfs3"
    }

    prefix=
    _fzf_complete_cf 'cf delete-buildpack '
}

@test 'Testing completion: cf delete-buildpack -s **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'stacks'

        echo 'Getting stacks in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name          description'
        echo 'windows2016   Microsoft Windows 2016'
        echo 'cflinuxfs3    Cloud Foundry Linux-based filesystem - Ubuntu Bionic 18.04 LTS'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf delete-buildpack -s '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf delete-buildpack -s '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name          ${reset_color}description"
        assert ${lines[2]} same_as "${fg[yellow]}windows2016   ${reset_color}Microsoft Windows 2016"
        assert ${lines[3]} same_as "${fg[yellow]}cflinuxfs3    ${reset_color}Cloud Foundry Linux-based filesystem - Ubuntu Bionic 18.04 LTS"
    }

    prefix=
    _fzf_complete_cf 'cf delete-buildpack -s '
}

@test 'Testing completion: cf delete-buildpack -s**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'stacks'

        echo 'Getting stacks in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name          description'
        echo 'windows2016   Microsoft Windows 2016'
        echo 'cflinuxfs3    Cloud Foundry Linux-based filesystem - Ubuntu Bionic 18.04 LTS'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf delete-buildpack '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf delete-buildpack -s'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name          ${reset_color}description"
        assert ${lines[2]} same_as "${fg[yellow]}windows2016   ${reset_color}Microsoft Windows 2016"
        assert ${lines[3]} same_as "${fg[yellow]}cflinuxfs3    ${reset_color}Cloud Foundry Linux-based filesystem - Ubuntu Bionic 18.04 LTS"
    }

    prefix=-s
    _fzf_complete_cf 'cf delete-buildpack '
}

@test 'Testing completion: cf rename-buildpack **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'buildpacks'

        echo 'Getting buildpacks...'
        echo ''
        echo 'buildpack          position   enabled   locked   filename                                  stack'
        echo 'binary_buildpack   1          true      true     binary-buildpack-cflinuxfs3-v1.0.39.zip   cflinuxfs3'
        echo 'go_buildpack       2          true      true     go-buildpack-cflinuxfs3-v1.9.34.zip       cflinuxfs3'
        echo 'java_buildpack     3          true      true     java-buildpack-v4.40.zip                  cflinuxfs3'
        echo 'nodejs_buildpack   4          true      true     nodejs-buildpack-cflinuxfs3-v1.7.57.zip   cflinuxfs3'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf rename-buildpack '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf rename-buildpack '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}buildpack          ${reset_color}position   enabled   locked   filename                                  stack"
        assert ${lines[2]} same_as "${fg[yellow]}binary_buildpack   ${reset_color}1          true      true     binary-buildpack-cflinuxfs3-v1.0.39.zip   cflinuxfs3"
        assert ${lines[3]} same_as "${fg[yellow]}go_buildpack       ${reset_color}2          true      true     go-buildpack-cflinuxfs3-v1.9.34.zip       cflinuxfs3"
        assert ${lines[4]} same_as "${fg[yellow]}java_buildpack     ${reset_color}3          true      true     java-buildpack-v4.40.zip                  cflinuxfs3"
        assert ${lines[5]} same_as "${fg[yellow]}nodejs_buildpack   ${reset_color}4          true      true     nodejs-buildpack-cflinuxfs3-v1.7.57.zip   cflinuxfs3"
    }

    prefix=
    _fzf_complete_cf 'cf rename-buildpack '
}

@test 'Testing completion: cf rename-buildpack -s **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'stacks'

        echo 'Getting stacks in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name          description'
        echo 'windows2016   Microsoft Windows 2016'
        echo 'cflinuxfs3    Cloud Foundry Linux-based filesystem - Ubuntu Bionic 18.04 LTS'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf rename-buildpack -s '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf rename-buildpack -s '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name          ${reset_color}description"
        assert ${lines[2]} same_as "${fg[yellow]}windows2016   ${reset_color}Microsoft Windows 2016"
        assert ${lines[3]} same_as "${fg[yellow]}cflinuxfs3    ${reset_color}Cloud Foundry Linux-based filesystem - Ubuntu Bionic 18.04 LTS"
    }

    prefix=
    _fzf_complete_cf 'cf rename-buildpack -s '
}

@test 'Testing completion: cf rename-buildpack -s**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'stacks'

        echo 'Getting stacks in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name          description'
        echo 'windows2016   Microsoft Windows 2016'
        echo 'cflinuxfs3    Cloud Foundry Linux-based filesystem - Ubuntu Bionic 18.04 LTS'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf rename-buildpack '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf rename-buildpack -s'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name          ${reset_color}description"
        assert ${lines[2]} same_as "${fg[yellow]}windows2016   ${reset_color}Microsoft Windows 2016"
        assert ${lines[3]} same_as "${fg[yellow]}cflinuxfs3    ${reset_color}Cloud Foundry Linux-based filesystem - Ubuntu Bionic 18.04 LTS"
    }

    prefix=-s
    _fzf_complete_cf 'cf rename-buildpack '
}

@test 'Testing completion: cf update-buildpack **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'buildpacks'

        echo 'Getting buildpacks...'
        echo ''
        echo 'buildpack          position   enabled   locked   filename                                  stack'
        echo 'binary_buildpack   1          true      true     binary-buildpack-cflinuxfs3-v1.0.39.zip   cflinuxfs3'
        echo 'go_buildpack       2          true      true     go-buildpack-cflinuxfs3-v1.9.34.zip       cflinuxfs3'
        echo 'java_buildpack     3          true      true     java-buildpack-v4.40.zip                  cflinuxfs3'
        echo 'nodejs_buildpack   4          true      true     nodejs-buildpack-cflinuxfs3-v1.7.57.zip   cflinuxfs3'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf update-buildpack '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf update-buildpack '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}buildpack          ${reset_color}position   enabled   locked   filename                                  stack"
        assert ${lines[2]} same_as "${fg[yellow]}binary_buildpack   ${reset_color}1          true      true     binary-buildpack-cflinuxfs3-v1.0.39.zip   cflinuxfs3"
        assert ${lines[3]} same_as "${fg[yellow]}go_buildpack       ${reset_color}2          true      true     go-buildpack-cflinuxfs3-v1.9.34.zip       cflinuxfs3"
        assert ${lines[4]} same_as "${fg[yellow]}java_buildpack     ${reset_color}3          true      true     java-buildpack-v4.40.zip                  cflinuxfs3"
        assert ${lines[5]} same_as "${fg[yellow]}nodejs_buildpack   ${reset_color}4          true      true     nodejs-buildpack-cflinuxfs3-v1.7.57.zip   cflinuxfs3"
    }

    prefix=
    _fzf_complete_cf 'cf update-buildpack '
}

@test 'Testing completion: cf update-buildpack --assign-stack=**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'stacks'

        echo 'Getting stacks in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name          description'
        echo 'windows2016   Microsoft Windows 2016'
        echo 'cflinuxfs3    Cloud Foundry Linux-based filesystem - Ubuntu Bionic 18.04 LTS'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf update-buildpack '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf update-buildpack --assign-stack='

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name          ${reset_color}description"
        assert ${lines[2]} same_as "${fg[yellow]}windows2016   ${reset_color}Microsoft Windows 2016"
        assert ${lines[3]} same_as "${fg[yellow]}cflinuxfs3    ${reset_color}Cloud Foundry Linux-based filesystem - Ubuntu Bionic 18.04 LTS"
    }

    prefix=--assign-stack=
    _fzf_complete_cf 'cf update-buildpack '
}

@test 'Testing completion: cf update-buildpack --assign-stack **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'stacks'

        echo 'Getting stacks in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name          description'
        echo 'windows2016   Microsoft Windows 2016'
        echo 'cflinuxfs3    Cloud Foundry Linux-based filesystem - Ubuntu Bionic 18.04 LTS'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf update-buildpack --assign-stack '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf update-buildpack --assign-stack '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name          ${reset_color}description"
        assert ${lines[2]} same_as "${fg[yellow]}windows2016   ${reset_color}Microsoft Windows 2016"
        assert ${lines[3]} same_as "${fg[yellow]}cflinuxfs3    ${reset_color}Cloud Foundry Linux-based filesystem - Ubuntu Bionic 18.04 LTS"
    }

    prefix=
    _fzf_complete_cf 'cf update-buildpack --assign-stack '
}

@test 'Testing completion: cf update-buildpack -s **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'stacks'

        echo 'Getting stacks in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name          description'
        echo 'windows2016   Microsoft Windows 2016'
        echo 'cflinuxfs3    Cloud Foundry Linux-based filesystem - Ubuntu Bionic 18.04 LTS'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf update-buildpack -s '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf update-buildpack -s '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name          ${reset_color}description"
        assert ${lines[2]} same_as "${fg[yellow]}windows2016   ${reset_color}Microsoft Windows 2016"
        assert ${lines[3]} same_as "${fg[yellow]}cflinuxfs3    ${reset_color}Cloud Foundry Linux-based filesystem - Ubuntu Bionic 18.04 LTS"
    }

    prefix=
    _fzf_complete_cf 'cf update-buildpack -s '
}

@test 'Testing completion: cf update-buildpack -s**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'stacks'

        echo 'Getting stacks in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name          description'
        echo 'windows2016   Microsoft Windows 2016'
        echo 'cflinuxfs3    Cloud Foundry Linux-based filesystem - Ubuntu Bionic 18.04 LTS'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf update-buildpack '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf update-buildpack -s'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name          ${reset_color}description"
        assert ${lines[2]} same_as "${fg[yellow]}windows2016   ${reset_color}Microsoft Windows 2016"
        assert ${lines[3]} same_as "${fg[yellow]}cflinuxfs3    ${reset_color}Cloud Foundry Linux-based filesystem - Ubuntu Bionic 18.04 LTS"
    }

    prefix=-s
    _fzf_complete_cf 'cf update-buildpack '
}

@test 'Testing completion: cf update-buildpack -i **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'buildpacks'

        echo 'Getting buildpacks...'
        echo ''
        echo 'buildpack          position   enabled   locked   filename                                  stack'
        echo 'binary_buildpack   1          true      true     binary-buildpack-cflinuxfs3-v1.0.39.zip   cflinuxfs3'
        echo 'go_buildpack       2          true      true     go-buildpack-cflinuxfs3-v1.9.34.zip       cflinuxfs3'
        echo 'java_buildpack     3          true      true     java-buildpack-v4.40.zip                  cflinuxfs3'
        echo 'nodejs_buildpack   4          true      true     nodejs-buildpack-cflinuxfs3-v1.7.57.zip   cflinuxfs3'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf update-buildpack -i '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf update-buildpack -i '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}buildpack          ${reset_color}position   enabled   locked   filename                                  stack"
        assert ${lines[2]} same_as "${fg[yellow]}binary_buildpack   ${reset_color}1          true      true     binary-buildpack-cflinuxfs3-v1.0.39.zip   cflinuxfs3"
        assert ${lines[3]} same_as "${fg[yellow]}go_buildpack       ${reset_color}2          true      true     go-buildpack-cflinuxfs3-v1.9.34.zip       cflinuxfs3"
        assert ${lines[4]} same_as "${fg[yellow]}java_buildpack     ${reset_color}3          true      true     java-buildpack-v4.40.zip                  cflinuxfs3"
        assert ${lines[5]} same_as "${fg[yellow]}nodejs_buildpack   ${reset_color}4          true      true     nodejs-buildpack-cflinuxfs3-v1.7.57.zip   cflinuxfs3"
        assert $resource_column same_as 1
    }

    prefix=
    _fzf_complete_cf 'cf update-buildpack -i '
}

@test 'Testing completion: cf update-buildpack -i**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'buildpacks'

        echo 'Getting buildpacks...'
        echo ''
        echo 'buildpack          position   enabled   locked   filename                                  stack'
        echo 'binary_buildpack   1          true      true     binary-buildpack-cflinuxfs3-v1.0.39.zip   cflinuxfs3'
        echo 'go_buildpack       2          true      true     go-buildpack-cflinuxfs3-v1.9.34.zip       cflinuxfs3'
        echo 'java_buildpack     3          true      true     java-buildpack-v4.40.zip                  cflinuxfs3'
        echo 'nodejs_buildpack   4          true      true     nodejs-buildpack-cflinuxfs3-v1.7.57.zip   cflinuxfs3'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf update-buildpack '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf update-buildpack -i'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}buildpack          ${reset_color}position   enabled   locked   filename                                  stack"
        assert ${lines[2]} same_as "${fg[yellow]}binary_buildpack   ${reset_color}1          true      true     binary-buildpack-cflinuxfs3-v1.0.39.zip   cflinuxfs3"
        assert ${lines[3]} same_as "${fg[yellow]}go_buildpack       ${reset_color}2          true      true     go-buildpack-cflinuxfs3-v1.9.34.zip       cflinuxfs3"
        assert ${lines[4]} same_as "${fg[yellow]}java_buildpack     ${reset_color}3          true      true     java-buildpack-v4.40.zip                  cflinuxfs3"
        assert ${lines[5]} same_as "${fg[yellow]}nodejs_buildpack   ${reset_color}4          true      true     nodejs-buildpack-cflinuxfs3-v1.7.57.zip   cflinuxfs3"
        assert $resource_column same_as 1
    }

    prefix=-i
    _fzf_complete_cf 'cf update-buildpack '
}

@test 'Testing completion: cf update-buildpack -p **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf update-buildpack -p '

        echo 'cf'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'cf update-buildpack -p '
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=
    _fzf_complete_cf 'cf update-buildpack -p '

    assert __fzf_extract_command mock_times 1
}

@test 'Testing completion: cf update-buildpack -p**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf update-buildpack '

        echo 'cf'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as ''
        assert $2 same_as 'cf update-buildpack -p'
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=-p
    _fzf_complete_cf 'cf update-buildpack '

    assert __fzf_extract_command mock_times 1
}

@test 'Testing completion: cf delete-domain **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'domains'

        echo 'Getting domains in org org-01 as user-01...'
        echo 'name                      status   type   details'
        echo 'example.com               shared          '
        echo 'unbound.example.com       shared          '
        echo 'tcp.example.com           shared   tcp    '
        echo 'tcp.unbound.example.com   shared   tcp    '
        echo 'apps.internal             shared          internal'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf delete-domain '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf delete-domain '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                      ${reset_color}status   type   details"
        assert ${lines[2]} same_as "${fg[yellow]}example.com               ${reset_color}shared          "
        assert ${lines[3]} same_as "${fg[yellow]}unbound.example.com       ${reset_color}shared          "
        assert ${lines[4]} same_as "${fg[yellow]}tcp.example.com           ${reset_color}shared   tcp    "
        assert ${lines[5]} same_as "${fg[yellow]}tcp.unbound.example.com   ${reset_color}shared   tcp    "
        assert ${lines[6]} same_as "${fg[yellow]}apps.internal             ${reset_color}shared          internal"
    }

    prefix=
    _fzf_complete_cf 'cf delete-domain '
}

@test 'Testing completion: cf delete-shared-domain **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'domains'

        echo 'Getting domains in org org-01 as user-01...'
        echo 'name                      status   type   details'
        echo 'example.com               shared          '
        echo 'unbound.example.com       shared          '
        echo 'tcp.example.com           shared   tcp    '
        echo 'tcp.unbound.example.com   shared   tcp    '
        echo 'apps.internal             shared          internal'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf delete-shared-domain '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf delete-shared-domain '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                      ${reset_color}status   type   details"
        assert ${lines[2]} same_as "${fg[yellow]}example.com               ${reset_color}shared          "
        assert ${lines[3]} same_as "${fg[yellow]}unbound.example.com       ${reset_color}shared          "
        assert ${lines[4]} same_as "${fg[yellow]}tcp.example.com           ${reset_color}shared   tcp    "
        assert ${lines[5]} same_as "${fg[yellow]}tcp.unbound.example.com   ${reset_color}shared   tcp    "
        assert ${lines[6]} same_as "${fg[yellow]}apps.internal             ${reset_color}shared          internal"
    }

    prefix=
    _fzf_complete_cf 'cf delete-shared-domain '
}

@test 'Testing completion: cf bind-route-service **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'routes'

        echo 'Getting routes for org org-01 / space space-01 as user-01 ...'
        echo ''
        echo 'space      host      domain                    port   path   type   apps     service'
        echo 'space-01   app       example.com                                    app-01'
        echo 'space-01   app       example.com                      /sub          app-02'
        echo 'space-01   service   example.com                                    app-03   service-instance-03'
        echo 'space-01   service   example.com                      /sub          app-04   service-instance-03'
        echo 'space-01   app       unbound.example.com'
        echo 'space-01   app       unbound.example.com              /sub'
        echo 'space-01   service   unbound.example.com                                     service-instance-03'
        echo 'space-01   service   unbound.example.com              /sub                   service-instance-03'
        echo 'space-01             example.com                                    app-01'
        echo 'space-01             example.com                      /sub          app-02'
        echo 'space-01             example.com                                    app-03   service-instance-03'
        echo 'space-01             example.com                      /sub          app-04   service-instance-03'
        echo 'space-01             unbound.example.com'
        echo 'space-01             unbound.example.com              /sub'
        echo 'space-01             unbound.example.com                                     service-instance-03'
        echo 'space-01             unbound.example.com              /sub                   service-instance-03'
        echo 'space-01             tcp.example.com           1024          tcp    app-01'
        echo 'space-01             tcp.example.com           1025          tcp    app-03   service-instance-03'
        echo 'space-01             tcp.unbound.example.com   1024          tcp'
        echo 'space-01             tcp.unbound.example.com   1025          tcp             service-instance-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf bind-route-service '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf bind-route-service '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 21
        assert ${lines[1]} same_as "${fg[green]}space      ${reset_color}${fg[yellow]}host      ${reset_color}${fg[blue]}domain                    ${reset_color}port   path   type   apps     service"
        assert ${lines[2]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}app       ${reset_color}${fg[blue]}example.com               ${reset_color}                     app-01"
        assert ${lines[3]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}app       ${reset_color}${fg[blue]}example.com               ${reset_color}       /sub          app-02"
        assert ${lines[4]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}service   ${reset_color}${fg[blue]}example.com               ${reset_color}                     app-03   service-instance-03"
        assert ${lines[5]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}service   ${reset_color}${fg[blue]}example.com               ${reset_color}       /sub          app-04   service-instance-03"
        assert ${lines[6]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}app       ${reset_color}${fg[blue]}unbound.example.com${reset_color}"
        assert ${lines[7]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}app       ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}       /sub"
        assert ${lines[8]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}service   ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}                              service-instance-03"
        assert ${lines[9]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}service   ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}       /sub                   service-instance-03"
        assert ${lines[10]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}example.com               ${reset_color}                     app-01"
        assert ${lines[11]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}example.com               ${reset_color}       /sub          app-02"
        assert ${lines[12]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}example.com               ${reset_color}                     app-03   service-instance-03"
        assert ${lines[13]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}example.com               ${reset_color}       /sub          app-04   service-instance-03"
        assert ${lines[14]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}unbound.example.com${reset_color}"
        assert ${lines[15]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}       /sub"
        assert ${lines[16]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}                              service-instance-03"
        assert ${lines[17]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}       /sub                   service-instance-03"
        assert ${lines[18]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}tcp.example.com           ${reset_color}1024          tcp    app-01"
        assert ${lines[19]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}tcp.example.com           ${reset_color}1025          tcp    app-03   service-instance-03"
        assert ${lines[20]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}tcp.unbound.example.com   ${reset_color}1024          tcp"
        assert ${lines[21]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}tcp.unbound.example.com   ${reset_color}1025          tcp             service-instance-03"
    }

    prefix=
    _fzf_complete_cf 'cf bind-route-service '
}

@test 'Testing completion: cf bind-route-service example.com **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'services'

        echo 'Getting services in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name                                service         plan      bound apps       last operation     broker              upgrade available'
        echo 'service-instance-01                 service-01      plan-01   app-01           create succeeded   service-broker-01   '
        echo 'service-instance-02                 service-01      plan-02                    create failed      service-broker-01   '
        echo 'service-instance-03                 service-02      plan-01                    update succeeded   service-broker-02   '
        echo 'user-provided-service-instance-01   user-provided             app-01, app-02                                          '
        echo 'user-provided-service-instance-02   user-provided             app-03                                                  '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf bind-route-service example.com '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf bind-route-service example.com '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                                ${reset_color}service         plan      bound apps       last operation     broker              upgrade available"
        assert ${lines[2]} same_as "${fg[yellow]}service-instance-01                 ${reset_color}service-01      plan-01   app-01           create succeeded   service-broker-01   "
        assert ${lines[3]} same_as "${fg[yellow]}service-instance-02                 ${reset_color}service-01      plan-02                    create failed      service-broker-01   "
        assert ${lines[4]} same_as "${fg[yellow]}service-instance-03                 ${reset_color}service-02      plan-01                    update succeeded   service-broker-02   "
        assert ${lines[5]} same_as "${fg[yellow]}user-provided-service-instance-01   ${reset_color}user-provided             app-01, app-02                                          "
        assert ${lines[6]} same_as "${fg[yellow]}user-provided-service-instance-02   ${reset_color}user-provided             app-03                                                  "
    }

    prefix=
    _fzf_complete_cf 'cf bind-route-service example.com '
}

@test 'Testing completion: cf brs **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'routes'

        echo 'Getting routes for org org-01 / space space-01 as user-01 ...'
        echo ''
        echo 'space      host      domain                    port   path   type   apps     service'
        echo 'space-01   app       example.com                                    app-01'
        echo 'space-01   app       example.com                      /sub          app-02'
        echo 'space-01   service   example.com                                    app-03   service-instance-03'
        echo 'space-01   service   example.com                      /sub          app-04   service-instance-03'
        echo 'space-01   app       unbound.example.com'
        echo 'space-01   app       unbound.example.com              /sub'
        echo 'space-01   service   unbound.example.com                                     service-instance-03'
        echo 'space-01   service   unbound.example.com              /sub                   service-instance-03'
        echo 'space-01             example.com                                    app-01'
        echo 'space-01             example.com                      /sub          app-02'
        echo 'space-01             example.com                                    app-03   service-instance-03'
        echo 'space-01             example.com                      /sub          app-04   service-instance-03'
        echo 'space-01             unbound.example.com'
        echo 'space-01             unbound.example.com              /sub'
        echo 'space-01             unbound.example.com                                     service-instance-03'
        echo 'space-01             unbound.example.com              /sub                   service-instance-03'
        echo 'space-01             tcp.example.com           1024          tcp    app-01'
        echo 'space-01             tcp.example.com           1025          tcp    app-03   service-instance-03'
        echo 'space-01             tcp.unbound.example.com   1024          tcp'
        echo 'space-01             tcp.unbound.example.com   1025          tcp             service-instance-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf brs '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf brs '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 21
        assert ${lines[1]} same_as "${fg[green]}space      ${reset_color}${fg[yellow]}host      ${reset_color}${fg[blue]}domain                    ${reset_color}port   path   type   apps     service"
        assert ${lines[2]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}app       ${reset_color}${fg[blue]}example.com               ${reset_color}                     app-01"
        assert ${lines[3]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}app       ${reset_color}${fg[blue]}example.com               ${reset_color}       /sub          app-02"
        assert ${lines[4]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}service   ${reset_color}${fg[blue]}example.com               ${reset_color}                     app-03   service-instance-03"
        assert ${lines[5]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}service   ${reset_color}${fg[blue]}example.com               ${reset_color}       /sub          app-04   service-instance-03"
        assert ${lines[6]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}app       ${reset_color}${fg[blue]}unbound.example.com${reset_color}"
        assert ${lines[7]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}app       ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}       /sub"
        assert ${lines[8]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}service   ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}                              service-instance-03"
        assert ${lines[9]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}service   ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}       /sub                   service-instance-03"
        assert ${lines[10]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}example.com               ${reset_color}                     app-01"
        assert ${lines[11]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}example.com               ${reset_color}       /sub          app-02"
        assert ${lines[12]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}example.com               ${reset_color}                     app-03   service-instance-03"
        assert ${lines[13]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}example.com               ${reset_color}       /sub          app-04   service-instance-03"
        assert ${lines[14]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}unbound.example.com${reset_color}"
        assert ${lines[15]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}       /sub"
        assert ${lines[16]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}                              service-instance-03"
        assert ${lines[17]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}       /sub                   service-instance-03"
        assert ${lines[18]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}tcp.example.com           ${reset_color}1024          tcp    app-01"
        assert ${lines[19]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}tcp.example.com           ${reset_color}1025          tcp    app-03   service-instance-03"
        assert ${lines[20]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}tcp.unbound.example.com   ${reset_color}1024          tcp"
        assert ${lines[21]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}tcp.unbound.example.com   ${reset_color}1025          tcp             service-instance-03"
    }

    prefix=
    _fzf_complete_cf 'cf brs '
}

@test 'Testing completion: cf brs example.com **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'services'

        echo 'Getting services in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name                                service         plan      bound apps       last operation     broker              upgrade available'
        echo 'service-instance-01                 service-01      plan-01   app-01           create succeeded   service-broker-01   '
        echo 'service-instance-02                 service-01      plan-02                    create failed      service-broker-01   '
        echo 'service-instance-03                 service-02      plan-01                    update succeeded   service-broker-02   '
        echo 'user-provided-service-instance-01   user-provided             app-01, app-02                                          '
        echo 'user-provided-service-instance-02   user-provided             app-03                                                  '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf brs example.com '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf brs example.com '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                                ${reset_color}service         plan      bound apps       last operation     broker              upgrade available"
        assert ${lines[2]} same_as "${fg[yellow]}service-instance-01                 ${reset_color}service-01      plan-01   app-01           create succeeded   service-broker-01   "
        assert ${lines[3]} same_as "${fg[yellow]}service-instance-02                 ${reset_color}service-01      plan-02                    create failed      service-broker-01   "
        assert ${lines[4]} same_as "${fg[yellow]}service-instance-03                 ${reset_color}service-02      plan-01                    update succeeded   service-broker-02   "
        assert ${lines[5]} same_as "${fg[yellow]}user-provided-service-instance-01   ${reset_color}user-provided             app-01, app-02                                          "
        assert ${lines[6]} same_as "${fg[yellow]}user-provided-service-instance-02   ${reset_color}user-provided             app-03                                                  "
    }

    prefix=
    _fzf_complete_cf 'cf brs example.com '
}

@test 'Testing completion: cf unbind-route-service **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'routes'

        echo 'Getting routes for org org-01 / space space-01 as user-01 ...'
        echo ''
        echo 'space      host      domain                    port   path   type   apps     service'
        echo 'space-01   app       example.com                                    app-01'
        echo 'space-01   app       example.com                      /sub          app-02'
        echo 'space-01   service   example.com                                    app-03   service-instance-03'
        echo 'space-01   service   example.com                      /sub          app-04   service-instance-03'
        echo 'space-01   app       unbound.example.com'
        echo 'space-01   app       unbound.example.com              /sub'
        echo 'space-01   service   unbound.example.com                                     service-instance-03'
        echo 'space-01   service   unbound.example.com              /sub                   service-instance-03'
        echo 'space-01             example.com                                    app-01'
        echo 'space-01             example.com                      /sub          app-02'
        echo 'space-01             example.com                                    app-03   service-instance-03'
        echo 'space-01             example.com                      /sub          app-04   service-instance-03'
        echo 'space-01             unbound.example.com'
        echo 'space-01             unbound.example.com              /sub'
        echo 'space-01             unbound.example.com                                     service-instance-03'
        echo 'space-01             unbound.example.com              /sub                   service-instance-03'
        echo 'space-01             tcp.example.com           1024          tcp    app-01'
        echo 'space-01             tcp.example.com           1025          tcp    app-03   service-instance-03'
        echo 'space-01             tcp.unbound.example.com   1024          tcp'
        echo 'space-01             tcp.unbound.example.com   1025          tcp             service-instance-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf unbind-route-service '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf unbind-route-service '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 21
        assert ${lines[1]} same_as "${fg[green]}space      ${reset_color}${fg[yellow]}host      ${reset_color}${fg[blue]}domain                    ${reset_color}port   path   type   apps     service"
        assert ${lines[2]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}app       ${reset_color}${fg[blue]}example.com               ${reset_color}                     app-01"
        assert ${lines[3]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}app       ${reset_color}${fg[blue]}example.com               ${reset_color}       /sub          app-02"
        assert ${lines[4]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}service   ${reset_color}${fg[blue]}example.com               ${reset_color}                     app-03   service-instance-03"
        assert ${lines[5]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}service   ${reset_color}${fg[blue]}example.com               ${reset_color}       /sub          app-04   service-instance-03"
        assert ${lines[6]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}app       ${reset_color}${fg[blue]}unbound.example.com${reset_color}"
        assert ${lines[7]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}app       ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}       /sub"
        assert ${lines[8]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}service   ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}                              service-instance-03"
        assert ${lines[9]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}service   ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}       /sub                   service-instance-03"
        assert ${lines[10]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}example.com               ${reset_color}                     app-01"
        assert ${lines[11]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}example.com               ${reset_color}       /sub          app-02"
        assert ${lines[12]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}example.com               ${reset_color}                     app-03   service-instance-03"
        assert ${lines[13]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}example.com               ${reset_color}       /sub          app-04   service-instance-03"
        assert ${lines[14]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}unbound.example.com${reset_color}"
        assert ${lines[15]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}       /sub"
        assert ${lines[16]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}                              service-instance-03"
        assert ${lines[17]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}       /sub                   service-instance-03"
        assert ${lines[18]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}tcp.example.com           ${reset_color}1024          tcp    app-01"
        assert ${lines[19]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}tcp.example.com           ${reset_color}1025          tcp    app-03   service-instance-03"
        assert ${lines[20]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}tcp.unbound.example.com   ${reset_color}1024          tcp"
        assert ${lines[21]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}tcp.unbound.example.com   ${reset_color}1025          tcp             service-instance-03"
    }

    prefix=
    _fzf_complete_cf 'cf unbind-route-service '
}

@test 'Testing completion: cf unbind-route-service example.com **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'services'

        echo 'Getting services in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name                                service         plan      bound apps       last operation     broker              upgrade available'
        echo 'service-instance-01                 service-01      plan-01   app-01           create succeeded   service-broker-01   '
        echo 'service-instance-02                 service-01      plan-02                    create failed      service-broker-01   '
        echo 'service-instance-03                 service-02      plan-01                    update succeeded   service-broker-02   '
        echo 'user-provided-service-instance-01   user-provided             app-01, app-02                                          '
        echo 'user-provided-service-instance-02   user-provided             app-03                                                  '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf unbind-route-service example.com '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf unbind-route-service example.com '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                                ${reset_color}service         plan      bound apps       last operation     broker              upgrade available"
        assert ${lines[2]} same_as "${fg[yellow]}service-instance-01                 ${reset_color}service-01      plan-01   app-01           create succeeded   service-broker-01   "
        assert ${lines[3]} same_as "${fg[yellow]}service-instance-02                 ${reset_color}service-01      plan-02                    create failed      service-broker-01   "
        assert ${lines[4]} same_as "${fg[yellow]}service-instance-03                 ${reset_color}service-02      plan-01                    update succeeded   service-broker-02   "
        assert ${lines[5]} same_as "${fg[yellow]}user-provided-service-instance-01   ${reset_color}user-provided             app-01, app-02                                          "
        assert ${lines[6]} same_as "${fg[yellow]}user-provided-service-instance-02   ${reset_color}user-provided             app-03                                                  "
    }

    prefix=
    _fzf_complete_cf 'cf unbind-route-service example.com '
}

@test 'Testing completion: cf urs **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'routes'

        echo 'Getting routes for org org-01 / space space-01 as user-01 ...'
        echo ''
        echo 'space      host      domain                    port   path   type   apps     service'
        echo 'space-01   app       example.com                                    app-01'
        echo 'space-01   app       example.com                      /sub          app-02'
        echo 'space-01   service   example.com                                    app-03   service-instance-03'
        echo 'space-01   service   example.com                      /sub          app-04   service-instance-03'
        echo 'space-01   app       unbound.example.com'
        echo 'space-01   app       unbound.example.com              /sub'
        echo 'space-01   service   unbound.example.com                                     service-instance-03'
        echo 'space-01   service   unbound.example.com              /sub                   service-instance-03'
        echo 'space-01             example.com                                    app-01'
        echo 'space-01             example.com                      /sub          app-02'
        echo 'space-01             example.com                                    app-03   service-instance-03'
        echo 'space-01             example.com                      /sub          app-04   service-instance-03'
        echo 'space-01             unbound.example.com'
        echo 'space-01             unbound.example.com              /sub'
        echo 'space-01             unbound.example.com                                     service-instance-03'
        echo 'space-01             unbound.example.com              /sub                   service-instance-03'
        echo 'space-01             tcp.example.com           1024          tcp    app-01'
        echo 'space-01             tcp.example.com           1025          tcp    app-03   service-instance-03'
        echo 'space-01             tcp.unbound.example.com   1024          tcp'
        echo 'space-01             tcp.unbound.example.com   1025          tcp             service-instance-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf urs '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf urs '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 21
        assert ${lines[1]} same_as "${fg[green]}space      ${reset_color}${fg[yellow]}host      ${reset_color}${fg[blue]}domain                    ${reset_color}port   path   type   apps     service"
        assert ${lines[2]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}app       ${reset_color}${fg[blue]}example.com               ${reset_color}                     app-01"
        assert ${lines[3]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}app       ${reset_color}${fg[blue]}example.com               ${reset_color}       /sub          app-02"
        assert ${lines[4]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}service   ${reset_color}${fg[blue]}example.com               ${reset_color}                     app-03   service-instance-03"
        assert ${lines[5]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}service   ${reset_color}${fg[blue]}example.com               ${reset_color}       /sub          app-04   service-instance-03"
        assert ${lines[6]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}app       ${reset_color}${fg[blue]}unbound.example.com${reset_color}"
        assert ${lines[7]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}app       ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}       /sub"
        assert ${lines[8]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}service   ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}                              service-instance-03"
        assert ${lines[9]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}service   ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}       /sub                   service-instance-03"
        assert ${lines[10]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}example.com               ${reset_color}                     app-01"
        assert ${lines[11]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}example.com               ${reset_color}       /sub          app-02"
        assert ${lines[12]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}example.com               ${reset_color}                     app-03   service-instance-03"
        assert ${lines[13]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}example.com               ${reset_color}       /sub          app-04   service-instance-03"
        assert ${lines[14]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}unbound.example.com${reset_color}"
        assert ${lines[15]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}       /sub"
        assert ${lines[16]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}                              service-instance-03"
        assert ${lines[17]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}       /sub                   service-instance-03"
        assert ${lines[18]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}tcp.example.com           ${reset_color}1024          tcp    app-01"
        assert ${lines[19]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}tcp.example.com           ${reset_color}1025          tcp    app-03   service-instance-03"
        assert ${lines[20]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}tcp.unbound.example.com   ${reset_color}1024          tcp"
        assert ${lines[21]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}tcp.unbound.example.com   ${reset_color}1025          tcp             service-instance-03"
    }

    prefix=
    _fzf_complete_cf 'cf urs '
}

@test 'Testing completion: cf urs example.com **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'services'

        echo 'Getting services in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name                                service         plan      bound apps       last operation     broker              upgrade available'
        echo 'service-instance-01                 service-01      plan-01   app-01           create succeeded   service-broker-01   '
        echo 'service-instance-02                 service-01      plan-02                    create failed      service-broker-01   '
        echo 'service-instance-03                 service-02      plan-01                    update succeeded   service-broker-02   '
        echo 'user-provided-service-instance-01   user-provided             app-01, app-02                                          '
        echo 'user-provided-service-instance-02   user-provided             app-03                                                  '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf urs example.com '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf urs example.com '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                                ${reset_color}service         plan      bound apps       last operation     broker              upgrade available"
        assert ${lines[2]} same_as "${fg[yellow]}service-instance-01                 ${reset_color}service-01      plan-01   app-01           create succeeded   service-broker-01   "
        assert ${lines[3]} same_as "${fg[yellow]}service-instance-02                 ${reset_color}service-01      plan-02                    create failed      service-broker-01   "
        assert ${lines[4]} same_as "${fg[yellow]}service-instance-03                 ${reset_color}service-02      plan-01                    update succeeded   service-broker-02   "
        assert ${lines[5]} same_as "${fg[yellow]}user-provided-service-instance-01   ${reset_color}user-provided             app-01, app-02                                          "
        assert ${lines[6]} same_as "${fg[yellow]}user-provided-service-instance-02   ${reset_color}user-provided             app-03                                                  "
    }

    prefix=
    _fzf_complete_cf 'cf urs example.com '
}

@test 'Testing completion: cf check-route host-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'domains'

        echo 'Getting domains in org org-01 as user-01...'
        echo 'name                      status   type   details'
        echo 'example.com               shared          '
        echo 'unbound.example.com       shared          '
        echo 'tcp.example.com           shared   tcp    '
        echo 'tcp.unbound.example.com   shared   tcp    '
        echo 'apps.internal             shared          internal'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf check-route host-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf check-route host-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                      ${reset_color}status   type   details"
        assert ${lines[2]} same_as "${fg[yellow]}example.com               ${reset_color}shared          "
        assert ${lines[3]} same_as "${fg[yellow]}unbound.example.com       ${reset_color}shared          "
        assert ${lines[4]} same_as "${fg[yellow]}tcp.example.com           ${reset_color}shared   tcp    "
        assert ${lines[5]} same_as "${fg[yellow]}tcp.unbound.example.com   ${reset_color}shared   tcp    "
        assert ${lines[6]} same_as "${fg[yellow]}apps.internal             ${reset_color}shared          internal"
    }

    prefix=
    _fzf_complete_cf 'cf check-route host-01 '
}

@test 'Testing completion: cf delete-route **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'routes'

        echo 'Getting routes for org org-01 / space space-01 as user-01 ...'
        echo ''
        echo 'space      host      domain                    port   path   type   apps     service'
        echo 'space-01   app       example.com                                    app-01'
        echo 'space-01   app       example.com                      /sub          app-02'
        echo 'space-01   service   example.com                                    app-03   service-instance-03'
        echo 'space-01   service   example.com                      /sub          app-04   service-instance-03'
        echo 'space-01   app       unbound.example.com'
        echo 'space-01   app       unbound.example.com              /sub'
        echo 'space-01   service   unbound.example.com                                     service-instance-03'
        echo 'space-01   service   unbound.example.com              /sub                   service-instance-03'
        echo 'space-01             example.com                                    app-01'
        echo 'space-01             example.com                      /sub          app-02'
        echo 'space-01             example.com                                    app-03   service-instance-03'
        echo 'space-01             example.com                      /sub          app-04   service-instance-03'
        echo 'space-01             unbound.example.com'
        echo 'space-01             unbound.example.com              /sub'
        echo 'space-01             unbound.example.com                                     service-instance-03'
        echo 'space-01             unbound.example.com              /sub                   service-instance-03'
        echo 'space-01             tcp.example.com           1024          tcp    app-01'
        echo 'space-01             tcp.example.com           1025          tcp    app-03   service-instance-03'
        echo 'space-01             tcp.unbound.example.com   1024          tcp'
        echo 'space-01             tcp.unbound.example.com   1025          tcp             service-instance-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf delete-route '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf delete-route '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 21
        assert ${lines[1]} same_as "${fg[green]}space      ${reset_color}${fg[yellow]}host      ${reset_color}${fg[blue]}domain                    ${reset_color}port   path   type   apps     service"
        assert ${lines[2]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}app       ${reset_color}${fg[blue]}example.com               ${reset_color}                     app-01"
        assert ${lines[3]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}app       ${reset_color}${fg[blue]}example.com               ${reset_color}       /sub          app-02"
        assert ${lines[4]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}service   ${reset_color}${fg[blue]}example.com               ${reset_color}                     app-03   service-instance-03"
        assert ${lines[5]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}service   ${reset_color}${fg[blue]}example.com               ${reset_color}       /sub          app-04   service-instance-03"
        assert ${lines[6]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}app       ${reset_color}${fg[blue]}unbound.example.com${reset_color}"
        assert ${lines[7]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}app       ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}       /sub"
        assert ${lines[8]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}service   ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}                              service-instance-03"
        assert ${lines[9]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}service   ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}       /sub                   service-instance-03"
        assert ${lines[10]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}example.com               ${reset_color}                     app-01"
        assert ${lines[11]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}example.com               ${reset_color}       /sub          app-02"
        assert ${lines[12]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}example.com               ${reset_color}                     app-03   service-instance-03"
        assert ${lines[13]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}example.com               ${reset_color}       /sub          app-04   service-instance-03"
        assert ${lines[14]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}unbound.example.com${reset_color}"
        assert ${lines[15]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}       /sub"
        assert ${lines[16]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}                              service-instance-03"
        assert ${lines[17]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}unbound.example.com       ${reset_color}       /sub                   service-instance-03"
        assert ${lines[18]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}tcp.example.com           ${reset_color}1024          tcp    app-01"
        assert ${lines[19]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}tcp.example.com           ${reset_color}1025          tcp    app-03   service-instance-03"
        assert ${lines[20]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}tcp.unbound.example.com   ${reset_color}1024          tcp"
        assert ${lines[21]} same_as "${fg[green]}space-01   ${reset_color}${fg[yellow]}          ${reset_color}${fg[blue]}tcp.unbound.example.com   ${reset_color}1025          tcp             service-instance-03"
    }

    prefix=
    _fzf_complete_cf 'cf delete-route '
}

@test 'Testing completion: cf disable-feature-flag **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'feature-flags'

        echo 'Retrieving status of all flagged features as user-01...'
        echo ''
        echo 'features                   state'
        echo 'app_scaling                enabled'
        echo 'diego_docker               enabled'
        echo 'service_instance_sharing   disabled'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf disable-feature-flag '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf disable-feature-flag '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}features                   ${reset_color}state"
        assert ${lines[2]} same_as "${fg[yellow]}app_scaling                ${reset_color}enabled"
        assert ${lines[3]} same_as "${fg[yellow]}diego_docker               ${reset_color}enabled"
        assert ${lines[4]} same_as "${fg[yellow]}service_instance_sharing   ${reset_color}disabled"
    }

    prefix=
    _fzf_complete_cf 'cf disable-feature-flag '
}

@test 'Testing completion: cf enable-feature-flag **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'feature-flags'

        echo 'Retrieving status of all flagged features as user-01...'
        echo ''
        echo 'features                   state'
        echo 'app_scaling                enabled'
        echo 'diego_docker               enabled'
        echo 'service_instance_sharing   disabled'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf enable-feature-flag '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf enable-feature-flag '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}features                   ${reset_color}state"
        assert ${lines[2]} same_as "${fg[yellow]}app_scaling                ${reset_color}enabled"
        assert ${lines[3]} same_as "${fg[yellow]}diego_docker               ${reset_color}enabled"
        assert ${lines[4]} same_as "${fg[yellow]}service_instance_sharing   ${reset_color}disabled"
    }

    prefix=
    _fzf_complete_cf 'cf enable-feature-flag '
}

@test 'Testing completion: cf feature-flag **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'feature-flags'

        echo 'Retrieving status of all flagged features as user-01...'
        echo ''
        echo 'features                   state'
        echo 'app_scaling                enabled'
        echo 'diego_docker               enabled'
        echo 'service_instance_sharing   disabled'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf feature-flag '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf feature-flag '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}features                   ${reset_color}state"
        assert ${lines[2]} same_as "${fg[yellow]}app_scaling                ${reset_color}enabled"
        assert ${lines[3]} same_as "${fg[yellow]}diego_docker               ${reset_color}enabled"
        assert ${lines[4]} same_as "${fg[yellow]}service_instance_sharing   ${reset_color}disabled"
    }

    prefix=
    _fzf_complete_cf 'cf feature-flag '
}

@test 'Testing completion: cf delete-isolation-segment **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'isolation-segments'

        echo 'Getting isolation segments as user-01...'
        echo 'OK'
        echo ''
        echo 'name                   orgs'
        echo 'shared                 '
        echo 'isolation-segment-01   org-01'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf delete-isolation-segment '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf delete-isolation-segment '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name                   ${reset_color}orgs"
        assert ${lines[2]} same_as "${fg[yellow]}shared                 ${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}isolation-segment-01   ${reset_color}org-01"
    }

    prefix=
    _fzf_complete_cf 'cf delete-isolation-segment '
}

@test 'Testing completion: cf m -s **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'marketplace'

        echo 'Getting services from marketplace in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service      plans              description           broker'
        echo 'service-01   plan-01, plan-02   Provides service 01   service-broker-01'
        echo 'service-02   plan-01            Provides service 02   service-broker-02'
        echo ''
        echo "TIP: Use 'cf marketplace -s SERVICE' to view descriptions of individual plans of a given service."
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf m -s '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf m -s '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service      ${reset_color}plans              description           broker"
        assert ${lines[2]} same_as "${fg[yellow]}service-01   ${reset_color}plan-01, plan-02   Provides service 01   service-broker-01"
        assert ${lines[3]} same_as "${fg[yellow]}service-02   ${reset_color}plan-01            Provides service 02   service-broker-02"
    }

    prefix=
    _fzf_complete_cf 'cf m -s '
}

@test 'Testing completion: cf m -s**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'marketplace'

        echo 'Getting services from marketplace in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service      plans              description           broker'
        echo 'service-01   plan-01, plan-02   Provides service 01   service-broker-01'
        echo 'service-02   plan-01            Provides service 02   service-broker-02'
        echo ''
        echo "TIP: Use 'cf marketplace -s SERVICE' to view descriptions of individual plans of a given service."
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf m '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf m -s'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service      ${reset_color}plans              description           broker"
        assert ${lines[2]} same_as "${fg[yellow]}service-01   ${reset_color}plan-01, plan-02   Provides service 01   service-broker-01"
        assert ${lines[3]} same_as "${fg[yellow]}service-02   ${reset_color}plan-01            Provides service 02   service-broker-02"
    }

    prefix=-s
    _fzf_complete_cf 'cf m '
}

@test 'Testing completion: cf marketplace -s **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'marketplace'

        echo 'Getting services from marketplace in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service      plans              description           broker'
        echo 'service-01   plan-01, plan-02   Provides service 01   service-broker-01'
        echo 'service-02   plan-01            Provides service 02   service-broker-02'
        echo ''
        echo "TIP: Use 'cf marketplace -s SERVICE' to view descriptions of individual plans of a given service."
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf marketplace -s '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf marketplace -s '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service      ${reset_color}plans              description           broker"
        assert ${lines[2]} same_as "${fg[yellow]}service-01   ${reset_color}plan-01, plan-02   Provides service 01   service-broker-01"
        assert ${lines[3]} same_as "${fg[yellow]}service-02   ${reset_color}plan-01            Provides service 02   service-broker-02"
    }

    prefix=
    _fzf_complete_cf 'cf marketplace -s '
}

@test 'Testing completion: cf marketplace -s**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'marketplace'

        echo 'Getting services from marketplace in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service      plans              description           broker'
        echo 'service-01   plan-01, plan-02   Provides service 01   service-broker-01'
        echo 'service-02   plan-01            Provides service 02   service-broker-02'
        echo ''
        echo "TIP: Use 'cf marketplace -s SERVICE' to view descriptions of individual plans of a given service."
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf marketplace '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf marketplace -s'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service      ${reset_color}plans              description           broker"
        assert ${lines[2]} same_as "${fg[yellow]}service-01   ${reset_color}plan-01, plan-02   Provides service 01   service-broker-01"
        assert ${lines[3]} same_as "${fg[yellow]}service-02   ${reset_color}plan-01            Provides service 02   service-broker-02"
    }

    prefix=-s
    _fzf_complete_cf 'cf marketplace '
}

@test 'Testing completion: cf create-service **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'marketplace'

        echo 'Getting services from marketplace in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service      plans              description           broker'
        echo 'service-01   plan-01, plan-02   Provides service 01   service-broker-01'
        echo 'service-02   plan-01            Provides service 02   service-broker-02'
        echo ''
        echo "TIP: Use 'cf marketplace -s SERVICE' to view descriptions of individual plans of a given service."
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf create-service '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf create-service '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service      ${reset_color}plans              description           broker"
        assert ${lines[2]} same_as "${fg[yellow]}service-01   ${reset_color}plan-01, plan-02   Provides service 01   service-broker-01"
        assert ${lines[3]} same_as "${fg[yellow]}service-02   ${reset_color}plan-01            Provides service 02   service-broker-02"
    }

    prefix=
    _fzf_complete_cf 'cf create-service '
}

@test 'Testing completion: cf create-service service-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'marketplace'
        assert $2 same_as '-s'
        assert $3 same_as 'service-01'

        echo 'Getting service plan information for service service-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service plan   description       free or paid'
        echo 'plan-01        A plan 01         free'
        echo 'plan-02        A plan 02         free'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf create-service service-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf create-service service-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service ${reset_color}plan   description       free or paid"
        assert ${lines[2]} same_as "${fg[yellow]}plan-01 ${reset_color}       A plan 01         free"
        assert ${lines[3]} same_as "${fg[yellow]}plan-02 ${reset_color}       A plan 02         free"
    }

    prefix=
    _fzf_complete_cf 'cf create-service service-01 '
}

@test 'Testing completion: cf create-service -b service-broker-01 service-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'marketplace'
        assert $2 same_as '-s'
        assert $3 same_as 'service-01'

        echo 'Getting service plan information for service service-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service plan   description       free or paid'
        echo 'plan-01        A plan 01         free'
        echo 'plan-02        A plan 02         free'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf create-service -b service-broker-01 service-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf create-service -b service-broker-01 service-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service ${reset_color}plan   description       free or paid"
        assert ${lines[2]} same_as "${fg[yellow]}plan-01 ${reset_color}       A plan 01         free"
        assert ${lines[3]} same_as "${fg[yellow]}plan-02 ${reset_color}       A plan 02         free"
    }

    prefix=
    _fzf_complete_cf 'cf create-service -b service-broker-01 service-01 '
}

@test 'Testing completion: cf create-service -bservice-broker-01 service-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'marketplace'
        assert $2 same_as '-s'
        assert $3 same_as 'service-01'

        echo 'Getting service plan information for service service-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service plan   description       free or paid'
        echo 'plan-01        A plan 01         free'
        echo 'plan-02        A plan 02         free'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf create-service -bservice-broker-01 service-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf create-service -bservice-broker-01 service-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service ${reset_color}plan   description       free or paid"
        assert ${lines[2]} same_as "${fg[yellow]}plan-01 ${reset_color}       A plan 01         free"
        assert ${lines[3]} same_as "${fg[yellow]}plan-02 ${reset_color}       A plan 02         free"
    }

    prefix=
    _fzf_complete_cf 'cf create-service -bservice-broker-01 service-01 '
}

@test 'Testing completion: cf create-service -b **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'service-brokers'

        echo 'Getting service brokers as user-01...'
        echo ''
        echo 'name                url'
        echo 'service-broker-01   https://service-broker-01.example.com'
        echo 'service-broker-02   https://service-broker-02.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf create-service -b '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf create-service -b '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name                ${reset_color}url"
        assert ${lines[2]} same_as "${fg[yellow]}service-broker-01   ${reset_color}https://service-broker-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}service-broker-02   ${reset_color}https://service-broker-02.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf create-service -b '
}

@test 'Testing completion: cf create-service -b**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'service-brokers'

        echo 'Getting service brokers as user-01...'
        echo ''
        echo 'name                url'
        echo 'service-broker-01   https://service-broker-01.example.com'
        echo 'service-broker-02   https://service-broker-02.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf create-service '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf create-service -b'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name                ${reset_color}url"
        assert ${lines[2]} same_as "${fg[yellow]}service-broker-01   ${reset_color}https://service-broker-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}service-broker-02   ${reset_color}https://service-broker-02.example.com"
    }

    prefix=-b
    _fzf_complete_cf 'cf create-service '
}

@test 'Testing completion: cf cs **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'marketplace'

        echo 'Getting services from marketplace in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service      plans              description           broker'
        echo 'service-01   plan-01, plan-02   Provides service 01   service-broker-01'
        echo 'service-02   plan-01            Provides service 02   service-broker-02'
        echo ''
        echo "TIP: Use 'cf marketplace -s SERVICE' to view descriptions of individual plans of a given service."
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf cs '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf cs '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service      ${reset_color}plans              description           broker"
        assert ${lines[2]} same_as "${fg[yellow]}service-01   ${reset_color}plan-01, plan-02   Provides service 01   service-broker-01"
        assert ${lines[3]} same_as "${fg[yellow]}service-02   ${reset_color}plan-01            Provides service 02   service-broker-02"
    }

    prefix=
    _fzf_complete_cf 'cf cs '
}

@test 'Testing completion: cf cs service-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'marketplace'
        assert $2 same_as '-s'
        assert $3 same_as 'service-01'

        echo 'Getting service plan information for service service-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service plan   description       free or paid'
        echo 'plan-01        A plan 01         free'
        echo 'plan-02        A plan 02         free'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf cs service-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf cs service-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service ${reset_color}plan   description       free or paid"
        assert ${lines[2]} same_as "${fg[yellow]}plan-01 ${reset_color}       A plan 01         free"
        assert ${lines[3]} same_as "${fg[yellow]}plan-02 ${reset_color}       A plan 02         free"
    }

    prefix=
    _fzf_complete_cf 'cf cs service-01 '
}

@test 'Testing completion: cf cs -b service-broker-01 service-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'marketplace'
        assert $2 same_as '-s'
        assert $3 same_as 'service-01'

        echo 'Getting service plan information for service service-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service plan   description       free or paid'
        echo 'plan-01        A plan 01         free'
        echo 'plan-02        A plan 02         free'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf cs -b service-broker-01 service-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf cs -b service-broker-01 service-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service ${reset_color}plan   description       free or paid"
        assert ${lines[2]} same_as "${fg[yellow]}plan-01 ${reset_color}       A plan 01         free"
        assert ${lines[3]} same_as "${fg[yellow]}plan-02 ${reset_color}       A plan 02         free"
    }

    prefix=
    _fzf_complete_cf 'cf cs -b service-broker-01 service-01 '
}

@test 'Testing completion: cf cs -bservice-broker-01 service-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'marketplace'
        assert $2 same_as '-s'
        assert $3 same_as 'service-01'

        echo 'Getting service plan information for service service-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service plan   description       free or paid'
        echo 'plan-01        A plan 01         free'
        echo 'plan-02        A plan 02         free'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf cs -bservice-broker-01 service-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf cs -bservice-broker-01 service-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service ${reset_color}plan   description       free or paid"
        assert ${lines[2]} same_as "${fg[yellow]}plan-01 ${reset_color}       A plan 01         free"
        assert ${lines[3]} same_as "${fg[yellow]}plan-02 ${reset_color}       A plan 02         free"
    }

    prefix=
    _fzf_complete_cf 'cf cs -bservice-broker-01 service-01 '
}

@test 'Testing completion: cf cs -b **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'service-brokers'

        echo 'Getting service brokers as user-01...'
        echo ''
        echo 'name                url'
        echo 'service-broker-01   https://service-broker-01.example.com'
        echo 'service-broker-02   https://service-broker-02.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf cs -b '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf cs -b '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name                ${reset_color}url"
        assert ${lines[2]} same_as "${fg[yellow]}service-broker-01   ${reset_color}https://service-broker-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}service-broker-02   ${reset_color}https://service-broker-02.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf cs -b '
}

@test 'Testing completion: cf cs -b**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'service-brokers'

        echo 'Getting service brokers as user-01...'
        echo ''
        echo 'name                url'
        echo 'service-broker-01   https://service-broker-01.example.com'
        echo 'service-broker-02   https://service-broker-02.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf cs '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf cs -b'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name                ${reset_color}url"
        assert ${lines[2]} same_as "${fg[yellow]}service-broker-01   ${reset_color}https://service-broker-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}service-broker-02   ${reset_color}https://service-broker-02.example.com"
    }

    prefix=-b
    _fzf_complete_cf 'cf cs '
}

@test 'Testing completion: cf disable-service-access **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'marketplace'

        echo 'Getting services from marketplace in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service      plans              description           broker'
        echo 'service-01   plan-01, plan-02   Provides service 01   service-broker-01'
        echo 'service-02   plan-01            Provides service 02   service-broker-02'
        echo ''
        echo "TIP: Use 'cf marketplace -s SERVICE' to view descriptions of individual plans of a given service."
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf disable-service-access '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf disable-service-access '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service      ${reset_color}plans              description           broker"
        assert ${lines[2]} same_as "${fg[yellow]}service-01   ${reset_color}plan-01, plan-02   Provides service 01   service-broker-01"
        assert ${lines[3]} same_as "${fg[yellow]}service-02   ${reset_color}plan-01            Provides service 02   service-broker-02"
    }

    prefix=
    _fzf_complete_cf 'cf disable-service-access '
}

@test 'Testing completion: cf disable-service-access -b **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'service-brokers'

        echo 'Getting service brokers as user-01...'
        echo ''
        echo 'name                url'
        echo 'service-broker-01   https://service-broker-01.example.com'
        echo 'service-broker-02   https://service-broker-02.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf disable-service-access -b '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf disable-service-access -b '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name                ${reset_color}url"
        assert ${lines[2]} same_as "${fg[yellow]}service-broker-01   ${reset_color}https://service-broker-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}service-broker-02   ${reset_color}https://service-broker-02.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf disable-service-access -b '
}

@test 'Testing completion: cf disable-service-access -b**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'service-brokers'

        echo 'Getting service brokers as user-01...'
        echo ''
        echo 'name                url'
        echo 'service-broker-01   https://service-broker-01.example.com'
        echo 'service-broker-02   https://service-broker-02.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf disable-service-access '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf disable-service-access -b'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name                ${reset_color}url"
        assert ${lines[2]} same_as "${fg[yellow]}service-broker-01   ${reset_color}https://service-broker-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}service-broker-02   ${reset_color}https://service-broker-02.example.com"
    }

    prefix=-b
    _fzf_complete_cf 'cf disable-service-access '
}

@test 'Testing completion: cf disable-service-access -o **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf disable-service-access -o '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf disable-service-access -o '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf disable-service-access -o '
}

@test 'Testing completion: cf disable-service-access -o**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf disable-service-access '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf disable-service-access -o'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=-o
    _fzf_complete_cf 'cf disable-service-access '
}

@test 'Testing completion: cf disable-service-access service-01 -b service-broker-01 -p **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'marketplace'
        assert $2 same_as '-s'
        assert $3 same_as 'service-01'

        echo 'Getting service plan information for service service-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service plan   description       free or paid'
        echo 'plan-01        A plan 01         free'
        echo 'plan-02        A plan 02         free'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf disable-service-access service-01 -b service-broker-01 -p '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf disable-service-access service-01 -b service-broker-01 -p '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service ${reset_color}plan   description       free or paid"
        assert ${lines[2]} same_as "${fg[yellow]}plan-01 ${reset_color}       A plan 01         free"
        assert ${lines[3]} same_as "${fg[yellow]}plan-02 ${reset_color}       A plan 02         free"
    }

    prefix=
    _fzf_complete_cf 'cf disable-service-access service-01 -b service-broker-01 -p '
}

@test 'Testing completion: cf disable-service-access service-01 -b service-broker-01 -p**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'marketplace'
        assert $2 same_as '-s'
        assert $3 same_as 'service-01'

        echo 'Getting service plan information for service service-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service plan   description       free or paid'
        echo 'plan-01        A plan 01         free'
        echo 'plan-02        A plan 02         free'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf disable-service-access service-01 -b service-broker-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf disable-service-access service-01 -b service-broker-01 -p'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service ${reset_color}plan   description       free or paid"
        assert ${lines[2]} same_as "${fg[yellow]}plan-01 ${reset_color}       A plan 01         free"
        assert ${lines[3]} same_as "${fg[yellow]}plan-02 ${reset_color}       A plan 02         free"
    }

    prefix=-p
    _fzf_complete_cf 'cf disable-service-access service-01 -b service-broker-01 '
}

@test 'Testing completion: cf disable-service-access service-01 -bservice-broker-01 -p **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'marketplace'
        assert $2 same_as '-s'
        assert $3 same_as 'service-01'

        echo 'Getting service plan information for service service-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service plan   description       free or paid'
        echo 'plan-01        A plan 01         free'
        echo 'plan-02        A plan 02         free'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf disable-service-access service-01 -bservice-broker-01 -p '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf disable-service-access service-01 -bservice-broker-01 -p '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service ${reset_color}plan   description       free or paid"
        assert ${lines[2]} same_as "${fg[yellow]}plan-01 ${reset_color}       A plan 01         free"
        assert ${lines[3]} same_as "${fg[yellow]}plan-02 ${reset_color}       A plan 02         free"
    }

    prefix=
    _fzf_complete_cf 'cf disable-service-access service-01 -bservice-broker-01 -p '
}

@test 'Testing completion: cf disable-service-access service-01 -bservice-broker-01 -p**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'marketplace'
        assert $2 same_as '-s'
        assert $3 same_as 'service-01'

        echo 'Getting service plan information for service service-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service plan   description       free or paid'
        echo 'plan-01        A plan 01         free'
        echo 'plan-02        A plan 02         free'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf disable-service-access service-01 -bservice-broker-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf disable-service-access service-01 -bservice-broker-01 -p'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service ${reset_color}plan   description       free or paid"
        assert ${lines[2]} same_as "${fg[yellow]}plan-01 ${reset_color}       A plan 01         free"
        assert ${lines[3]} same_as "${fg[yellow]}plan-02 ${reset_color}       A plan 02         free"
    }

    prefix=-p
    _fzf_complete_cf 'cf disable-service-access service-01 -bservice-broker-01 '
}

@test 'Testing completion: cf disable-service-access service-01 -p **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'marketplace'
        assert $2 same_as '-s'
        assert $3 same_as 'service-01'

        echo 'Getting service plan information for service service-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service plan   description       free or paid'
        echo 'plan-01        A plan 01         free'
        echo 'plan-02        A plan 02         free'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf disable-service-access service-01 -p '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf disable-service-access service-01 -p '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service ${reset_color}plan   description       free or paid"
        assert ${lines[2]} same_as "${fg[yellow]}plan-01 ${reset_color}       A plan 01         free"
        assert ${lines[3]} same_as "${fg[yellow]}plan-02 ${reset_color}       A plan 02         free"
    }

    prefix=
    _fzf_complete_cf 'cf disable-service-access service-01 -p '
}

@test 'Testing completion: cf disable-service-access service-01 -p**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'marketplace'
        assert $2 same_as '-s'
        assert $3 same_as 'service-01'

        echo 'Getting service plan information for service service-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service plan   description       free or paid'
        echo 'plan-01        A plan 01         free'
        echo 'plan-02        A plan 02         free'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf disable-service-access service-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf disable-service-access service-01 -p'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service ${reset_color}plan   description       free or paid"
        assert ${lines[2]} same_as "${fg[yellow]}plan-01 ${reset_color}       A plan 01         free"
        assert ${lines[3]} same_as "${fg[yellow]}plan-02 ${reset_color}       A plan 02         free"
    }

    prefix=-p
    _fzf_complete_cf 'cf disable-service-access service-01 '
}

@test 'Testing completion: cf enable-service-access **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'marketplace'

        echo 'Getting services from marketplace in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service      plans              description           broker'
        echo 'service-01   plan-01, plan-02   Provides service 01   service-broker-01'
        echo 'service-02   plan-01            Provides service 02   service-broker-02'
        echo ''
        echo "TIP: Use 'cf marketplace -s SERVICE' to view descriptions of individual plans of a given service."
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf enable-service-access '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf enable-service-access '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service      ${reset_color}plans              description           broker"
        assert ${lines[2]} same_as "${fg[yellow]}service-01   ${reset_color}plan-01, plan-02   Provides service 01   service-broker-01"
        assert ${lines[3]} same_as "${fg[yellow]}service-02   ${reset_color}plan-01            Provides service 02   service-broker-02"
    }

    prefix=
    _fzf_complete_cf 'cf enable-service-access '
}

@test 'Testing completion: cf enable-service-access -b **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'service-brokers'

        echo 'Getting service brokers as user-01...'
        echo ''
        echo 'name                url'
        echo 'service-broker-01   https://service-broker-01.example.com'
        echo 'service-broker-02   https://service-broker-02.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf enable-service-access -b '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf enable-service-access -b '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name                ${reset_color}url"
        assert ${lines[2]} same_as "${fg[yellow]}service-broker-01   ${reset_color}https://service-broker-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}service-broker-02   ${reset_color}https://service-broker-02.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf enable-service-access -b '
}

@test 'Testing completion: cf enable-service-access -b**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'service-brokers'

        echo 'Getting service brokers as user-01...'
        echo ''
        echo 'name                url'
        echo 'service-broker-01   https://service-broker-01.example.com'
        echo 'service-broker-02   https://service-broker-02.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf enable-service-access '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf enable-service-access -b'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name                ${reset_color}url"
        assert ${lines[2]} same_as "${fg[yellow]}service-broker-01   ${reset_color}https://service-broker-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}service-broker-02   ${reset_color}https://service-broker-02.example.com"
    }

    prefix=-b
    _fzf_complete_cf 'cf enable-service-access '
}

@test 'Testing completion: cf enable-service-access -o **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf enable-service-access -o '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf enable-service-access -o '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf enable-service-access -o '
}

@test 'Testing completion: cf enable-service-access -o**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf enable-service-access '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf enable-service-access -o'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=-o
    _fzf_complete_cf 'cf enable-service-access '
}

@test 'Testing completion: cf enable-service-access service-01 -b service-broker-01 -p **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'marketplace'
        assert $2 same_as '-s'
        assert $3 same_as 'service-01'

        echo 'Getting service plan information for service service-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service plan   description       free or paid'
        echo 'plan-01        A plan 01         free'
        echo 'plan-02        A plan 02         free'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf enable-service-access service-01 -b service-broker-01 -p '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf enable-service-access service-01 -b service-broker-01 -p '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service ${reset_color}plan   description       free or paid"
        assert ${lines[2]} same_as "${fg[yellow]}plan-01 ${reset_color}       A plan 01         free"
        assert ${lines[3]} same_as "${fg[yellow]}plan-02 ${reset_color}       A plan 02         free"
    }

    prefix=
    _fzf_complete_cf 'cf enable-service-access service-01 -b service-broker-01 -p '
}

@test 'Testing completion: cf enable-service-access service-01 -b service-broker-01 -p**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'marketplace'
        assert $2 same_as '-s'
        assert $3 same_as 'service-01'

        echo 'Getting service plan information for service service-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service plan   description       free or paid'
        echo 'plan-01        A plan 01         free'
        echo 'plan-02        A plan 02         free'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf enable-service-access service-01 -b service-broker-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf enable-service-access service-01 -b service-broker-01 -p'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service ${reset_color}plan   description       free or paid"
        assert ${lines[2]} same_as "${fg[yellow]}plan-01 ${reset_color}       A plan 01         free"
        assert ${lines[3]} same_as "${fg[yellow]}plan-02 ${reset_color}       A plan 02         free"
    }

    prefix=-p
    _fzf_complete_cf 'cf enable-service-access service-01 -b service-broker-01 '
}

@test 'Testing completion: cf enable-service-access service-01 -bservice-broker-01 -p **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'marketplace'
        assert $2 same_as '-s'
        assert $3 same_as 'service-01'

        echo 'Getting service plan information for service service-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service plan   description       free or paid'
        echo 'plan-01        A plan 01         free'
        echo 'plan-02        A plan 02         free'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf enable-service-access service-01 -bservice-broker-01 -p '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf enable-service-access service-01 -bservice-broker-01 -p '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service ${reset_color}plan   description       free or paid"
        assert ${lines[2]} same_as "${fg[yellow]}plan-01 ${reset_color}       A plan 01         free"
        assert ${lines[3]} same_as "${fg[yellow]}plan-02 ${reset_color}       A plan 02         free"
    }

    prefix=
    _fzf_complete_cf 'cf enable-service-access service-01 -bservice-broker-01 -p '
}

@test 'Testing completion: cf enable-service-access service-01 -bservice-broker-01 -p**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'marketplace'
        assert $2 same_as '-s'
        assert $3 same_as 'service-01'

        echo 'Getting service plan information for service service-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service plan   description       free or paid'
        echo 'plan-01        A plan 01         free'
        echo 'plan-02        A plan 02         free'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf enable-service-access service-01 -bservice-broker-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf enable-service-access service-01 -bservice-broker-01 -p'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service ${reset_color}plan   description       free or paid"
        assert ${lines[2]} same_as "${fg[yellow]}plan-01 ${reset_color}       A plan 01         free"
        assert ${lines[3]} same_as "${fg[yellow]}plan-02 ${reset_color}       A plan 02         free"
    }

    prefix=-p
    _fzf_complete_cf 'cf enable-service-access service-01 -bservice-broker-01 '
}

@test 'Testing completion: cf enable-service-access service-01 -p **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'marketplace'
        assert $2 same_as '-s'
        assert $3 same_as 'service-01'

        echo 'Getting service plan information for service service-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service plan   description       free or paid'
        echo 'plan-01        A plan 01         free'
        echo 'plan-02        A plan 02         free'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf enable-service-access service-01 -p '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf enable-service-access service-01 -p '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service ${reset_color}plan   description       free or paid"
        assert ${lines[2]} same_as "${fg[yellow]}plan-01 ${reset_color}       A plan 01         free"
        assert ${lines[3]} same_as "${fg[yellow]}plan-02 ${reset_color}       A plan 02         free"
    }

    prefix=
    _fzf_complete_cf 'cf enable-service-access service-01 -p '
}

@test 'Testing completion: cf enable-service-access service-01 -p**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'marketplace'
        assert $2 same_as '-s'
        assert $3 same_as 'service-01'

        echo 'Getting service plan information for service service-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service plan   description       free or paid'
        echo 'plan-01        A plan 01         free'
        echo 'plan-02        A plan 02         free'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf enable-service-access service-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf enable-service-access service-01 -p'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service ${reset_color}plan   description       free or paid"
        assert ${lines[2]} same_as "${fg[yellow]}plan-01 ${reset_color}       A plan 01         free"
        assert ${lines[3]} same_as "${fg[yellow]}plan-02 ${reset_color}       A plan 02         free"
    }

    prefix=-p
    _fzf_complete_cf 'cf enable-service-access service-01 '
}

@test 'Testing completion: cf purge-service-offering **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'marketplace'

        echo 'Getting services from marketplace in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service      plans              description           broker'
        echo 'service-01   plan-01, plan-02   Provides service 01   service-broker-01'
        echo 'service-02   plan-01            Provides service 02   service-broker-02'
        echo ''
        echo "TIP: Use 'cf marketplace -s SERVICE' to view descriptions of individual plans of a given service."
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf purge-service-offering '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf purge-service-offering '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service      ${reset_color}plans              description           broker"
        assert ${lines[2]} same_as "${fg[yellow]}service-01   ${reset_color}plan-01, plan-02   Provides service 01   service-broker-01"
        assert ${lines[3]} same_as "${fg[yellow]}service-02   ${reset_color}plan-01            Provides service 02   service-broker-02"
    }

    prefix=
    _fzf_complete_cf 'cf purge-service-offering '
}

@test 'Testing completion: cf purge-service-offering -b **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'service-brokers'

        echo 'Getting service brokers as user-01...'
        echo ''
        echo 'name                url'
        echo 'service-broker-01   https://service-broker-01.example.com'
        echo 'service-broker-02   https://service-broker-02.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf purge-service-offering -b '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf purge-service-offering -b '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name                ${reset_color}url"
        assert ${lines[2]} same_as "${fg[yellow]}service-broker-01   ${reset_color}https://service-broker-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}service-broker-02   ${reset_color}https://service-broker-02.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf purge-service-offering -b '
}

@test 'Testing completion: cf purge-service-offering -b**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'service-brokers'

        echo 'Getting service brokers as user-01...'
        echo ''
        echo 'name                url'
        echo 'service-broker-01   https://service-broker-01.example.com'
        echo 'service-broker-02   https://service-broker-02.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf purge-service-offering '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf purge-service-offering -b'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name                ${reset_color}url"
        assert ${lines[2]} same_as "${fg[yellow]}service-broker-01   ${reset_color}https://service-broker-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}service-broker-02   ${reset_color}https://service-broker-02.example.com"
    }

    prefix=-b
    _fzf_complete_cf 'cf purge-service-offering '
}

@test 'Testing completion: cf service-access -b **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'service-brokers'

        echo 'Getting service brokers as user-01...'
        echo ''
        echo 'name                url'
        echo 'service-broker-01   https://service-broker-01.example.com'
        echo 'service-broker-02   https://service-broker-02.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf service-access -b '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf service-access -b '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name                ${reset_color}url"
        assert ${lines[2]} same_as "${fg[yellow]}service-broker-01   ${reset_color}https://service-broker-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}service-broker-02   ${reset_color}https://service-broker-02.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf service-access -b '
}

@test 'Testing completion: cf service-access -b**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'service-brokers'

        echo 'Getting service brokers as user-01...'
        echo ''
        echo 'name                url'
        echo 'service-broker-01   https://service-broker-01.example.com'
        echo 'service-broker-02   https://service-broker-02.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf service-access '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf service-access -b'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name                ${reset_color}url"
        assert ${lines[2]} same_as "${fg[yellow]}service-broker-01   ${reset_color}https://service-broker-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}service-broker-02   ${reset_color}https://service-broker-02.example.com"
    }

    prefix=-b
    _fzf_complete_cf 'cf service-access '
}

@test 'Testing completion: cf service-access -e **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'marketplace'

        echo 'Getting services from marketplace in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service      plans              description           broker'
        echo 'service-01   plan-01, plan-02   Provides service 01   service-broker-01'
        echo 'service-02   plan-01            Provides service 02   service-broker-02'
        echo ''
        echo "TIP: Use 'cf marketplace -s SERVICE' to view descriptions of individual plans of a given service."
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf service-access -e '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf service-access -e '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service      ${reset_color}plans              description           broker"
        assert ${lines[2]} same_as "${fg[yellow]}service-01   ${reset_color}plan-01, plan-02   Provides service 01   service-broker-01"
        assert ${lines[3]} same_as "${fg[yellow]}service-02   ${reset_color}plan-01            Provides service 02   service-broker-02"
    }

    prefix=
    _fzf_complete_cf 'cf service-access -e '
}

@test 'Testing completion: cf service-access -e**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'marketplace'

        echo 'Getting services from marketplace in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service      plans              description           broker'
        echo 'service-01   plan-01, plan-02   Provides service 01   service-broker-01'
        echo 'service-02   plan-01            Provides service 02   service-broker-02'
        echo ''
        echo "TIP: Use 'cf marketplace -s SERVICE' to view descriptions of individual plans of a given service."
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf service-access '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf service-access -e'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service      ${reset_color}plans              description           broker"
        assert ${lines[2]} same_as "${fg[yellow]}service-01   ${reset_color}plan-01, plan-02   Provides service 01   service-broker-01"
        assert ${lines[3]} same_as "${fg[yellow]}service-02   ${reset_color}plan-01            Provides service 02   service-broker-02"
    }

    prefix=-e
    _fzf_complete_cf 'cf service-access '
}

@test 'Testing completion: cf service-access -o **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf service-access -o '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf service-access -o '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf service-access -o '
}

@test 'Testing completion: cf service-access -o**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf service-access '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf service-access -o'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=-o
    _fzf_complete_cf 'cf service-access '
}

@test 'Testing completion: cf delete-org **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf delete-org '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf delete-org '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf delete-org '
}

@test 'Testing completion: cf org **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf org '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf org '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf org '
}

@test 'Testing completion: cf org-users **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf org-users '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf org-users '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf org-users '
}

@test 'Testing completion: cf rename-org **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf rename-org '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf rename-org '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf rename-org '
}

@test 'Testing completion: cf reset-org-default-isolation-segment **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf reset-org-default-isolation-segment '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf reset-org-default-isolation-segment '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf reset-org-default-isolation-segment '
}

@test 'Testing completion: cf create-domain **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf create-domain '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf create-domain '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf create-domain '
}

@test 'Testing completion: cf disable-org-isolation **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf disable-org-isolation '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf disable-org-isolation '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf disable-org-isolation '
}

@test 'Testing completion: cf disable-org-isolation org-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'isolation-segments'

        echo 'Getting isolation segments as user-01...'
        echo 'OK'
        echo ''
        echo 'name                   orgs'
        echo 'shared                 '
        echo 'isolation-segment-01   org-01'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf disable-org-isolation org-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf disable-org-isolation org-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name                   ${reset_color}orgs"
        assert ${lines[2]} same_as "${fg[yellow]}shared                 ${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}isolation-segment-01   ${reset_color}org-01"
    }

    prefix=
    _fzf_complete_cf 'cf disable-org-isolation org-01 '
}

@test 'Testing completion: cf enable-org-isolation **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf enable-org-isolation '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf enable-org-isolation '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf enable-org-isolation '
}

@test 'Testing completion: cf enable-org-isolation org-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'isolation-segments'

        echo 'Getting isolation segments as user-01...'
        echo 'OK'
        echo ''
        echo 'name                   orgs'
        echo 'shared                 '
        echo 'isolation-segment-01   org-01'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf enable-org-isolation org-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf enable-org-isolation org-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name                   ${reset_color}orgs"
        assert ${lines[2]} same_as "${fg[yellow]}shared                 ${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}isolation-segment-01   ${reset_color}org-01"
    }

    prefix=
    _fzf_complete_cf 'cf enable-org-isolation org-01 '
}

@test 'Testing completion: cf set-org-default-isolation-segment **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf set-org-default-isolation-segment '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf set-org-default-isolation-segment '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf set-org-default-isolation-segment '
}

@test 'Testing completion: cf set-org-default-isolation-segment org-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'isolation-segments'

        echo 'Getting isolation segments as user-01...'
        echo 'OK'
        echo ''
        echo 'name                   orgs'
        echo 'shared                 '
        echo 'isolation-segment-01   org-01'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf set-org-default-isolation-segment org-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf set-org-default-isolation-segment org-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name                   ${reset_color}orgs"
        assert ${lines[2]} same_as "${fg[yellow]}shared                 ${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}isolation-segment-01   ${reset_color}org-01"
    }

    prefix=
    _fzf_complete_cf 'cf set-org-default-isolation-segment org-01 '
}

@test 'Testing completion: cf set-space-isolation-segment **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'spaces'

        echo 'Getting spaces in org org-01 as user-01...'
        echo ''
        echo 'name'
        echo 'space-01'
        echo 'space-02'
        echo 'space-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf set-space-isolation-segment '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf set-space-isolation-segment '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf set-space-isolation-segment '
}

@test 'Testing completion: cf set-space-isolation-segment space-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'isolation-segments'

        echo 'Getting isolation segments as user-01...'
        echo 'OK'
        echo ''
        echo 'name                   orgs'
        echo 'shared                 '
        echo 'isolation-segment-01   org-01'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf set-space-isolation-segment space-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf set-space-isolation-segment space-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name                   ${reset_color}orgs"
        assert ${lines[2]} same_as "${fg[yellow]}shared                 ${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}isolation-segment-01   ${reset_color}org-01"
    }

    prefix=
    _fzf_complete_cf 'cf set-space-isolation-segment space-01 '
}

@test 'Testing completion: cf set-org-role user-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf set-org-role user-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf set-org-role user-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf set-org-role user-01 '
}

@test 'Testing completion: cf unset-org-role user-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf unset-org-role user-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf unset-org-role user-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf unset-org-role user-01 '
}

@test 'Testing completion: cf set-quota **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf set-quota '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf set-quota '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf set-quota '
}

@test 'Testing completion: cf set-quota org-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'quotas'

        echo 'Getting quotas as user-01...'
        echo 'OK'
        echo ''
        echo 'name    total memory   instance memory   routes   service instances   paid plans   app instances   route ports'
        echo '10gb    10G            unlimited         4000     unlimited           allowed      unlimited       0'
        echo '50gb    50G            unlimited         4000     unlimited           allowed      unlimited       0'
        echo '100gb   100G           unlimited         4000     unlimited           allowed      unlimited       0'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf set-quota org-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf set-quota org-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name    ${reset_color}total memory   instance memory   routes   service instances   paid plans   app instances   route ports"
        assert ${lines[2]} same_as "${fg[yellow]}10gb    ${reset_color}10G            unlimited         4000     unlimited           allowed      unlimited       0"
        assert ${lines[3]} same_as "${fg[yellow]}50gb    ${reset_color}50G            unlimited         4000     unlimited           allowed      unlimited       0"
        assert ${lines[4]} same_as "${fg[yellow]}100gb   ${reset_color}100G           unlimited         4000     unlimited           allowed      unlimited       0"
    }

    prefix=
    _fzf_complete_cf 'cf set-quota org-01 '
}

@test 'Testing completion: cf set-space-role user-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf set-space-role user-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf set-space-role user-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf set-space-role user-01 '
}

@test 'Testing completion: cf set-space-role user-01 org-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'org'
        assert $2 same_as '--guid'
        assert $3 same_as 'org-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": null,
           "next_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2",
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-01",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/developers",
                    "managers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/managers",
                    "auditors_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/auditors",
                    "apps_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps",
                    "routes_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/routes",
                    "domains_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/domains",
                    "service_instances_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/service_instances",
                    "app_events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/app_events",
                    "events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/events",
                    "security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/security_groups",
                    "staging_security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/staging_security_groups"
                 }
              },
              {
                 "metadata": {
                    "guid": "11111111-1111-1111-1111-111111111111",
                    "url": "/v2/spaces/11111111-1111-1111-1111-111111111111",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-02",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/developers",
                    "managers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/managers",
                    "auditors_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/auditors",
                    "apps_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/apps",
                    "routes_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/routes",
                    "domains_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/domains",
                    "service_instances_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/service_instances",
                    "app_events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/app_events",
                    "events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/events",
                    "security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/security_groups",
                    "staging_security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/staging_security_groups"
                 }
              }
           ]
        }'
    }

    cf_mock_4() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=1",
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "22222222-2222-2222-2222-222222222222",
                    "url": "/v2/spaces/22222222-2222-2222-2222-222222222222",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-03",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/developers",
                    "managers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/managers",
                    "auditors_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/auditors",
                    "apps_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/apps",
                    "routes_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/routes",
                    "domains_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/domains",
                    "service_instances_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/service_instances",
                    "app_events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/app_events",
                    "events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/events",
                    "security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/security_groups",
                    "staging_security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/staging_security_groups"
                 }
              }
           ]
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf set-space-role user-01 org-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf set-space-role user-01 org-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 4
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name    ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf set-space-role user-01 org-01 '
}

@test 'Testing completion: cf unset-space-role user-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf unset-space-role user-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf unset-space-role user-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf unset-space-role user-01 '
}

@test 'Testing completion: cf unset-space-role user-01 org-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'org'
        assert $2 same_as '--guid'
        assert $3 same_as 'org-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": null,
           "next_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2",
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-01",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/developers",
                    "managers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/managers",
                    "auditors_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/auditors",
                    "apps_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps",
                    "routes_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/routes",
                    "domains_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/domains",
                    "service_instances_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/service_instances",
                    "app_events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/app_events",
                    "events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/events",
                    "security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/security_groups",
                    "staging_security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/staging_security_groups"
                 }
              },
              {
                 "metadata": {
                    "guid": "11111111-1111-1111-1111-111111111111",
                    "url": "/v2/spaces/11111111-1111-1111-1111-111111111111",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-02",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/developers",
                    "managers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/managers",
                    "auditors_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/auditors",
                    "apps_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/apps",
                    "routes_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/routes",
                    "domains_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/domains",
                    "service_instances_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/service_instances",
                    "app_events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/app_events",
                    "events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/events",
                    "security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/security_groups",
                    "staging_security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/staging_security_groups"
                 }
              }
           ]
        }'
    }

    cf_mock_4() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=1",
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "22222222-2222-2222-2222-222222222222",
                    "url": "/v2/spaces/22222222-2222-2222-2222-222222222222",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-03",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/developers",
                    "managers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/managers",
                    "auditors_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/auditors",
                    "apps_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/apps",
                    "routes_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/routes",
                    "domains_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/domains",
                    "service_instances_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/service_instances",
                    "app_events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/app_events",
                    "events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/events",
                    "security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/security_groups",
                    "staging_security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/staging_security_groups"
                 }
              }
           ]
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf unset-space-role user-01 org-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf unset-space-role user-01 org-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 4
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name    ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf unset-space-role user-01 org-01 '
}

@test 'Testing completion: cf share-private-domain **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf share-private-domain '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf share-private-domain '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf share-private-domain '
}

@test 'Testing completion: cf share-private-domain org-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'domains'

        echo 'Getting domains in org org-01 as user-01...'
        echo 'name                      status   type   details'
        echo 'example.com               shared          '
        echo 'unbound.example.com       shared          '
        echo 'tcp.example.com           shared   tcp    '
        echo 'tcp.unbound.example.com   shared   tcp    '
        echo 'apps.internal             shared          internal'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf share-private-domain org-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf share-private-domain org-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                      ${reset_color}status   type   details"
        assert ${lines[2]} same_as "${fg[yellow]}example.com               ${reset_color}shared          "
        assert ${lines[3]} same_as "${fg[yellow]}unbound.example.com       ${reset_color}shared          "
        assert ${lines[4]} same_as "${fg[yellow]}tcp.example.com           ${reset_color}shared   tcp    "
        assert ${lines[5]} same_as "${fg[yellow]}tcp.unbound.example.com   ${reset_color}shared   tcp    "
        assert ${lines[6]} same_as "${fg[yellow]}apps.internal             ${reset_color}shared          internal"
    }

    prefix=
    _fzf_complete_cf 'cf share-private-domain org-01 '
}

@test 'Testing completion: cf unshare-private-domain **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf unshare-private-domain '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf unshare-private-domain '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf unshare-private-domain '
}

@test 'Testing completion: cf unshare-private-domain org-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'domains'

        echo 'Getting domains in org org-01 as user-01...'
        echo 'name                      status   type   details'
        echo 'example.com               shared          '
        echo 'unbound.example.com       shared          '
        echo 'tcp.example.com           shared   tcp    '
        echo 'tcp.unbound.example.com   shared   tcp    '
        echo 'apps.internal             shared          internal'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf unshare-private-domain org-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf unshare-private-domain org-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                      ${reset_color}status   type   details"
        assert ${lines[2]} same_as "${fg[yellow]}example.com               ${reset_color}shared          "
        assert ${lines[3]} same_as "${fg[yellow]}unbound.example.com       ${reset_color}shared          "
        assert ${lines[4]} same_as "${fg[yellow]}tcp.example.com           ${reset_color}shared   tcp    "
        assert ${lines[5]} same_as "${fg[yellow]}tcp.unbound.example.com   ${reset_color}shared   tcp    "
        assert ${lines[6]} same_as "${fg[yellow]}apps.internal             ${reset_color}shared          internal"
    }

    prefix=
    _fzf_complete_cf 'cf unshare-private-domain org-01 '
}

@test 'Testing completion: cf space-users **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf space-users '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf space-users '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf space-users '
}

@test 'Testing completion: cf space-users org-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'org'
        assert $2 same_as '--guid'
        assert $3 same_as 'org-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": null,
           "next_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2",
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-01",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/developers",
                    "managers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/managers",
                    "auditors_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/auditors",
                    "apps_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps",
                    "routes_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/routes",
                    "domains_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/domains",
                    "service_instances_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/service_instances",
                    "app_events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/app_events",
                    "events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/events",
                    "security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/security_groups",
                    "staging_security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/staging_security_groups"
                 }
              },
              {
                 "metadata": {
                    "guid": "11111111-1111-1111-1111-111111111111",
                    "url": "/v2/spaces/11111111-1111-1111-1111-111111111111",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-02",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/developers",
                    "managers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/managers",
                    "auditors_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/auditors",
                    "apps_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/apps",
                    "routes_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/routes",
                    "domains_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/domains",
                    "service_instances_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/service_instances",
                    "app_events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/app_events",
                    "events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/events",
                    "security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/security_groups",
                    "staging_security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/staging_security_groups"
                 }
              }
           ]
        }'
    }

    cf_mock_4() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=1",
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "22222222-2222-2222-2222-222222222222",
                    "url": "/v2/spaces/22222222-2222-2222-2222-222222222222",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-03",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/developers",
                    "managers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/managers",
                    "auditors_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/auditors",
                    "apps_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/apps",
                    "routes_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/routes",
                    "domains_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/domains",
                    "service_instances_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/service_instances",
                    "app_events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/app_events",
                    "events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/events",
                    "security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/security_groups",
                    "staging_security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/staging_security_groups"
                 }
              }
           ]
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf space-users org-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf space-users org-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 4
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name    ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf space-users org-01 '
}

@test 'Testing completion: cf t -o **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf t -o '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf t -o '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf t -o '
}

@test 'Testing completion: cf t -o org-01 -s **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'org'
        assert $2 same_as '--guid'
        assert $3 same_as 'org-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": null,
           "next_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2",
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-01",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/developers",
                    "managers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/managers",
                    "auditors_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/auditors",
                    "apps_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps",
                    "routes_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/routes",
                    "domains_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/domains",
                    "service_instances_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/service_instances",
                    "app_events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/app_events",
                    "events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/events",
                    "security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/security_groups",
                    "staging_security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/staging_security_groups"
                 }
              },
              {
                 "metadata": {
                    "guid": "11111111-1111-1111-1111-111111111111",
                    "url": "/v2/spaces/11111111-1111-1111-1111-111111111111",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-02",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/developers",
                    "managers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/managers",
                    "auditors_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/auditors",
                    "apps_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/apps",
                    "routes_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/routes",
                    "domains_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/domains",
                    "service_instances_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/service_instances",
                    "app_events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/app_events",
                    "events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/events",
                    "security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/security_groups",
                    "staging_security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/staging_security_groups"
                 }
              }
           ]
        }'
    }

    cf_mock_4() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=1",
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "22222222-2222-2222-2222-222222222222",
                    "url": "/v2/spaces/22222222-2222-2222-2222-222222222222",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-03",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/developers",
                    "managers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/managers",
                    "auditors_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/auditors",
                    "apps_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/apps",
                    "routes_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/routes",
                    "domains_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/domains",
                    "service_instances_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/service_instances",
                    "app_events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/app_events",
                    "events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/events",
                    "security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/security_groups",
                    "staging_security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/staging_security_groups"
                 }
              }
           ]
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf t -o org-01 -s '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf t -o org-01 -s '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 4
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name    ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf t -o org-01 -s '
}

@test 'Testing completion: cf t -s **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'spaces'

        echo 'Getting spaces in org org-01 as user-01...'
        echo ''
        echo 'name'
        echo 'space-01'
        echo 'space-02'
        echo 'space-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf t -s '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf t -s '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf t -s '
}

@test 'Testing completion: cf t -o**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf t '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf t -o'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=-o
    _fzf_complete_cf 'cf t '
}

@test 'Testing completion: cf t -oorg-01 -s**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'org'
        assert $2 same_as '--guid'
        assert $3 same_as 'org-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": null,
           "next_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2",
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-01",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/developers",
                    "managers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/managers",
                    "auditors_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/auditors",
                    "apps_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps",
                    "routes_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/routes",
                    "domains_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/domains",
                    "service_instances_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/service_instances",
                    "app_events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/app_events",
                    "events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/events",
                    "security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/security_groups",
                    "staging_security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/staging_security_groups"
                 }
              },
              {
                 "metadata": {
                    "guid": "11111111-1111-1111-1111-111111111111",
                    "url": "/v2/spaces/11111111-1111-1111-1111-111111111111",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-02",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/developers",
                    "managers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/managers",
                    "auditors_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/auditors",
                    "apps_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/apps",
                    "routes_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/routes",
                    "domains_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/domains",
                    "service_instances_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/service_instances",
                    "app_events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/app_events",
                    "events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/events",
                    "security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/security_groups",
                    "staging_security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/staging_security_groups"
                 }
              }
           ]
        }'
    }

    cf_mock_4() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=1",
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "22222222-2222-2222-2222-222222222222",
                    "url": "/v2/spaces/22222222-2222-2222-2222-222222222222",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-03",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/developers",
                    "managers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/managers",
                    "auditors_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/auditors",
                    "apps_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/apps",
                    "routes_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/routes",
                    "domains_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/domains",
                    "service_instances_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/service_instances",
                    "app_events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/app_events",
                    "events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/events",
                    "security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/security_groups",
                    "staging_security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/staging_security_groups"
                 }
              }
           ]
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf t -oorg-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf t -oorg-01 -s'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 4
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name    ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=-s
    _fzf_complete_cf 'cf t -oorg-01 '
}

@test 'Testing completion: cf t -s**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'spaces'

        echo 'Getting spaces in org org-01 as user-01...'
        echo ''
        echo 'name'
        echo 'space-01'
        echo 'space-02'
        echo 'space-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf t '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf t -s'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=-s
    _fzf_complete_cf 'cf t '
}

@test 'Testing completion: cf target -o **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf target -o '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf target -o '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf target -o '
}

@test 'Testing completion: cf target -o org-01 -s **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'org'
        assert $2 same_as '--guid'
        assert $3 same_as 'org-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": null,
           "next_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2",
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-01",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/developers",
                    "managers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/managers",
                    "auditors_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/auditors",
                    "apps_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps",
                    "routes_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/routes",
                    "domains_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/domains",
                    "service_instances_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/service_instances",
                    "app_events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/app_events",
                    "events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/events",
                    "security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/security_groups",
                    "staging_security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/staging_security_groups"
                 }
              },
              {
                 "metadata": {
                    "guid": "11111111-1111-1111-1111-111111111111",
                    "url": "/v2/spaces/11111111-1111-1111-1111-111111111111",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-02",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/developers",
                    "managers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/managers",
                    "auditors_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/auditors",
                    "apps_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/apps",
                    "routes_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/routes",
                    "domains_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/domains",
                    "service_instances_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/service_instances",
                    "app_events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/app_events",
                    "events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/events",
                    "security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/security_groups",
                    "staging_security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/staging_security_groups"
                 }
              }
           ]
        }'
    }

    cf_mock_4() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=1",
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "22222222-2222-2222-2222-222222222222",
                    "url": "/v2/spaces/22222222-2222-2222-2222-222222222222",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-03",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/developers",
                    "managers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/managers",
                    "auditors_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/auditors",
                    "apps_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/apps",
                    "routes_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/routes",
                    "domains_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/domains",
                    "service_instances_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/service_instances",
                    "app_events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/app_events",
                    "events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/events",
                    "security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/security_groups",
                    "staging_security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/staging_security_groups"
                 }
              }
           ]
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf target -o org-01 -s '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf target -o org-01 -s '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 4
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name    ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf target -o org-01 -s '
}

@test 'Testing completion: cf target -s **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'spaces'

        echo 'Getting spaces in org org-01 as user-01...'
        echo ''
        echo 'name'
        echo 'space-01'
        echo 'space-02'
        echo 'space-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf target -s '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf target -s '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf target -s '
}

@test 'Testing completion: cf target -o**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf target '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf target -o'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=-o
    _fzf_complete_cf 'cf target '
}

@test 'Testing completion: cf target -oorg-01 -s**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'org'
        assert $2 same_as '--guid'
        assert $3 same_as 'org-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": null,
           "next_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2",
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-01",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/developers",
                    "managers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/managers",
                    "auditors_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/auditors",
                    "apps_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps",
                    "routes_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/routes",
                    "domains_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/domains",
                    "service_instances_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/service_instances",
                    "app_events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/app_events",
                    "events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/events",
                    "security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/security_groups",
                    "staging_security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/staging_security_groups"
                 }
              },
              {
                 "metadata": {
                    "guid": "11111111-1111-1111-1111-111111111111",
                    "url": "/v2/spaces/11111111-1111-1111-1111-111111111111",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-02",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/developers",
                    "managers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/managers",
                    "auditors_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/auditors",
                    "apps_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/apps",
                    "routes_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/routes",
                    "domains_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/domains",
                    "service_instances_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/service_instances",
                    "app_events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/app_events",
                    "events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/events",
                    "security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/security_groups",
                    "staging_security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/staging_security_groups"
                 }
              }
           ]
        }'
    }

    cf_mock_4() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=1",
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "22222222-2222-2222-2222-222222222222",
                    "url": "/v2/spaces/22222222-2222-2222-2222-222222222222",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-03",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/developers",
                    "managers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/managers",
                    "auditors_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/auditors",
                    "apps_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/apps",
                    "routes_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/routes",
                    "domains_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/domains",
                    "service_instances_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/service_instances",
                    "app_events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/app_events",
                    "events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/events",
                    "security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/security_groups",
                    "staging_security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/staging_security_groups"
                 }
              }
           ]
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf target -oorg-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf target -oorg-01 -s'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 4
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name    ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=-s
    _fzf_complete_cf 'cf target -oorg-01 '
}

@test 'Testing completion: cf target -s**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'spaces'

        echo 'Getting spaces in org org-01 as user-01...'
        echo ''
        echo 'name'
        echo 'space-01'
        echo 'space-02'
        echo 'space-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf target '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf target -s'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=-s
    _fzf_complete_cf 'cf target '
}

@test 'Testing completion: cf uninstall-plugin **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'plugins'

        echo 'Listing installed plugins...'
        echo ''
        echo 'plugin            version   command name     command help'
        echo 'FirehosePlugin    0.13.0    app-nozzle       Displays messages from the firehose for a given app'
        echo 'FirehosePlugin    0.13.0    nozzle           Displays messages from the firehose'
        echo 'log-cache         2.1.0     log-meta         Show all available meta information'
        echo 'log-cache         2.1.0     query            Issues a PromQL query against Log Cache'
        echo 'log-cache         2.1.0     tail             Output logs for a source-id/app'
        echo ''
        echo "Use 'cf repo-plugins' to list plugins in registered repos available to install."
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf uninstall-plugin '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf uninstall-plugin '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}plugin            ${reset_color}version   command name     command help"
        assert ${lines[2]} same_as "${fg[yellow]}FirehosePlugin    ${reset_color}0.13.0    app-nozzle       Displays messages from the firehose for a given app"
        assert ${lines[3]} same_as "${fg[yellow]}FirehosePlugin    ${reset_color}0.13.0    nozzle           Displays messages from the firehose"
        assert ${lines[4]} same_as "${fg[yellow]}log-cache         ${reset_color}2.1.0     log-meta         Show all available meta information"
        assert ${lines[5]} same_as "${fg[yellow]}log-cache         ${reset_color}2.1.0     query            Issues a PromQL query against Log Cache"
        assert ${lines[6]} same_as "${fg[yellow]}log-cache         ${reset_color}2.1.0     tail             Output logs for a source-id/app"
    }

    prefix=
    _fzf_complete_cf 'cf uninstall-plugin '
}

@test 'Testing completion: cf delete-quota **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'quotas'

        echo 'Getting quotas as user-01...'
        echo 'OK'
        echo ''
        echo 'name    total memory   instance memory   routes   service instances   paid plans   app instances   route ports'
        echo '10gb    10G            unlimited         4000     unlimited           allowed      unlimited       0'
        echo '50gb    50G            unlimited         4000     unlimited           allowed      unlimited       0'
        echo '100gb   100G           unlimited         4000     unlimited           allowed      unlimited       0'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf delete-quota '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf delete-quota '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name    ${reset_color}total memory   instance memory   routes   service instances   paid plans   app instances   route ports"
        assert ${lines[2]} same_as "${fg[yellow]}10gb    ${reset_color}10G            unlimited         4000     unlimited           allowed      unlimited       0"
        assert ${lines[3]} same_as "${fg[yellow]}50gb    ${reset_color}50G            unlimited         4000     unlimited           allowed      unlimited       0"
        assert ${lines[4]} same_as "${fg[yellow]}100gb   ${reset_color}100G           unlimited         4000     unlimited           allowed      unlimited       0"
    }

    prefix=
    _fzf_complete_cf 'cf delete-quota '
}

@test 'Testing completion: cf quota **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'quotas'

        echo 'Getting quotas as user-01...'
        echo 'OK'
        echo ''
        echo 'name    total memory   instance memory   routes   service instances   paid plans   app instances   route ports'
        echo '10gb    10G            unlimited         4000     unlimited           allowed      unlimited       0'
        echo '50gb    50G            unlimited         4000     unlimited           allowed      unlimited       0'
        echo '100gb   100G           unlimited         4000     unlimited           allowed      unlimited       0'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf quota '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf quota '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name    ${reset_color}total memory   instance memory   routes   service instances   paid plans   app instances   route ports"
        assert ${lines[2]} same_as "${fg[yellow]}10gb    ${reset_color}10G            unlimited         4000     unlimited           allowed      unlimited       0"
        assert ${lines[3]} same_as "${fg[yellow]}50gb    ${reset_color}50G            unlimited         4000     unlimited           allowed      unlimited       0"
        assert ${lines[4]} same_as "${fg[yellow]}100gb   ${reset_color}100G           unlimited         4000     unlimited           allowed      unlimited       0"
    }

    prefix=
    _fzf_complete_cf 'cf quota '
}

@test 'Testing completion: cf update-quota **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'quotas'

        echo 'Getting quotas as user-01...'
        echo 'OK'
        echo ''
        echo 'name    total memory   instance memory   routes   service instances   paid plans   app instances   route ports'
        echo '10gb    10G            unlimited         4000     unlimited           allowed      unlimited       0'
        echo '50gb    50G            unlimited         4000     unlimited           allowed      unlimited       0'
        echo '100gb   100G           unlimited         4000     unlimited           allowed      unlimited       0'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf update-quota '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf update-quota '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name    ${reset_color}total memory   instance memory   routes   service instances   paid plans   app instances   route ports"
        assert ${lines[2]} same_as "${fg[yellow]}10gb    ${reset_color}10G            unlimited         4000     unlimited           allowed      unlimited       0"
        assert ${lines[3]} same_as "${fg[yellow]}50gb    ${reset_color}50G            unlimited         4000     unlimited           allowed      unlimited       0"
        assert ${lines[4]} same_as "${fg[yellow]}100gb   ${reset_color}100G           unlimited         4000     unlimited           allowed      unlimited       0"
    }

    prefix=
    _fzf_complete_cf 'cf update-quota '
}

@test 'Testing completion: cf create-shared-domain --router-group=**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'router-groups'

        echo 'Getting router groups as user-01 ...'
        echo ''
        echo 'name                   type'
        echo 'default-router-group   tcp'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf create-shared-domain '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf create-shared-domain --router-group='

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "${fg[yellow]}name                   ${reset_color}type"
        assert ${lines[2]} same_as "${fg[yellow]}default-router-group   ${reset_color}tcp"
    }

    prefix=--router-group=
    _fzf_complete_cf 'cf create-shared-domain '
}

@test 'Testing completion: cf create-shared-domain --router-group **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'router-groups'

        echo 'Getting router groups as user-01 ...'
        echo ''
        echo 'name                   type'
        echo 'default-router-group   tcp'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf create-shared-domain --router-group '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf create-shared-domain --router-group '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 2
        assert ${lines[1]} same_as "${fg[yellow]}name                   ${reset_color}type"
        assert ${lines[2]} same_as "${fg[yellow]}default-router-group   ${reset_color}tcp"
    }

    prefix=
    _fzf_complete_cf 'cf create-shared-domain --router-group '
}

@test 'Testing completion: cf bind-running-security-group **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'running-security-groups'

        echo "Acquiring running security groups as 'user-01'"
        echo 'OK'
        echo ''
        echo 'default_security_group'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf bind-running-security-group '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'cf bind-running-security-group '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 1
        assert ${lines[1]} same_as "${fg[yellow]}default_security_group${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf bind-running-security-group '
}

@test 'Testing completion: cf unbind-running-security-group **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'running-security-groups'

        echo "Acquiring running security groups as 'user-01'"
        echo 'OK'
        echo ''
        echo 'default_security_group'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf unbind-running-security-group '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'cf unbind-running-security-group '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 1
        assert ${lines[1]} same_as "${fg[yellow]}default_security_group${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf unbind-running-security-group '
}

@test 'Testing completion: cf delete-security-group **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'security-groups'

        echo 'Getting security groups as user-01...'
        echo 'OK'
        echo ''
        echo '     name                     organization   space   lifecycle'
        echo '#0   default_security_group   <all>          <all>   running'
        echo '     default_security_group   <all>          <all>   staging'
        echo '#1   sql_open                 system         nfs     running'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf delete-security-group '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf delete-security-group '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}     ${reset_color}name                     organization   space   lifecycle"
        assert ${lines[2]} same_as "${fg[yellow]}#0   ${reset_color}default_security_group   <all>          <all>   running"
        assert ${lines[3]} same_as "${fg[yellow]}     ${reset_color}default_security_group   <all>          <all>   staging"
        assert ${lines[4]} same_as "${fg[yellow]}#1   ${reset_color}sql_open                 system         nfs     running"
    }

    prefix=
    _fzf_complete_cf 'cf delete-security-group '
}

@test 'Testing completion: cf security-group **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'security-groups'

        echo 'Getting security groups as user-01...'
        echo 'OK'
        echo ''
        echo '     name                     organization   space   lifecycle'
        echo '#0   default_security_group   <all>          <all>   running'
        echo '     default_security_group   <all>          <all>   staging'
        echo '#1   sql_open                 system         nfs     running'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf security-group '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf security-group '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}     ${reset_color}name                     organization   space   lifecycle"
        assert ${lines[2]} same_as "${fg[yellow]}#0   ${reset_color}default_security_group   <all>          <all>   running"
        assert ${lines[3]} same_as "${fg[yellow]}     ${reset_color}default_security_group   <all>          <all>   staging"
        assert ${lines[4]} same_as "${fg[yellow]}#1   ${reset_color}sql_open                 system         nfs     running"
    }

    prefix=
    _fzf_complete_cf 'cf security-group '
}

@test 'Testing completion: cf delete-service-broker **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'service-brokers'

        echo 'Getting service brokers as user-01...'
        echo ''
        echo 'name                url'
        echo 'service-broker-01   https://service-broker-01.example.com'
        echo 'service-broker-02   https://service-broker-02.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf delete-service-broker '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf delete-service-broker '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name                ${reset_color}url"
        assert ${lines[2]} same_as "${fg[yellow]}service-broker-01   ${reset_color}https://service-broker-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}service-broker-02   ${reset_color}https://service-broker-02.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf delete-service-broker '
}

@test 'Testing completion: cf rename-service-broker **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'service-brokers'

        echo 'Getting service brokers as user-01...'
        echo ''
        echo 'name                url'
        echo 'service-broker-01   https://service-broker-01.example.com'
        echo 'service-broker-02   https://service-broker-02.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf rename-service-broker '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf rename-service-broker '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name                ${reset_color}url"
        assert ${lines[2]} same_as "${fg[yellow]}service-broker-01   ${reset_color}https://service-broker-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}service-broker-02   ${reset_color}https://service-broker-02.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf rename-service-broker '
}

@test 'Testing completion: cf update-service-broker **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'service-brokers'

        echo 'Getting service brokers as user-01...'
        echo ''
        echo 'name                url'
        echo 'service-broker-01   https://service-broker-01.example.com'
        echo 'service-broker-02   https://service-broker-02.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf update-service-broker '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf update-service-broker '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name                ${reset_color}url"
        assert ${lines[2]} same_as "${fg[yellow]}service-broker-01   ${reset_color}https://service-broker-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}service-broker-02   ${reset_color}https://service-broker-02.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf update-service-broker '
}

@test 'Testing completion: cf delete-service **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'services'

        echo 'Getting services in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name                                service         plan      bound apps       last operation     broker              upgrade available'
        echo 'service-instance-01                 service-01      plan-01   app-01           create succeeded   service-broker-01   '
        echo 'service-instance-02                 service-01      plan-02                    create failed      service-broker-01   '
        echo 'service-instance-03                 service-02      plan-01                    update succeeded   service-broker-02   '
        echo 'user-provided-service-instance-01   user-provided             app-01, app-02                                          '
        echo 'user-provided-service-instance-02   user-provided             app-03                                                  '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf delete-service '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf delete-service '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                                ${reset_color}service         plan      bound apps       last operation     broker              upgrade available"
        assert ${lines[2]} same_as "${fg[yellow]}service-instance-01                 ${reset_color}service-01      plan-01   app-01           create succeeded   service-broker-01   "
        assert ${lines[3]} same_as "${fg[yellow]}service-instance-02                 ${reset_color}service-01      plan-02                    create failed      service-broker-01   "
        assert ${lines[4]} same_as "${fg[yellow]}service-instance-03                 ${reset_color}service-02      plan-01                    update succeeded   service-broker-02   "
        assert ${lines[5]} same_as "${fg[yellow]}user-provided-service-instance-01   ${reset_color}user-provided             app-01, app-02                                          "
        assert ${lines[6]} same_as "${fg[yellow]}user-provided-service-instance-02   ${reset_color}user-provided             app-03                                                  "
    }

    prefix=
    _fzf_complete_cf 'cf delete-service '
}

@test 'Testing completion: cf ds **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'services'

        echo 'Getting services in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name                                service         plan      bound apps       last operation     broker              upgrade available'
        echo 'service-instance-01                 service-01      plan-01   app-01           create succeeded   service-broker-01   '
        echo 'service-instance-02                 service-01      plan-02                    create failed      service-broker-01   '
        echo 'service-instance-03                 service-02      plan-01                    update succeeded   service-broker-02   '
        echo 'user-provided-service-instance-01   user-provided             app-01, app-02                                          '
        echo 'user-provided-service-instance-02   user-provided             app-03                                                  '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf ds '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf ds '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                                ${reset_color}service         plan      bound apps       last operation     broker              upgrade available"
        assert ${lines[2]} same_as "${fg[yellow]}service-instance-01                 ${reset_color}service-01      plan-01   app-01           create succeeded   service-broker-01   "
        assert ${lines[3]} same_as "${fg[yellow]}service-instance-02                 ${reset_color}service-01      plan-02                    create failed      service-broker-01   "
        assert ${lines[4]} same_as "${fg[yellow]}service-instance-03                 ${reset_color}service-02      plan-01                    update succeeded   service-broker-02   "
        assert ${lines[5]} same_as "${fg[yellow]}user-provided-service-instance-01   ${reset_color}user-provided             app-01, app-02                                          "
        assert ${lines[6]} same_as "${fg[yellow]}user-provided-service-instance-02   ${reset_color}user-provided             app-03                                                  "
    }

    prefix=
    _fzf_complete_cf 'cf ds '
}

@test 'Testing completion: cf purge-service-instance **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'services'

        echo 'Getting services in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name                                service         plan      bound apps       last operation     broker              upgrade available'
        echo 'service-instance-01                 service-01      plan-01   app-01           create succeeded   service-broker-01   '
        echo 'service-instance-02                 service-01      plan-02                    create failed      service-broker-01   '
        echo 'service-instance-03                 service-02      plan-01                    update succeeded   service-broker-02   '
        echo 'user-provided-service-instance-01   user-provided             app-01, app-02                                          '
        echo 'user-provided-service-instance-02   user-provided             app-03                                                  '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf purge-service-instance '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf purge-service-instance '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                                ${reset_color}service         plan      bound apps       last operation     broker              upgrade available"
        assert ${lines[2]} same_as "${fg[yellow]}service-instance-01                 ${reset_color}service-01      plan-01   app-01           create succeeded   service-broker-01   "
        assert ${lines[3]} same_as "${fg[yellow]}service-instance-02                 ${reset_color}service-01      plan-02                    create failed      service-broker-01   "
        assert ${lines[4]} same_as "${fg[yellow]}service-instance-03                 ${reset_color}service-02      plan-01                    update succeeded   service-broker-02   "
        assert ${lines[5]} same_as "${fg[yellow]}user-provided-service-instance-01   ${reset_color}user-provided             app-01, app-02                                          "
        assert ${lines[6]} same_as "${fg[yellow]}user-provided-service-instance-02   ${reset_color}user-provided             app-03                                                  "
    }

    prefix=
    _fzf_complete_cf 'cf purge-service-instance '
}

@test 'Testing completion: cf rename-service **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'services'

        echo 'Getting services in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name                                service         plan      bound apps       last operation     broker              upgrade available'
        echo 'service-instance-01                 service-01      plan-01   app-01           create succeeded   service-broker-01   '
        echo 'service-instance-02                 service-01      plan-02                    create failed      service-broker-01   '
        echo 'service-instance-03                 service-02      plan-01                    update succeeded   service-broker-02   '
        echo 'user-provided-service-instance-01   user-provided             app-01, app-02                                          '
        echo 'user-provided-service-instance-02   user-provided             app-03                                                  '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf rename-service '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf rename-service '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                                ${reset_color}service         plan      bound apps       last operation     broker              upgrade available"
        assert ${lines[2]} same_as "${fg[yellow]}service-instance-01                 ${reset_color}service-01      plan-01   app-01           create succeeded   service-broker-01   "
        assert ${lines[3]} same_as "${fg[yellow]}service-instance-02                 ${reset_color}service-01      plan-02                    create failed      service-broker-01   "
        assert ${lines[4]} same_as "${fg[yellow]}service-instance-03                 ${reset_color}service-02      plan-01                    update succeeded   service-broker-02   "
        assert ${lines[5]} same_as "${fg[yellow]}user-provided-service-instance-01   ${reset_color}user-provided             app-01, app-02                                          "
        assert ${lines[6]} same_as "${fg[yellow]}user-provided-service-instance-02   ${reset_color}user-provided             app-03                                                  "
    }

    prefix=
    _fzf_complete_cf 'cf rename-service '
}

@test 'Testing completion: cf service **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'services'

        echo 'Getting services in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name                                service         plan      bound apps       last operation     broker              upgrade available'
        echo 'service-instance-01                 service-01      plan-01   app-01           create succeeded   service-broker-01   '
        echo 'service-instance-02                 service-01      plan-02                    create failed      service-broker-01   '
        echo 'service-instance-03                 service-02      plan-01                    update succeeded   service-broker-02   '
        echo 'user-provided-service-instance-01   user-provided             app-01, app-02                                          '
        echo 'user-provided-service-instance-02   user-provided             app-03                                                  '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf service '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf service '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                                ${reset_color}service         plan      bound apps       last operation     broker              upgrade available"
        assert ${lines[2]} same_as "${fg[yellow]}service-instance-01                 ${reset_color}service-01      plan-01   app-01           create succeeded   service-broker-01   "
        assert ${lines[3]} same_as "${fg[yellow]}service-instance-02                 ${reset_color}service-01      plan-02                    create failed      service-broker-01   "
        assert ${lines[4]} same_as "${fg[yellow]}service-instance-03                 ${reset_color}service-02      plan-01                    update succeeded   service-broker-02   "
        assert ${lines[5]} same_as "${fg[yellow]}user-provided-service-instance-01   ${reset_color}user-provided             app-01, app-02                                          "
        assert ${lines[6]} same_as "${fg[yellow]}user-provided-service-instance-02   ${reset_color}user-provided             app-03                                                  "
    }

    prefix=
    _fzf_complete_cf 'cf service '
}

@test 'Testing completion: cf service-keys **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'services'

        echo 'Getting services in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name                                service         plan      bound apps       last operation     broker              upgrade available'
        echo 'service-instance-01                 service-01      plan-01   app-01           create succeeded   service-broker-01   '
        echo 'service-instance-02                 service-01      plan-02                    create failed      service-broker-01   '
        echo 'service-instance-03                 service-02      plan-01                    update succeeded   service-broker-02   '
        echo 'user-provided-service-instance-01   user-provided             app-01, app-02                                          '
        echo 'user-provided-service-instance-02   user-provided             app-03                                                  '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf service-keys '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf service-keys '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                                ${reset_color}service         plan      bound apps       last operation     broker              upgrade available"
        assert ${lines[2]} same_as "${fg[yellow]}service-instance-01                 ${reset_color}service-01      plan-01   app-01           create succeeded   service-broker-01   "
        assert ${lines[3]} same_as "${fg[yellow]}service-instance-02                 ${reset_color}service-01      plan-02                    create failed      service-broker-01   "
        assert ${lines[4]} same_as "${fg[yellow]}service-instance-03                 ${reset_color}service-02      plan-01                    update succeeded   service-broker-02   "
        assert ${lines[5]} same_as "${fg[yellow]}user-provided-service-instance-01   ${reset_color}user-provided             app-01, app-02                                          "
        assert ${lines[6]} same_as "${fg[yellow]}user-provided-service-instance-02   ${reset_color}user-provided             app-03                                                  "
    }

    prefix=
    _fzf_complete_cf 'cf service-keys '
}

@test 'Testing completion: cf sk **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'services'

        echo 'Getting services in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name                                service         plan      bound apps       last operation     broker              upgrade available'
        echo 'service-instance-01                 service-01      plan-01   app-01           create succeeded   service-broker-01   '
        echo 'service-instance-02                 service-01      plan-02                    create failed      service-broker-01   '
        echo 'service-instance-03                 service-02      plan-01                    update succeeded   service-broker-02   '
        echo 'user-provided-service-instance-01   user-provided             app-01, app-02                                          '
        echo 'user-provided-service-instance-02   user-provided             app-03                                                  '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf sk '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf sk '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                                ${reset_color}service         plan      bound apps       last operation     broker              upgrade available"
        assert ${lines[2]} same_as "${fg[yellow]}service-instance-01                 ${reset_color}service-01      plan-01   app-01           create succeeded   service-broker-01   "
        assert ${lines[3]} same_as "${fg[yellow]}service-instance-02                 ${reset_color}service-01      plan-02                    create failed      service-broker-01   "
        assert ${lines[4]} same_as "${fg[yellow]}service-instance-03                 ${reset_color}service-02      plan-01                    update succeeded   service-broker-02   "
        assert ${lines[5]} same_as "${fg[yellow]}user-provided-service-instance-01   ${reset_color}user-provided             app-01, app-02                                          "
        assert ${lines[6]} same_as "${fg[yellow]}user-provided-service-instance-02   ${reset_color}user-provided             app-03                                                  "
    }

    prefix=
    _fzf_complete_cf 'cf sk '
}

@test 'Testing completion: cf create-service-key **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'services'

        echo 'Getting services in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name                                service         plan      bound apps       last operation     broker              upgrade available'
        echo 'service-instance-01                 service-01      plan-01   app-01           create succeeded   service-broker-01   '
        echo 'service-instance-02                 service-01      plan-02                    create failed      service-broker-01   '
        echo 'service-instance-03                 service-02      plan-01                    update succeeded   service-broker-02   '
        echo 'user-provided-service-instance-01   user-provided             app-01, app-02                                          '
        echo 'user-provided-service-instance-02   user-provided             app-03                                                  '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf create-service-key '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf create-service-key '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                                ${reset_color}service         plan      bound apps       last operation     broker              upgrade available"
        assert ${lines[2]} same_as "${fg[yellow]}service-instance-01                 ${reset_color}service-01      plan-01   app-01           create succeeded   service-broker-01   "
        assert ${lines[3]} same_as "${fg[yellow]}service-instance-02                 ${reset_color}service-01      plan-02                    create failed      service-broker-01   "
        assert ${lines[4]} same_as "${fg[yellow]}service-instance-03                 ${reset_color}service-02      plan-01                    update succeeded   service-broker-02   "
        assert ${lines[5]} same_as "${fg[yellow]}user-provided-service-instance-01   ${reset_color}user-provided             app-01, app-02                                          "
        assert ${lines[6]} same_as "${fg[yellow]}user-provided-service-instance-02   ${reset_color}user-provided             app-03                                                  "
    }

    prefix=
    _fzf_complete_cf 'cf create-service-key '
}

@test 'Testing completion: cf csk **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'services'

        echo 'Getting services in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name                                service         plan      bound apps       last operation     broker              upgrade available'
        echo 'service-instance-01                 service-01      plan-01   app-01           create succeeded   service-broker-01   '
        echo 'service-instance-02                 service-01      plan-02                    create failed      service-broker-01   '
        echo 'service-instance-03                 service-02      plan-01                    update succeeded   service-broker-02   '
        echo 'user-provided-service-instance-01   user-provided             app-01, app-02                                          '
        echo 'user-provided-service-instance-02   user-provided             app-03                                                  '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf csk '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf csk '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                                ${reset_color}service         plan      bound apps       last operation     broker              upgrade available"
        assert ${lines[2]} same_as "${fg[yellow]}service-instance-01                 ${reset_color}service-01      plan-01   app-01           create succeeded   service-broker-01   "
        assert ${lines[3]} same_as "${fg[yellow]}service-instance-02                 ${reset_color}service-01      plan-02                    create failed      service-broker-01   "
        assert ${lines[4]} same_as "${fg[yellow]}service-instance-03                 ${reset_color}service-02      plan-01                    update succeeded   service-broker-02   "
        assert ${lines[5]} same_as "${fg[yellow]}user-provided-service-instance-01   ${reset_color}user-provided             app-01, app-02                                          "
        assert ${lines[6]} same_as "${fg[yellow]}user-provided-service-instance-02   ${reset_color}user-provided             app-03                                                  "
    }

    prefix=
    _fzf_complete_cf 'cf csk '
}

@test 'Testing completion: cf delete-service-key **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'services'

        echo 'Getting services in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name                                service         plan      bound apps       last operation     broker              upgrade available'
        echo 'service-instance-01                 service-01      plan-01   app-01           create succeeded   service-broker-01   '
        echo 'service-instance-02                 service-01      plan-02                    create failed      service-broker-01   '
        echo 'service-instance-03                 service-02      plan-01                    update succeeded   service-broker-02   '
        echo 'user-provided-service-instance-01   user-provided             app-01, app-02                                          '
        echo 'user-provided-service-instance-02   user-provided             app-03                                                  '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf delete-service-key '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf delete-service-key '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                                ${reset_color}service         plan      bound apps       last operation     broker              upgrade available"
        assert ${lines[2]} same_as "${fg[yellow]}service-instance-01                 ${reset_color}service-01      plan-01   app-01           create succeeded   service-broker-01   "
        assert ${lines[3]} same_as "${fg[yellow]}service-instance-02                 ${reset_color}service-01      plan-02                    create failed      service-broker-01   "
        assert ${lines[4]} same_as "${fg[yellow]}service-instance-03                 ${reset_color}service-02      plan-01                    update succeeded   service-broker-02   "
        assert ${lines[5]} same_as "${fg[yellow]}user-provided-service-instance-01   ${reset_color}user-provided             app-01, app-02                                          "
        assert ${lines[6]} same_as "${fg[yellow]}user-provided-service-instance-02   ${reset_color}user-provided             app-03                                                  "
    }

    prefix=
    _fzf_complete_cf 'cf delete-service-key '
}

@test 'Testing completion: cf delete-service-key service-instance-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 2
        assert $1 same_as 'service-keys'
        assert $2 same_as 'service-instance-01'

        echo 'Getting service keys for service instance service-instance-01 as user-01...'
        echo ''
        echo 'name'
        echo 'key-01'
        echo 'key-02'
        echo 'key-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf delete-service-key service-instance-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf delete-service-key service-instance-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}key-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}key-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}key-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf delete-service-key service-instance-01 '
}

@test 'Testing completion: cf dsk **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'services'

        echo 'Getting services in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name                                service         plan      bound apps       last operation     broker              upgrade available'
        echo 'service-instance-01                 service-01      plan-01   app-01           create succeeded   service-broker-01   '
        echo 'service-instance-02                 service-01      plan-02                    create failed      service-broker-01   '
        echo 'service-instance-03                 service-02      plan-01                    update succeeded   service-broker-02   '
        echo 'user-provided-service-instance-01   user-provided             app-01, app-02                                          '
        echo 'user-provided-service-instance-02   user-provided             app-03                                                  '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf dsk '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf dsk '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                                ${reset_color}service         plan      bound apps       last operation     broker              upgrade available"
        assert ${lines[2]} same_as "${fg[yellow]}service-instance-01                 ${reset_color}service-01      plan-01   app-01           create succeeded   service-broker-01   "
        assert ${lines[3]} same_as "${fg[yellow]}service-instance-02                 ${reset_color}service-01      plan-02                    create failed      service-broker-01   "
        assert ${lines[4]} same_as "${fg[yellow]}service-instance-03                 ${reset_color}service-02      plan-01                    update succeeded   service-broker-02   "
        assert ${lines[5]} same_as "${fg[yellow]}user-provided-service-instance-01   ${reset_color}user-provided             app-01, app-02                                          "
        assert ${lines[6]} same_as "${fg[yellow]}user-provided-service-instance-02   ${reset_color}user-provided             app-03                                                  "
    }

    prefix=
    _fzf_complete_cf 'cf dsk '
}

@test 'Testing completion: cf dsk service-instance-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 2
        assert $1 same_as 'service-keys'
        assert $2 same_as 'service-instance-01'

        echo 'Getting service keys for service instance service-instance-01 as user-01...'
        echo ''
        echo 'name'
        echo 'key-01'
        echo 'key-02'
        echo 'key-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf dsk service-instance-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf dsk service-instance-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}key-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}key-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}key-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf dsk service-instance-01 '
}

@test 'Testing completion: cf service-key **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'services'

        echo 'Getting services in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name                                service         plan      bound apps       last operation     broker              upgrade available'
        echo 'service-instance-01                 service-01      plan-01   app-01           create succeeded   service-broker-01   '
        echo 'service-instance-02                 service-01      plan-02                    create failed      service-broker-01   '
        echo 'service-instance-03                 service-02      plan-01                    update succeeded   service-broker-02   '
        echo 'user-provided-service-instance-01   user-provided             app-01, app-02                                          '
        echo 'user-provided-service-instance-02   user-provided             app-03                                                  '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf service-key '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf service-key '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                                ${reset_color}service         plan      bound apps       last operation     broker              upgrade available"
        assert ${lines[2]} same_as "${fg[yellow]}service-instance-01                 ${reset_color}service-01      plan-01   app-01           create succeeded   service-broker-01   "
        assert ${lines[3]} same_as "${fg[yellow]}service-instance-02                 ${reset_color}service-01      plan-02                    create failed      service-broker-01   "
        assert ${lines[4]} same_as "${fg[yellow]}service-instance-03                 ${reset_color}service-02      plan-01                    update succeeded   service-broker-02   "
        assert ${lines[5]} same_as "${fg[yellow]}user-provided-service-instance-01   ${reset_color}user-provided             app-01, app-02                                          "
        assert ${lines[6]} same_as "${fg[yellow]}user-provided-service-instance-02   ${reset_color}user-provided             app-03                                                  "
    }

    prefix=
    _fzf_complete_cf 'cf service-key '
}

@test 'Testing completion: cf service-key service-instance-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 2
        assert $1 same_as 'service-keys'
        assert $2 same_as 'service-instance-01'

        echo 'Getting service keys for service instance service-instance-01 as user-01...'
        echo ''
        echo 'name'
        echo 'key-01'
        echo 'key-02'
        echo 'key-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf service-key service-instance-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf service-key service-instance-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}key-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}key-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}key-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf service-key service-instance-01 '
}

@test 'Testing completion: cf share-service **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'services'

        echo 'Getting services in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name                                service         plan      bound apps       last operation     broker              upgrade available'
        echo 'service-instance-01                 service-01      plan-01   app-01           create succeeded   service-broker-01   '
        echo 'service-instance-02                 service-01      plan-02                    create failed      service-broker-01   '
        echo 'service-instance-03                 service-02      plan-01                    update succeeded   service-broker-02   '
        echo 'user-provided-service-instance-01   user-provided             app-01, app-02                                          '
        echo 'user-provided-service-instance-02   user-provided             app-03                                                  '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf share-service '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf share-service '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                                ${reset_color}service         plan      bound apps       last operation     broker              upgrade available"
        assert ${lines[2]} same_as "${fg[yellow]}service-instance-01                 ${reset_color}service-01      plan-01   app-01           create succeeded   service-broker-01   "
        assert ${lines[3]} same_as "${fg[yellow]}service-instance-02                 ${reset_color}service-01      plan-02                    create failed      service-broker-01   "
        assert ${lines[4]} same_as "${fg[yellow]}service-instance-03                 ${reset_color}service-02      plan-01                    update succeeded   service-broker-02   "
        assert ${lines[5]} same_as "${fg[yellow]}user-provided-service-instance-01   ${reset_color}user-provided             app-01, app-02                                          "
        assert ${lines[6]} same_as "${fg[yellow]}user-provided-service-instance-02   ${reset_color}user-provided             app-03                                                  "
    }

    prefix=
    _fzf_complete_cf 'cf share-service '
}

@test 'Testing completion: cf share-service -o **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf share-service -o '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf share-service -o '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf share-service -o '
}

@test 'Testing completion: cf share-service -o org-01 -s **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'org'
        assert $2 same_as '--guid'
        assert $3 same_as 'org-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": null,
           "next_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2",
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-01",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/developers",
                    "managers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/managers",
                    "auditors_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/auditors",
                    "apps_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps",
                    "routes_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/routes",
                    "domains_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/domains",
                    "service_instances_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/service_instances",
                    "app_events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/app_events",
                    "events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/events",
                    "security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/security_groups",
                    "staging_security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/staging_security_groups"
                 }
              },
              {
                 "metadata": {
                    "guid": "11111111-1111-1111-1111-111111111111",
                    "url": "/v2/spaces/11111111-1111-1111-1111-111111111111",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-02",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/developers",
                    "managers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/managers",
                    "auditors_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/auditors",
                    "apps_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/apps",
                    "routes_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/routes",
                    "domains_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/domains",
                    "service_instances_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/service_instances",
                    "app_events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/app_events",
                    "events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/events",
                    "security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/security_groups",
                    "staging_security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/staging_security_groups"
                 }
              }
           ]
        }'
    }

    cf_mock_4() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=1",
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "22222222-2222-2222-2222-222222222222",
                    "url": "/v2/spaces/22222222-2222-2222-2222-222222222222",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-03",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/developers",
                    "managers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/managers",
                    "auditors_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/auditors",
                    "apps_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/apps",
                    "routes_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/routes",
                    "domains_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/domains",
                    "service_instances_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/service_instances",
                    "app_events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/app_events",
                    "events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/events",
                    "security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/security_groups",
                    "staging_security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/staging_security_groups"
                 }
              }
           ]
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf share-service -o org-01 -s '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf share-service -o org-01 -s '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 4
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name    ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf share-service -o org-01 -s '
}

@test 'Testing completion: cf share-service -s **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'spaces'

        echo 'Getting spaces in org org-01 as user-01...'
        echo ''
        echo 'name'
        echo 'space-01'
        echo 'space-02'
        echo 'space-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf share-service -s '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf share-service -s '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf share-service -s '
}

@test 'Testing completion: cf share-service -o**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf share-service '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf share-service -o'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=-o
    _fzf_complete_cf 'cf share-service '
}

@test 'Testing completion: cf share-service -oorg-01 -s**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'org'
        assert $2 same_as '--guid'
        assert $3 same_as 'org-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": null,
           "next_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2",
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-01",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/developers",
                    "managers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/managers",
                    "auditors_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/auditors",
                    "apps_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps",
                    "routes_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/routes",
                    "domains_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/domains",
                    "service_instances_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/service_instances",
                    "app_events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/app_events",
                    "events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/events",
                    "security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/security_groups",
                    "staging_security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/staging_security_groups"
                 }
              },
              {
                 "metadata": {
                    "guid": "11111111-1111-1111-1111-111111111111",
                    "url": "/v2/spaces/11111111-1111-1111-1111-111111111111",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-02",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/developers",
                    "managers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/managers",
                    "auditors_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/auditors",
                    "apps_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/apps",
                    "routes_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/routes",
                    "domains_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/domains",
                    "service_instances_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/service_instances",
                    "app_events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/app_events",
                    "events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/events",
                    "security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/security_groups",
                    "staging_security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/staging_security_groups"
                 }
              }
           ]
        }'
    }

    cf_mock_4() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=1",
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "22222222-2222-2222-2222-222222222222",
                    "url": "/v2/spaces/22222222-2222-2222-2222-222222222222",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-03",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/developers",
                    "managers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/managers",
                    "auditors_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/auditors",
                    "apps_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/apps",
                    "routes_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/routes",
                    "domains_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/domains",
                    "service_instances_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/service_instances",
                    "app_events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/app_events",
                    "events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/events",
                    "security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/security_groups",
                    "staging_security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/staging_security_groups"
                 }
              }
           ]
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf share-service -oorg-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf share-service -oorg-01 -s'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 4
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name    ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=-s
    _fzf_complete_cf 'cf share-service -oorg-01 '
}

@test 'Testing completion: cf share-service -s**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'spaces'

        echo 'Getting spaces in org org-01 as user-01...'
        echo ''
        echo 'name'
        echo 'space-01'
        echo 'space-02'
        echo 'space-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf share-service '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf share-service -s'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=-s
    _fzf_complete_cf 'cf share-service '
}

@test 'Testing completion: cf unshare-service **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'services'

        echo 'Getting services in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name                                service         plan      bound apps       last operation     broker              upgrade available'
        echo 'service-instance-01                 service-01      plan-01   app-01           create succeeded   service-broker-01   '
        echo 'service-instance-02                 service-01      plan-02                    create failed      service-broker-01   '
        echo 'service-instance-03                 service-02      plan-01                    update succeeded   service-broker-02   '
        echo 'user-provided-service-instance-01   user-provided             app-01, app-02                                          '
        echo 'user-provided-service-instance-02   user-provided             app-03                                                  '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf unshare-service '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf unshare-service '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                                ${reset_color}service         plan      bound apps       last operation     broker              upgrade available"
        assert ${lines[2]} same_as "${fg[yellow]}service-instance-01                 ${reset_color}service-01      plan-01   app-01           create succeeded   service-broker-01   "
        assert ${lines[3]} same_as "${fg[yellow]}service-instance-02                 ${reset_color}service-01      plan-02                    create failed      service-broker-01   "
        assert ${lines[4]} same_as "${fg[yellow]}service-instance-03                 ${reset_color}service-02      plan-01                    update succeeded   service-broker-02   "
        assert ${lines[5]} same_as "${fg[yellow]}user-provided-service-instance-01   ${reset_color}user-provided             app-01, app-02                                          "
        assert ${lines[6]} same_as "${fg[yellow]}user-provided-service-instance-02   ${reset_color}user-provided             app-03                                                  "
    }

    prefix=
    _fzf_complete_cf 'cf unshare-service '
}

@test 'Testing completion: cf unshare-service -o **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf unshare-service -o '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf unshare-service -o '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf unshare-service -o '
}

@test 'Testing completion: cf unshare-service -o org-01 -s **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'org'
        assert $2 same_as '--guid'
        assert $3 same_as 'org-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": null,
           "next_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2",
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-01",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/developers",
                    "managers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/managers",
                    "auditors_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/auditors",
                    "apps_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps",
                    "routes_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/routes",
                    "domains_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/domains",
                    "service_instances_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/service_instances",
                    "app_events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/app_events",
                    "events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/events",
                    "security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/security_groups",
                    "staging_security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/staging_security_groups"
                 }
              },
              {
                 "metadata": {
                    "guid": "11111111-1111-1111-1111-111111111111",
                    "url": "/v2/spaces/11111111-1111-1111-1111-111111111111",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-02",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/developers",
                    "managers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/managers",
                    "auditors_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/auditors",
                    "apps_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/apps",
                    "routes_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/routes",
                    "domains_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/domains",
                    "service_instances_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/service_instances",
                    "app_events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/app_events",
                    "events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/events",
                    "security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/security_groups",
                    "staging_security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/staging_security_groups"
                 }
              }
           ]
        }'
    }

    cf_mock_4() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=1",
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "22222222-2222-2222-2222-222222222222",
                    "url": "/v2/spaces/22222222-2222-2222-2222-222222222222",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-03",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/developers",
                    "managers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/managers",
                    "auditors_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/auditors",
                    "apps_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/apps",
                    "routes_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/routes",
                    "domains_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/domains",
                    "service_instances_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/service_instances",
                    "app_events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/app_events",
                    "events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/events",
                    "security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/security_groups",
                    "staging_security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/staging_security_groups"
                 }
              }
           ]
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf unshare-service -o org-01 -s '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf unshare-service -o org-01 -s '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 4
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name    ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf unshare-service -o org-01 -s '
}

@test 'Testing completion: cf unshare-service -s **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'spaces'

        echo 'Getting spaces in org org-01 as user-01...'
        echo ''
        echo 'name'
        echo 'space-01'
        echo 'space-02'
        echo 'space-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf unshare-service -s '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf unshare-service -s '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf unshare-service -s '
}

@test 'Testing completion: cf unshare-service -o**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'orgs'

        echo 'Getting orgs as user-01...'
        echo ''
        echo 'name'
        echo 'org-01'
        echo 'org-02'
        echo 'org-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf unshare-service '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf unshare-service -o'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}org-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}org-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}org-03${reset_color}"
    }

    prefix=-o
    _fzf_complete_cf 'cf unshare-service '
}

@test 'Testing completion: cf unshare-service -oorg-01 -s**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 3
        assert $1 same_as 'org'
        assert $2 same_as '--guid'
        assert $3 same_as 'org-01'

        echo '00000000-0000-0000-0000-000000000000'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": null,
           "next_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2",
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-01",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/developers",
                    "managers_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/managers",
                    "auditors_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/auditors",
                    "apps_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/apps",
                    "routes_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/routes",
                    "domains_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/domains",
                    "service_instances_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/service_instances",
                    "app_events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/app_events",
                    "events_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/events",
                    "security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/security_groups",
                    "staging_security_groups_url": "/v2/spaces/00000000-0000-0000-0000-000000000000/staging_security_groups"
                 }
              },
              {
                 "metadata": {
                    "guid": "11111111-1111-1111-1111-111111111111",
                    "url": "/v2/spaces/11111111-1111-1111-1111-111111111111",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-02",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/developers",
                    "managers_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/managers",
                    "auditors_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/auditors",
                    "apps_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/apps",
                    "routes_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/routes",
                    "domains_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/domains",
                    "service_instances_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/service_instances",
                    "app_events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/app_events",
                    "events_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/events",
                    "security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/security_groups",
                    "staging_security_groups_url": "/v2/spaces/11111111-1111-1111-1111-111111111111/staging_security_groups"
                 }
              }
           ]
        }'
    }

    cf_mock_4() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=2'

        echo '{
           "total_results": 3,
           "total_pages": 2,
           "prev_url": "/v2/organizations/00000000-0000-0000-0000-000000000000/spaces?results-per-page=100&page=1",
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "22222222-2222-2222-2222-222222222222",
                    "url": "/v2/spaces/22222222-2222-2222-2222-222222222222",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "space-03",
                    "organization_guid": "00000000-0000-0000-0000-000000000000",
                    "space_quota_definition_guid": null,
                    "allow_ssh": true,
                    "organization_url": "/v2/organizations/00000000-0000-0000-0000-000000000000",
                    "developers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/developers",
                    "managers_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/managers",
                    "auditors_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/auditors",
                    "apps_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/apps",
                    "routes_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/routes",
                    "domains_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/domains",
                    "service_instances_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/service_instances",
                    "app_events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/app_events",
                    "events_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/events",
                    "security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/security_groups",
                    "staging_security_groups_url": "/v2/spaces/22222222-2222-2222-2222-222222222222/staging_security_groups"
                 }
              }
           ]
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf unshare-service -oorg-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf unshare-service -oorg-01 -s'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 4
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name    ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=-s
    _fzf_complete_cf 'cf unshare-service -oorg-01 '
}

@test 'Testing completion: cf unshare-service -s**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'spaces'

        echo 'Getting spaces in org org-01 as user-01...'
        echo ''
        echo 'name'
        echo 'space-01'
        echo 'space-02'
        echo 'space-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf unshare-service '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf unshare-service -s'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=-s
    _fzf_complete_cf 'cf unshare-service '
}

@test 'Testing completion: cf update-service **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'services'

        echo 'Getting services in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name                                service         plan      bound apps       last operation     broker              upgrade available'
        echo 'service-instance-01                 service-01      plan-01   app-01           create succeeded   service-broker-01   '
        echo 'service-instance-02                 service-01      plan-02                    create failed      service-broker-01   '
        echo 'service-instance-03                 service-02      plan-01                    update succeeded   service-broker-02   '
        echo 'user-provided-service-instance-01   user-provided             app-01, app-02                                          '
        echo 'user-provided-service-instance-02   user-provided             app-03                                                  '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf update-service '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf update-service '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                                ${reset_color}service         plan      bound apps       last operation     broker              upgrade available"
        assert ${lines[2]} same_as "${fg[yellow]}service-instance-01                 ${reset_color}service-01      plan-01   app-01           create succeeded   service-broker-01   "
        assert ${lines[3]} same_as "${fg[yellow]}service-instance-02                 ${reset_color}service-01      plan-02                    create failed      service-broker-01   "
        assert ${lines[4]} same_as "${fg[yellow]}service-instance-03                 ${reset_color}service-02      plan-01                    update succeeded   service-broker-02   "
        assert ${lines[5]} same_as "${fg[yellow]}user-provided-service-instance-01   ${reset_color}user-provided             app-01, app-02                                          "
        assert ${lines[6]} same_as "${fg[yellow]}user-provided-service-instance-02   ${reset_color}user-provided             app-03                                                  "
    }

    prefix=
    _fzf_complete_cf 'cf update-service '
}

@test 'Testing completion: cf update-service service-instance-01 -p **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/service_instances?q=name:service-instance-01&q=organization_guid:00000000-0000-0000-0000-000000000000&q=space_guid:00000000-0000-0000-0000-000000000000'

        echo '{
           "total_results": 1,
           "total_pages": 1,
           "prev_url": null,
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/service_instances/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "service-instance-01",
                    "credentials": {},
                    "service_plan_guid": "00000000-0000-0000-0000-000000000000",
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "gateway_data": null,
                    "dashboard_url": "https://example.com/service-instance-01",
                    "type": "managed_service_instance",
                    "last_operation": {
                       "type": "create",
                       "state": "succeeded",
                       "description": "",
                       "updated_at": "2021-01-01T00:00:00Z",
                       "created_at": "2021-01-01T00:00:00Z"
                    },
                    "tags": [],
                    "maintenance_info": {},
                    "service_guid": "00000000-0000-0000-0000-000000000000",
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "service_plan_url": "/v2/service_plans/00000000-0000-0000-0000-000000000000",
                    "service_bindings_url": "/v2/service_instances/00000000-0000-0000-0000-000000000000/service_bindings",
                    "service_keys_url": "/v2/service_instances/00000000-0000-0000-0000-000000000000/service_keys",
                    "routes_url": "/v2/service_instances/00000000-0000-0000-0000-000000000000/routes",
                    "service_url": "/v2/services/00000000-0000-0000-0000-000000000000",
                    "shared_from_url": "/v2/service_instances/00000000-0000-0000-0000-000000000000/shared_from",
                    "shared_to_url": "/v2/service_instances/00000000-0000-0000-0000-000000000000/shared_to",
                    "service_instance_parameters_url": "/v2/service_instances/00000000-0000-0000-0000-000000000000/parameters"
                 }
              }
           ]
        }'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/services/00000000-0000-0000-0000-000000000000'

        echo '{
           "metadata": {
              "guid": "00000000-0000-0000-0000-000000000000",
              "url": "/v2/services/00000000-0000-0000-0000-000000000000",
              "created_at": "2021-01-01T00:00:00Z",
              "updated_at": "2021-01-01T00:00:00Z"
           },
           "entity": {
              "label": "service-01",
              "provider": null,
              "url": null,
              "description": "Provides service 01",
              "long_description": null,
              "version": null,
              "info_url": null,
              "active": true,
              "bindable": true,
              "unique_id": "00000000-0000-0000-0000-000000000000",
              "extra": "{}",
              "tags": [],
              "requires": [],
              "documentation_url": null,
              "service_broker_guid": "00000000-0000-0000-0000-000000000000",
              "service_broker_name": "service-broker-01",
              "plan_updateable": true,
              "bindings_retrievable": true,
              "instances_retrievable": true,
              "allow_context_updates": false,
              "service_plans_url": "/v2/services/00000000-0000-0000-0000-000000000000/service_plans"
           }
        }'
    }

    cf_mock_4() {
        assert $# equals 3
        assert $1 same_as 'marketplace'
        assert $2 same_as '-s'
        assert $3 same_as 'service-01'

        echo 'Getting service plan information for service service-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service plan   description       free or paid'
        echo 'plan-01        A plan 01         free'
        echo 'plan-02        A plan 02         free'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf update-service service-instance-01 -p '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf update-service service-instance-01 -p '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 4
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service ${reset_color}plan   description       free or paid"
        assert ${lines[2]} same_as "${fg[yellow]}plan-01 ${reset_color}       A plan 01         free"
        assert ${lines[3]} same_as "${fg[yellow]}plan-02 ${reset_color}       A plan 02         free"
    }

    prefix=
    _fzf_complete_cf 'cf update-service service-instance-01 -p '
}

@test 'Testing completion: cf update-service service-instance-01 -p**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/service_instances?q=name:service-instance-01&q=organization_guid:00000000-0000-0000-0000-000000000000&q=space_guid:00000000-0000-0000-0000-000000000000'

        echo '{
           "total_results": 1,
           "total_pages": 1,
           "prev_url": null,
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/service_instances/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "service-instance-01",
                    "credentials": {},
                    "service_plan_guid": "00000000-0000-0000-0000-000000000000",
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "gateway_data": null,
                    "dashboard_url": "https://example.com/service-instance-01",
                    "type": "managed_service_instance",
                    "last_operation": {
                       "type": "create",
                       "state": "succeeded",
                       "description": "",
                       "updated_at": "2021-01-01T00:00:00Z",
                       "created_at": "2021-01-01T00:00:00Z"
                    },
                    "tags": [],
                    "maintenance_info": {},
                    "service_guid": "00000000-0000-0000-0000-000000000000",
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "service_plan_url": "/v2/service_plans/00000000-0000-0000-0000-000000000000",
                    "service_bindings_url": "/v2/service_instances/00000000-0000-0000-0000-000000000000/service_bindings",
                    "service_keys_url": "/v2/service_instances/00000000-0000-0000-0000-000000000000/service_keys",
                    "routes_url": "/v2/service_instances/00000000-0000-0000-0000-000000000000/routes",
                    "service_url": "/v2/services/00000000-0000-0000-0000-000000000000",
                    "shared_from_url": "/v2/service_instances/00000000-0000-0000-0000-000000000000/shared_from",
                    "shared_to_url": "/v2/service_instances/00000000-0000-0000-0000-000000000000/shared_to",
                    "service_instance_parameters_url": "/v2/service_instances/00000000-0000-0000-0000-000000000000/parameters"
                 }
              }
           ]
        }'
    }

    cf_mock_3() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/services/00000000-0000-0000-0000-000000000000'

        echo '{
           "metadata": {
              "guid": "00000000-0000-0000-0000-000000000000",
              "url": "/v2/services/00000000-0000-0000-0000-000000000000",
              "created_at": "2021-01-01T00:00:00Z",
              "updated_at": "2021-01-01T00:00:00Z"
           },
           "entity": {
              "label": "service-01",
              "provider": null,
              "url": null,
              "description": "Provides service 01",
              "long_description": null,
              "version": null,
              "info_url": null,
              "active": true,
              "bindable": true,
              "unique_id": "00000000-0000-0000-0000-000000000000",
              "extra": "{}",
              "tags": [],
              "requires": [],
              "documentation_url": null,
              "service_broker_guid": "00000000-0000-0000-0000-000000000000",
              "service_broker_name": "service-broker-01",
              "plan_updateable": true,
              "bindings_retrievable": true,
              "instances_retrievable": true,
              "allow_context_updates": false,
              "service_plans_url": "/v2/services/00000000-0000-0000-0000-000000000000/service_plans"
           }
        }'
    }

    cf_mock_4() {
        assert $# equals 3
        assert $1 same_as 'marketplace'
        assert $2 same_as '-s'
        assert $3 same_as 'service-01'

        echo 'Getting service plan information for service service-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'service plan   description       free or paid'
        echo 'plan-01        A plan 01         free'
        echo 'plan-02        A plan 02         free'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf update-service service-instance-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf update-service service-instance-01 -p'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 4
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}service ${reset_color}plan   description       free or paid"
        assert ${lines[2]} same_as "${fg[yellow]}plan-01 ${reset_color}       A plan 01         free"
        assert ${lines[3]} same_as "${fg[yellow]}plan-02 ${reset_color}       A plan 02         free"
    }

    prefix=-p
    _fzf_complete_cf 'cf update-service service-instance-01 '
}

@test 'Testing completion: cf delete-space-quota **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'space-quotas'

        echo 'Getting space quotas as user-01...'
        echo 'OK'
        echo ''
        echo 'name       total memory   instance memory   routes      service instances   paid plans   app instances   route ports'
        echo 'quota-01   1G             512M              50          unlimited           allowed      unlimited       50'
        echo 'quota-02   2G             1G                unlimited   unlimited           disallowed   50              50'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf delete-space-quota '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf delete-space-quota '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name       ${reset_color}total memory   instance memory   routes      service instances   paid plans   app instances   route ports"
        assert ${lines[2]} same_as "${fg[yellow]}quota-01   ${reset_color}1G             512M              50          unlimited           allowed      unlimited       50"
        assert ${lines[3]} same_as "${fg[yellow]}quota-02   ${reset_color}2G             1G                unlimited   unlimited           disallowed   50              50"
    }

    prefix=
    _fzf_complete_cf 'cf delete-space-quota '
}

@test 'Testing completion: cf space-quota **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'space-quotas'

        echo 'Getting space quotas as user-01...'
        echo 'OK'
        echo ''
        echo 'name       total memory   instance memory   routes      service instances   paid plans   app instances   route ports'
        echo 'quota-01   1G             512M              50          unlimited           allowed      unlimited       50'
        echo 'quota-02   2G             1G                unlimited   unlimited           disallowed   50              50'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf space-quota '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf space-quota '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name       ${reset_color}total memory   instance memory   routes      service instances   paid plans   app instances   route ports"
        assert ${lines[2]} same_as "${fg[yellow]}quota-01   ${reset_color}1G             512M              50          unlimited           allowed      unlimited       50"
        assert ${lines[3]} same_as "${fg[yellow]}quota-02   ${reset_color}2G             1G                unlimited   unlimited           disallowed   50              50"
    }

    prefix=
    _fzf_complete_cf 'cf space-quota '
}

@test 'Testing completion: cf update-space-quota **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'space-quotas'

        echo 'Getting space quotas as user-01...'
        echo 'OK'
        echo ''
        echo 'name       total memory   instance memory   routes      service instances   paid plans   app instances   route ports'
        echo 'quota-01   1G             512M              50          unlimited           allowed      unlimited       50'
        echo 'quota-02   2G             1G                unlimited   unlimited           disallowed   50              50'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf update-space-quota '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf update-space-quota '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name       ${reset_color}total memory   instance memory   routes      service instances   paid plans   app instances   route ports"
        assert ${lines[2]} same_as "${fg[yellow]}quota-01   ${reset_color}1G             512M              50          unlimited           allowed      unlimited       50"
        assert ${lines[3]} same_as "${fg[yellow]}quota-02   ${reset_color}2G             1G                unlimited   unlimited           disallowed   50              50"
    }

    prefix=
    _fzf_complete_cf 'cf update-space-quota '
}

@test 'Testing completion: cf allow-space-ssh **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'spaces'

        echo 'Getting spaces in org org-01 as user-01...'
        echo ''
        echo 'name'
        echo 'space-01'
        echo 'space-02'
        echo 'space-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf allow-space-ssh '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf allow-space-ssh '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf allow-space-ssh '
}

@test 'Testing completion: cf disallow-space-ssh **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'spaces'

        echo 'Getting spaces in org org-01 as user-01...'
        echo ''
        echo 'name'
        echo 'space-01'
        echo 'space-02'
        echo 'space-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf disallow-space-ssh '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf disallow-space-ssh '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf disallow-space-ssh '
}

@test 'Testing completion: cf rename-space **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'spaces'

        echo 'Getting spaces in org org-01 as user-01...'
        echo ''
        echo 'name'
        echo 'space-01'
        echo 'space-02'
        echo 'space-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf rename-space '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf rename-space '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf rename-space '
}

@test 'Testing completion: cf reset-space-isolation-segment **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'spaces'

        echo 'Getting spaces in org org-01 as user-01...'
        echo ''
        echo 'name'
        echo 'space-01'
        echo 'space-02'
        echo 'space-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf reset-space-isolation-segment '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf reset-space-isolation-segment '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf reset-space-isolation-segment '
}

@test 'Testing completion: cf space **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'spaces'

        echo 'Getting spaces in org org-01 as user-01...'
        echo ''
        echo 'name'
        echo 'space-01'
        echo 'space-02'
        echo 'space-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf space '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf space '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf space '
}

@test 'Testing completion: cf space-ssh-allowed **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'spaces'

        echo 'Getting spaces in org org-01 as user-01...'
        echo ''
        echo 'name'
        echo 'space-01'
        echo 'space-02'
        echo 'space-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf space-ssh-allowed '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf space-ssh-allowed '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf space-ssh-allowed '
}

@test 'Testing completion: cf create-route **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'spaces'

        echo 'Getting spaces in org org-01 as user-01...'
        echo ''
        echo 'name'
        echo 'space-01'
        echo 'space-02'
        echo 'space-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf create-route '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf create-route '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf create-route '
}

@test 'Testing completion: cf create-route space-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'domains'

        echo 'Getting domains in org org-01 as user-01...'
        echo 'name                      status   type   details'
        echo 'example.com               shared          '
        echo 'unbound.example.com       shared          '
        echo 'tcp.example.com           shared   tcp    '
        echo 'tcp.unbound.example.com   shared   tcp    '
        echo 'apps.internal             shared          internal'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf create-route space-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf create-route space-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                      ${reset_color}status   type   details"
        assert ${lines[2]} same_as "${fg[yellow]}example.com               ${reset_color}shared          "
        assert ${lines[3]} same_as "${fg[yellow]}unbound.example.com       ${reset_color}shared          "
        assert ${lines[4]} same_as "${fg[yellow]}tcp.example.com           ${reset_color}shared   tcp    "
        assert ${lines[5]} same_as "${fg[yellow]}tcp.unbound.example.com   ${reset_color}shared   tcp    "
        assert ${lines[6]} same_as "${fg[yellow]}apps.internal             ${reset_color}shared          internal"
    }

    prefix=
    _fzf_complete_cf 'cf create-route space-01 '
}

@test 'Testing completion: cf set-space-quota **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'spaces'

        echo 'Getting spaces in org org-01 as user-01...'
        echo ''
        echo 'name'
        echo 'space-01'
        echo 'space-02'
        echo 'space-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf set-space-quota '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf set-space-quota '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf set-space-quota '
}

@test 'Testing completion: cf set-space-quota space-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'space-quotas'

        echo 'Getting space quotas as user-01...'
        echo 'OK'
        echo ''
        echo 'name       total memory   instance memory   routes      service instances   paid plans   app instances   route ports'
        echo 'quota-01   1G             512M              50          unlimited           allowed      unlimited       50'
        echo 'quota-02   2G             1G                unlimited   unlimited           disallowed   50              50'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf set-space-quota space-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf set-space-quota space-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name       ${reset_color}total memory   instance memory   routes      service instances   paid plans   app instances   route ports"
        assert ${lines[2]} same_as "${fg[yellow]}quota-01   ${reset_color}1G             512M              50          unlimited           allowed      unlimited       50"
        assert ${lines[3]} same_as "${fg[yellow]}quota-02   ${reset_color}2G             1G                unlimited   unlimited           disallowed   50              50"
    }

    prefix=
    _fzf_complete_cf 'cf set-space-quota space-01 '
}

@test 'Testing completion: cf unset-space-quota **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'spaces'

        echo 'Getting spaces in org org-01 as user-01...'
        echo ''
        echo 'name'
        echo 'space-01'
        echo 'space-02'
        echo 'space-03'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf unset-space-quota '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf unset-space-quota '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}space-01${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}space-02${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}space-03${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf unset-space-quota '
}

@test 'Testing completion: cf unset-space-quota space-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'space-quotas'

        echo 'Getting space quotas as user-01...'
        echo 'OK'
        echo ''
        echo 'name       total memory   instance memory   routes      service instances   paid plans   app instances   route ports'
        echo 'quota-01   1G             512M              50          unlimited           allowed      unlimited       50'
        echo 'quota-02   2G             1G                unlimited   unlimited           disallowed   50              50'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf unset-space-quota space-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf unset-space-quota space-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name       ${reset_color}total memory   instance memory   routes      service instances   paid plans   app instances   route ports"
        assert ${lines[2]} same_as "${fg[yellow]}quota-01   ${reset_color}1G             512M              50          unlimited           allowed      unlimited       50"
        assert ${lines[3]} same_as "${fg[yellow]}quota-02   ${reset_color}2G             1G                unlimited   unlimited           disallowed   50              50"
    }

    prefix=
    _fzf_complete_cf 'cf unset-space-quota space-01 '
}

@test 'Testing completion: cf stack **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'stacks'

        echo 'Getting stacks in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name          description'
        echo 'windows2016   Microsoft Windows 2016'
        echo 'cflinuxfs3    Cloud Foundry Linux-based filesystem - Ubuntu Bionic 18.04 LTS'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf stack '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf stack '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}name          ${reset_color}description"
        assert ${lines[2]} same_as "${fg[yellow]}windows2016   ${reset_color}Microsoft Windows 2016"
        assert ${lines[3]} same_as "${fg[yellow]}cflinuxfs3    ${reset_color}Cloud Foundry Linux-based filesystem - Ubuntu Bionic 18.04 LTS"
    }

    prefix=
    _fzf_complete_cf 'cf stack '
}

@test 'Testing completion: cf bind-staging-security-group **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'staging-security-groups'

        echo 'Acquiring staging security group as user-01'
        echo 'OK'
        echo ''
        echo 'default_security_group'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf bind-staging-security-group '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'cf bind-staging-security-group '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 1
        assert ${lines[1]} same_as "${fg[yellow]}default_security_group${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf bind-staging-security-group '
}

@test 'Testing completion: cf unbind-staging-security-group **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'staging-security-groups'

        echo 'Acquiring staging security group as user-01'
        echo 'OK'
        echo ''
        echo 'default_security_group'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf unbind-staging-security-group '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'cf unbind-staging-security-group '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 1
        assert ${lines[1]} same_as "${fg[yellow]}default_security_group${reset_color}"
    }

    prefix=
    _fzf_complete_cf 'cf unbind-staging-security-group '
}

@test 'Testing completion: cf terminate-task **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'apps'

        echo 'Getting apps in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'name     requested state   instances   memory   disk   urls'
        echo 'app-01   started           3/3         1G       1G     app-01.example.com'
        echo 'app-02   started           2/2         512M     1G     app-02.example.com'
        echo 'app-03   stopped           0/1         256M     1G     app-03.example.com'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf terminate-task '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf terminate-task '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 4
        assert ${lines[1]} same_as "${fg[yellow]}name     ${reset_color}requested state   instances   memory   disk   urls"
        assert ${lines[2]} same_as "${fg[yellow]}app-01   ${reset_color}started           3/3         1G       1G     app-01.example.com"
        assert ${lines[3]} same_as "${fg[yellow]}app-02   ${reset_color}started           2/2         512M     1G     app-02.example.com"
        assert ${lines[4]} same_as "${fg[yellow]}app-03   ${reset_color}stopped           0/1         256M     1G     app-03.example.com"
    }

    prefix=
    _fzf_complete_cf 'cf terminate-task '
}

@test 'Testing completion: cf terminate-task app-01 **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 2
        assert $1 same_as 'tasks'
        assert $2 same_as 'app-01'

        echo 'Getting tasks for app app-01 in org org-01 / space space-01 as user-01...'
        echo 'OK'
        echo ''
        echo 'id   name       state       start time                      command'
        echo '2    ffffffff   FAILED      Sat, 01 Jan 2021 00:00:00 UTC   echo foo; sleep 100; echo bar'
        echo '1    00000000   SUCCEEDED   Sat, 01 Jan 2021 00:00:00 UTC   bin/rails db:migrate'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf terminate-task app-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf terminate-task app-01 '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}id   ${reset_color}name       state       start time                      command"
        assert ${lines[2]} same_as "${fg[yellow]}2    ${reset_color}ffffffff   FAILED      Sat, 01 Jan 2021 00:00:00 UTC   echo foo; sleep 100; echo bar"
        assert ${lines[3]} same_as "${fg[yellow]}1    ${reset_color}00000000   SUCCEEDED   Sat, 01 Jan 2021 00:00:00 UTC   bin/rails db:migrate"
    }

    prefix=
    _fzf_complete_cf 'cf terminate-task app-01 '
}

@test 'Testing completion: cf update-user-provided-service **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'services'

        echo 'Getting services in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name                                service         plan      bound apps       last operation     broker              upgrade available'
        echo 'service-instance-01                 service-01      plan-01   app-01           create succeeded   service-broker-01   '
        echo 'service-instance-02                 service-01      plan-02                    create failed      service-broker-01   '
        echo 'service-instance-03                 service-02      plan-01                    update succeeded   service-broker-02   '
        echo 'user-provided-service-instance-01   user-provided             app-01, app-02                                          '
        echo 'user-provided-service-instance-02   user-provided             app-03                                                  '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf update-user-provided-service '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf update-user-provided-service '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                                ${reset_color}service         plan      bound apps       last operation     broker              upgrade available"
        assert ${lines[2]} same_as "${fg[yellow]}service-instance-01                 ${reset_color}service-01      plan-01   app-01           create succeeded   service-broker-01   "
        assert ${lines[3]} same_as "${fg[yellow]}service-instance-02                 ${reset_color}service-01      plan-02                    create failed      service-broker-01   "
        assert ${lines[4]} same_as "${fg[yellow]}service-instance-03                 ${reset_color}service-02      plan-01                    update succeeded   service-broker-02   "
        assert ${lines[5]} same_as "${fg[yellow]}user-provided-service-instance-01   ${reset_color}user-provided             app-01, app-02                                          "
        assert ${lines[6]} same_as "${fg[yellow]}user-provided-service-instance-02   ${reset_color}user-provided             app-03                                                  "
    }

    prefix=
    _fzf_complete_cf 'cf update-user-provided-service '
}

@test 'Testing completion: cf update-user-provided-service user-provided-service-instance-01 -p **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/user_provided_service_instances?q=name:user-provided-service-instance-01&q=organization_guid:00000000-0000-0000-0000-000000000000&q=space_guid:00000000-0000-0000-0000-000000000000'

        echo '{
           "total_results": 1,
           "total_pages": 1,
           "prev_url": null,
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/user_provided_service_instances/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "user-provided-service-instance-01",
                    "credentials": {
                       "key-01": "value-01",
                       "key-02": "value-02",
                       "key-03": "value-03"
                    },
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "type": "user_provided_service_instance",
                    "syslog_drain_url": "",
                    "route_service_url": "",
                    "tags": [],
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "service_bindings_url": "/v2/user_provided_service_instances/00000000-0000-0000-0000-000000000000/service_bindings",
                    "routes_url": "/v2/user_provided_service_instances/00000000-0000-0000-0000-000000000000/routes"
                 }
              }
           ]
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf update-user-provided-service user-provided-service-instance-01 -p '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--tiebreak=index'
        assert $2 same_as '--multi'
        assert $3 same_as '--'
        assert $4 same_as 'cf update-user-provided-service user-provided-service-instance-01 -p '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as '{"key-01":"value-01"}'
        assert ${lines[2]} same_as '{"key-02":"value-02"}'
        assert ${lines[3]} same_as '{"key-03":"value-03"}'
    }

    prefix=
    _fzf_complete_cf 'cf update-user-provided-service user-provided-service-instance-01 -p '
}

@test 'Testing completion: cf update-user-provided-service user-provided-service-instance-01 -p**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/user_provided_service_instances?q=name:user-provided-service-instance-01&q=organization_guid:00000000-0000-0000-0000-000000000000&q=space_guid:00000000-0000-0000-0000-000000000000'

        echo '{
           "total_results": 1,
           "total_pages": 1,
           "prev_url": null,
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/user_provided_service_instances/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "user-provided-service-instance-01",
                    "credentials": {
                       "key-01": "value-01",
                       "key-02": "value-02",
                       "key-03": "value-03"
                    },
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "type": "user_provided_service_instance",
                    "syslog_drain_url": "",
                    "route_service_url": "",
                    "tags": [],
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "service_bindings_url": "/v2/user_provided_service_instances/00000000-0000-0000-0000-000000000000/service_bindings",
                    "routes_url": "/v2/user_provided_service_instances/00000000-0000-0000-0000-000000000000/routes"
                 }
              }
           ]
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf update-user-provided-service user-provided-service-instance-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--tiebreak=index'
        assert $2 same_as '--multi'
        assert $3 same_as '--'
        assert $4 same_as 'cf update-user-provided-service user-provided-service-instance-01 -p'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as '{"key-01":"value-01"}'
        assert ${lines[2]} same_as '{"key-02":"value-02"}'
        assert ${lines[3]} same_as '{"key-03":"value-03"}'
    }

    prefix=-p
    _fzf_complete_cf 'cf update-user-provided-service user-provided-service-instance-01 '
}

@test 'Testing completion: cf update-user-provided-service user-provided-service-instance-01 -p ./**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf update-user-provided-service user-provided-service-instance-01 -p '

        echo 'cf'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as './'
        assert $2 same_as 'cf update-user-provided-service user-provided-service-instance-01 -p '
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=./
    _fzf_complete_cf 'cf update-user-provided-service user-provided-service-instance-01 -p '

    assert __fzf_extract_command mock_times 1
}

@test 'Testing completion: cf update-user-provided-service user-provided-service-instance-01 -p./**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf update-user-provided-service user-provided-service-instance-01 '

        echo 'cf'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as './'
        assert $2 same_as 'cf update-user-provided-service user-provided-service-instance-01 -p'
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=-p./
    _fzf_complete_cf 'cf update-user-provided-service user-provided-service-instance-01 '

    assert __fzf_extract_command mock_times 1
}

@test 'Testing completion: cf uups **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 1
        assert $1 same_as 'services'

        echo 'Getting services in org org-01 / space space-01 as user-01...'
        echo ''
        echo 'name                                service         plan      bound apps       last operation     broker              upgrade available'
        echo 'service-instance-01                 service-01      plan-01   app-01           create succeeded   service-broker-01   '
        echo 'service-instance-02                 service-01      plan-02                    create failed      service-broker-01   '
        echo 'service-instance-03                 service-02      plan-01                    update succeeded   service-broker-02   '
        echo 'user-provided-service-instance-01   user-provided             app-01, app-02                                          '
        echo 'user-provided-service-instance-02   user-provided             app-03                                                  '
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf uups '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'cf uups '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 6
        assert ${lines[1]} same_as "${fg[yellow]}name                                ${reset_color}service         plan      bound apps       last operation     broker              upgrade available"
        assert ${lines[2]} same_as "${fg[yellow]}service-instance-01                 ${reset_color}service-01      plan-01   app-01           create succeeded   service-broker-01   "
        assert ${lines[3]} same_as "${fg[yellow]}service-instance-02                 ${reset_color}service-01      plan-02                    create failed      service-broker-01   "
        assert ${lines[4]} same_as "${fg[yellow]}service-instance-03                 ${reset_color}service-02      plan-01                    update succeeded   service-broker-02   "
        assert ${lines[5]} same_as "${fg[yellow]}user-provided-service-instance-01   ${reset_color}user-provided             app-01, app-02                                          "
        assert ${lines[6]} same_as "${fg[yellow]}user-provided-service-instance-02   ${reset_color}user-provided             app-03                                                  "
    }

    prefix=
    _fzf_complete_cf 'cf uups '
}

@test 'Testing completion: cf uups user-provided-service-instance-01 -p **' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/user_provided_service_instances?q=name:user-provided-service-instance-01&q=organization_guid:00000000-0000-0000-0000-000000000000&q=space_guid:00000000-0000-0000-0000-000000000000'

        echo '{
           "total_results": 1,
           "total_pages": 1,
           "prev_url": null,
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/user_provided_service_instances/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "user-provided-service-instance-01",
                    "credentials": {
                       "key-01": "value-01",
                       "key-02": "value-02",
                       "key-03": "value-03"
                    },
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "type": "user_provided_service_instance",
                    "syslog_drain_url": "",
                    "route_service_url": "",
                    "tags": [],
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "service_bindings_url": "/v2/user_provided_service_instances/00000000-0000-0000-0000-000000000000/service_bindings",
                    "routes_url": "/v2/user_provided_service_instances/00000000-0000-0000-0000-000000000000/routes"
                 }
              }
           ]
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf uups user-provided-service-instance-01 -p '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--tiebreak=index'
        assert $2 same_as '--multi'
        assert $3 same_as '--'
        assert $4 same_as 'cf uups user-provided-service-instance-01 -p '

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as '{"key-01":"value-01"}'
        assert ${lines[2]} same_as '{"key-02":"value-02"}'
        assert ${lines[3]} same_as '{"key-03":"value-03"}'
    }

    prefix=
    _fzf_complete_cf 'cf uups user-provided-service-instance-01 -p '
}

@test 'Testing completion: cf uups user-provided-service-instance-01 -p**' {
    cf_mock_1() {
        assert $# equals 1
        assert $1 same_as '--version'

        echo 'cf version 6.53.0+8e2b70a4a.2020-10-01'
    }

    cf_mock_2() {
        assert $# equals 2
        assert $1 same_as 'curl'
        assert $2 same_as '/v2/user_provided_service_instances?q=name:user-provided-service-instance-01&q=organization_guid:00000000-0000-0000-0000-000000000000&q=space_guid:00000000-0000-0000-0000-000000000000'

        echo '{
           "total_results": 1,
           "total_pages": 1,
           "prev_url": null,
           "next_url": null,
           "resources": [
              {
                 "metadata": {
                    "guid": "00000000-0000-0000-0000-000000000000",
                    "url": "/v2/user_provided_service_instances/00000000-0000-0000-0000-000000000000",
                    "created_at": "2021-01-01T00:00:00Z",
                    "updated_at": "2021-01-01T00:00:00Z"
                 },
                 "entity": {
                    "name": "user-provided-service-instance-01",
                    "credentials": {
                       "key-01": "value-01",
                       "key-02": "value-02",
                       "key-03": "value-03"
                    },
                    "space_guid": "00000000-0000-0000-0000-000000000000",
                    "type": "user_provided_service_instance",
                    "syslog_drain_url": "",
                    "route_service_url": "",
                    "tags": [],
                    "space_url": "/v2/spaces/00000000-0000-0000-0000-000000000000",
                    "service_bindings_url": "/v2/user_provided_service_instances/00000000-0000-0000-0000-000000000000/service_bindings",
                    "routes_url": "/v2/user_provided_service_instances/00000000-0000-0000-0000-000000000000/routes"
                 }
              }
           ]
        }'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf uups user-provided-service-instance-01 '

        echo 'cf'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--tiebreak=index'
        assert $2 same_as '--multi'
        assert $3 same_as '--'
        assert $4 same_as 'cf uups user-provided-service-instance-01 -p'

        run cat
        assert __fzf_extract_command mock_times 1
        assert cf mock_times 2
        assert ${#lines} equals 3
        assert ${lines[1]} same_as '{"key-01":"value-01"}'
        assert ${lines[2]} same_as '{"key-02":"value-02"}'
        assert ${lines[3]} same_as '{"key-03":"value-03"}'
    }

    prefix=-p
    _fzf_complete_cf 'cf uups user-provided-service-instance-01 '
}

@test 'Testing completion: cf uups user-provided-service-instance-01 -p ./**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf uups user-provided-service-instance-01 -p '

        echo 'cf'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as './'
        assert $2 same_as 'cf uups user-provided-service-instance-01 -p '
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=./
    _fzf_complete_cf 'cf uups user-provided-service-instance-01 -p '

    assert __fzf_extract_command mock_times 1
}

@test 'Testing completion: cf uups user-provided-service-instance-01 -p./**' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'cf uups user-provided-service-instance-01 '

        echo 'cf'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_generic_path_completion() {
        assert $# equals 6
        assert $1 same_as './'
        assert $2 same_as 'cf uups user-provided-service-instance-01 -p'
        assert $3 same_as '_fzf_compgen_path'
        assert $4 same_as ''
        assert $5 same_as ''
        assert $6 same_as ' '
    }

    prefix=-p./
    _fzf_complete_cf 'cf uups user-provided-service-instance-01 '

    assert __fzf_extract_command mock_times 1
}

@test 'Testing post: a resource' {
    input=(
        'app-01   started           3/3         1G       1G     app-01.example.com'
    )

    resource=apps
    resource_column=1
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'app-01'
}

@test 'Testing post: a resource with resource column' {
    input=(
        'app-01   started           3/3         1G       1G     app-01.example.com'
    )

    resource=apps
    resource_column=6
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'app-01.example.com'
}

@test 'Testing post: a buildpack name and stack' {
    input=(
        'binary_buildpack   1          true      true     binary-buildpack-cflinuxfs3-v1.0.39.zip   cflinuxfs3'
    )

    cf_version=6
    resource=buildpacks
    resource_column=2
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'binary_buildpack -s cflinuxfs3'
}

@test 'Testing post: a buildpack position' {
    input=(
        'binary_buildpack   1          true      true     binary-buildpack-cflinuxfs3-v1.0.39.zip   cflinuxfs3'
    )

    cf_version=6
    resource=buildpacks
    resource_column=1
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as '1'
}

@test 'Testing post: a service offering' {
    input=(
        'service-01   plan-01, plan-02   Provides service 01   service-broker-01'
    )

    resource=marketplace
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'service-01'
}

@test 'Testing post: a service offering argument with service broker' {
    input=(
        'service-01   plan-01, plan-02   Provides service 01   service-broker-01'
    )

    cf_options_argument_required=(-b -o -p)
    resource=marketplace
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as '-b service-broker-01 service-01'
}

@test 'Testing post: a service offering option with service broker' {
    input=(
        'service-01   plan-01, plan-02   Provides service 01   service-broker-01'
    )

    cf_options_argument_required=(-b -o -p)
    completing_option=-s
    resource=marketplace
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'service-01 -b service-broker-01'
}

@test 'Testing post: a service plan' {
    input=(
        'plan-01   A plan 01     free'
    )

    cf_options_argument_required=(-b -o -p)
    cf_arguments=(-s service-01)
    resource=marketplace
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'plan-01'
}

@test 'Testing post: a network policy' {
    input=(
        'app-01   app-02        tcp        8080        space-01            org-01'
    )

    cf_version=6
    resource=network-policies
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'app-01 --destination-app=app-02 --protocol=tcp --port=8080 -o org-01 -s space-01'
}

@test 'Testing post: an HTTP route bound to an app' {
    input=(
        'space-01   app       example.com                                    app-01'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'example.com --hostname=app'
}

@test 'Testing post: an HTTP route bound to apps' {
    input=(
        'space-01   app       example.com                                    app-01, app-02, app-03'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'example.com --hostname=app'
}

@test 'Testing post: an HTTP path route bound to an app' {
    input=(
        'space-01   app       example.com                      /sub          app-02'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'example.com --hostname=app --path=/sub'
}

@test 'Testing post: an HTTP path route bound to apps' {
    input=(
        'space-01   app       example.com                      /sub          app-02, app-03, app-04'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'example.com --hostname=app --path=/sub'
}

@test 'Testing post: an HTTP route bound to an app and service' {
    input=(
        'space-01   service   example.com                                    app-03                   service-instance-03'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'example.com --hostname=service'
}

@test 'Testing post: an HTTP route bound to apps and service' {
    input=(
        'space-01   service   example.com                                    app-03, app-04, app-05   service-instance-03'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'example.com --hostname=service'
}

@test 'Testing post: an HTTP path route bound to an app and service' {
    input=(
        'space-01   service   example.com                      /sub          app-04                   service-instance-03'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'example.com --hostname=service --path=/sub'
}

@test 'Testing post: an HTTP path route bound to apps and service' {
    input=(
        'space-01   service   example.com                      /sub          app-04, app-05, app-06   service-instance-03'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'example.com --hostname=service --path=/sub'
}

@test 'Testing post: an HTTP route' {
    input=(
        'space-01   app       unbound.example.com'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'unbound.example.com --hostname=app'
}

@test 'Testing post: an HTTP path route' {
    input=(
        'space-01   app       unbound.example.com              /sub'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'unbound.example.com --hostname=app --path=/sub'
}

@test 'Testing post: an HTTP route bound to a service' {
    input=(
        'space-01   service   unbound.example.com                                                     service-instance-03'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'unbound.example.com --hostname=service'
}

@test 'Testing post: an HTTP path route bound to a service' {
    input=(
        'space-01   service   unbound.example.com              /sub                                   service-instance-03'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'unbound.example.com --hostname=service --path=/sub'
}

@test 'Testing post: an HTTP domain route bound to an app' {
    input=(
        'space-01             example.com                                    app-01'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'example.com'
}

@test 'Testing post: an HTTP domain route bound to apps' {
    input=(
        'space-01             example.com                                    app-01, app-02, app-03'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'example.com'
}

@test 'Testing post: an HTTP domain path route bound to an app' {
    input=(
        'space-01             example.com                      /sub          app-02'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'example.com --path=/sub'
}

@test 'Testing post: an HTTP domain path route bound to apps' {
    input=(
        'space-01             example.com                      /sub          app-02, app-03, app-04'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'example.com --path=/sub'
}

@test 'Testing post: an HTTP domain route bound to an app and service' {
    input=(
        'space-01             example.com                                    app-03                   service-instance-03'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'example.com'
}

@test 'Testing post: an HTTP domain route bound to apps and service' {
    input=(
        'space-01             example.com                                    app-03, app-04, app-05   service-instance-03'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'example.com'
}

@test 'Testing post: an HTTP domain path route bound to an app and service' {
    input=(
        'space-01             example.com                      /sub          app-04                   service-instance-03'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'example.com --path=/sub'
}

@test 'Testing post: an HTTP domain path route bound to apps and service' {
    input=(
        'space-01             example.com                      /sub          app-04, app-05, app-06   service-instance-03'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'example.com --path=/sub'
}

@test 'Testing post: an HTTP domain route' {
    input=(
        'space-01             unbound.example.com'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'unbound.example.com'
}

@test 'Testing post: an HTTP domain path route' {
    input=(
        'space-01             unbound.example.com              /sub'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'unbound.example.com --path=/sub'
}

@test 'Testing post: an HTTP domain route bound to a service' {
    input=(
        'space-01             unbound.example.com                                                     service-instance-03'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'unbound.example.com'
}

@test 'Testing post: an HTTP domain path route bound to a service' {
    input=(
        'space-01             unbound.example.com              /sub                                   service-instance-03'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'unbound.example.com --path=/sub'
}

@test 'Testing post: a TCP route bound to an app' {
    input=(
        'space-01             tcp.example.com           1024          tcp    app-01'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'tcp.example.com --port=1024'
}

@test 'Testing post: a TCP route bound to apps' {
    input=(
        'space-01             tcp.example.com           1024          tcp    app-01, app-02, app-03'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'tcp.example.com --port=1024'
}

@test 'Testing post: a TCP route bound to an app and service' {
    input=(
        'space-01             tcp.example.com           1025          tcp    app-03                   service-instance-03'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'tcp.example.com --port=1025'
}

@test 'Testing post: a TCP route bound to apps and service' {
    input=(
        'space-01             tcp.example.com           1025          tcp    app-03, app-04, app-05   service-instance-03'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'tcp.example.com --port=1025'
}

@test 'Testing post: a TCP route' {
    input=(
        'space-01             tcp.unbound.example.com   1024          tcp'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'tcp.unbound.example.com --port=1024'
}

@test 'Testing post: a TCP route bound to a service' {
    input=(
        'space-01             tcp.unbound.example.com   1025          tcp                             service-instance-03'
    )

    resource=routes
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'tcp.unbound.example.com --port=1025'
}

@test 'Testing post: a security group with index' {
    input=(
        '#0   default_security_group   <all>          <all>   running'
    )

    resource=security-groups
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'default_security_group'
}

@test 'Testing post: a security group without index' {
    input=(
        '     default_security_group   <all>          <all>   staging'
    )

    resource=security-groups
    run _fzf_complete_cf-resources_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'default_security_group'
}

@test 'Testing post: an app instance index' {
    input=(
        '#0   running   2021-01-01T00:00:00Z   0.5%   100.0M of 1G   100.0M of 1G   '
    )

    run _fzf_complete_cf-app-instances_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as '0'
}

@test 'Testing post: an app' {
    input=(
        'app-01       '
    )

    run _fzf_complete_cf-apps-by-org-space_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'app-01'
}

@test 'Testing post: an environment variable' {
    input=(
        'key-01  value-01'
    )

    run _fzf_complete_cf-envs_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'key-01'
}

@test 'Testing post: a service plan by service instance' {
    input=(
        'plan-01        A plan 01         free'
    )

    run _fzf_complete_cf-service-plans-by-service-instance_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'plan-01'
}

@test 'Testing post: a space' {
    input=(
        'space-01       '
    )

    run _fzf_complete_cf-spaces-by-org_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as 'space-01'
}

@test 'Testing post: credentials of a user-provided service instance' {
    input=(
        '{"key-01":"value-01"}'
        '{"key-02":"value-02"}'
        '{"key-03":"value-03"}'
    )

    run _fzf_complete_cf-user-provided-service-instance-credentials_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as '"{\"key-01\":\"value-01\",\"key-02\":\"value-02\",\"key-03\":\"value-03\"}"'
}
