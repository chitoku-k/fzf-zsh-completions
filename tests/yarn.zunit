#!/usr/bin/env zunit

@setup {
    load ../fzf-zsh-completions.plugin.zsh
    load _helpers/assertions.zsh
    load _helpers/mock.zsh
    mock _fzf_complete_yarn_unknown-subcommand
    mock __fzf_extract_command

    pushd tests/_support/npm
}

@teardown {
    (unmock _fzf_complete_yarn_run)
    (unmock _fzf_complete_yarn_unknown-subcommand)
    (unmock __fzf_extract_command)
}

@test 'Testing overridden completion: yarn run **' {
    mock _fzf_complete_yarn_run

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'yarn run '

        echo 'yarn'
    }

    _fzf_complete_yarn_run_mock_1() {
        assert $# equals 1
        assert $1 same_as 'yarn run '
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_yarn 'yarn run '

    assert _fzf_complete_yarn_run mock_times 1
}

@test 'Testing overridden completion: yarn unknown-subcommand **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'yarn unknown-subcommand '

        echo 'yarn'
    }

    _fzf_complete_yarn_unknown-subcommand_mock_1() {
        assert $# equals 1
        assert $1 same_as 'yarn unknown-subcommand '
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_yarn 'yarn unknown-subcommand '

    assert _fzf_complete_yarn_unknown-subcommand mock_times 1
}

@test 'Testing completion: yarn **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'yarn '

        echo 'yarn'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--tiebreak=index'
        assert $5 same_as '--'
        assert $6 same_as 'yarn '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 6

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 4
        assert ${actual1[1]} same_as 'start'
        assert ${actual1[2]} same_as 'test'
        assert ${actual1[3]} same_as ' script containing spaces '
        assert ${actual1[4]} same_as 'script'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'that'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 1
        assert ${actual3[1]} same_as 'consists'

        actual4=(${(0)lines[4]})
        assert ${#actual4} equals 1
        assert ${actual4[1]} same_as 'of'

        actual5=(${(0)lines[5]})
        assert ${#actual5} equals 1
        assert ${actual5[1]} same_as 'multiple'

        actual6=(${(0)lines[6]})
        assert ${actual6[1]} same_as 'lines'
    }

    prefix=
    _fzf_complete_yarn 'yarn '
}

@test 'Testing completion: TEST1=value1 TEST2=value2 yarn **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'TEST1=value1 TEST2=value2 yarn '

        echo 'yarn'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--tiebreak=index'
        assert $5 same_as '--'
        assert $6 same_as 'TEST1=value1 TEST2=value2 yarn '

        assert $TEST1 same_as value1
        assert $TEST2 same_as value2

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 6

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 4
        assert ${actual1[1]} same_as 'start'
        assert ${actual1[2]} same_as 'test'
        assert ${actual1[3]} same_as ' script containing spaces '
        assert ${actual1[4]} same_as 'script'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'that'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 1
        assert ${actual3[1]} same_as 'consists'

        actual4=(${(0)lines[4]})
        assert ${#actual4} equals 1
        assert ${actual4[1]} same_as 'of'

        actual5=(${(0)lines[5]})
        assert ${#actual5} equals 1
        assert ${actual5[1]} same_as 'multiple'

        actual6=(${(0)lines[6]})
        assert ${actual6[1]} same_as 'lines'
    }

    prefix=
    _fzf_complete_yarn 'TEST1=value1 TEST2=value2 yarn '

    assert $TEST1 is_empty
    assert $TEST2 is_empty
}

@test 'Testing completion: yarn run **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'yarn run '

        echo 'yarn'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--tiebreak=index'
        assert $5 same_as '--'
        assert $6 same_as 'yarn run '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 6

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 4
        assert ${actual1[1]} same_as 'start'
        assert ${actual1[2]} same_as 'test'
        assert ${actual1[3]} same_as ' script containing spaces '
        assert ${actual1[4]} same_as 'script'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'that'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 1
        assert ${actual3[1]} same_as 'consists'

        actual4=(${(0)lines[4]})
        assert ${#actual4} equals 1
        assert ${actual4[1]} same_as 'of'

        actual5=(${(0)lines[5]})
        assert ${#actual5} equals 1
        assert ${actual5[1]} same_as 'multiple'

        actual6=(${(0)lines[6]})
        assert ${actual6[1]} same_as 'lines'
    }

    prefix=
    _fzf_complete_yarn 'yarn run '
}

@test 'Testing completion: yarn workspace **' {
    popd
    pushd tests/_support/yarn/workspace

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'yarn workspace '

        echo 'yarn'
    }

    _fzf_complete() {
        assert $# equals 4
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--'
        assert $4 same_as 'yarn workspace '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 3

        assert ${lines[1]} same_as 'package-a'
        assert ${lines[2]} same_as 'package-b'
        assert ${lines[3]} same_as 'examples-a'
    }

    prefix=
    _fzf_complete_yarn 'yarn workspace '
}

@test 'Testing completion: yarn workspace package-a **' {
    popd
    pushd tests/_support/yarn/workspace

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'yarn workspace package-a '

        echo 'yarn'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--tiebreak=index'
        assert $5 same_as '--'
        assert $6 same_as 'yarn workspace package-a '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 6

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 5
        assert ${actual1[1]} same_as 'start'
        assert ${actual1[2]} same_as 'test'
        assert ${actual1[3]} same_as 'package-a-command'
        assert ${actual1[4]} same_as ' script containing spaces '
        assert ${actual1[5]} same_as 'script'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'that'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 1
        assert ${actual3[1]} same_as 'consists'

        actual4=(${(0)lines[4]})
        assert ${#actual4} equals 1
        assert ${actual4[1]} same_as 'of'

        actual5=(${(0)lines[5]})
        assert ${#actual5} equals 1
        assert ${actual5[1]} same_as 'multiple'

        actual6=(${(0)lines[6]})
        assert ${actual6[1]} same_as 'lines'
    }

    prefix=
    _fzf_complete_yarn 'yarn workspace package-a '
}

@test 'Testing completion: yarn workspace package-b **' {
    popd
    pushd tests/_support/yarn/workspace

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'yarn workspace package-b '

        echo 'yarn'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--tiebreak=index'
        assert $5 same_as '--'
        assert $6 same_as 'yarn workspace package-b '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 6

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 5
        assert ${actual1[1]} same_as 'start'
        assert ${actual1[2]} same_as 'test'
        assert ${actual1[3]} same_as 'package-b-command'
        assert ${actual1[4]} same_as ' script containing spaces '
        assert ${actual1[5]} same_as 'script'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'that'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 1
        assert ${actual3[1]} same_as 'consists'

        actual4=(${(0)lines[4]})
        assert ${#actual4} equals 1
        assert ${actual4[1]} same_as 'of'

        actual5=(${(0)lines[5]})
        assert ${#actual5} equals 1
        assert ${actual5[1]} same_as 'multiple'

        actual6=(${(0)lines[6]})
        assert ${actual6[1]} same_as 'lines'
    }

    prefix=
    _fzf_complete_yarn 'yarn workspace package-b '
}

@test 'Testing completion: yarn workspace examples-a **' {
    popd
    pushd tests/_support/yarn/workspace

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'yarn workspace examples-a '

        echo 'yarn'
    }

    _fzf_complete() {
        assert $# equals 6
        assert $1 same_as '--ansi'
        assert $2 same_as '--read0'
        assert $3 same_as '--print0'
        assert $4 same_as '--tiebreak=index'
        assert $5 same_as '--'
        assert $6 same_as 'yarn workspace examples-a '

        run cat
        assert __fzf_extract_command mock_times 1
        assert ${#lines} equals 6

        actual1=(${(0)lines[1]})
        assert ${#actual1} equals 5
        assert ${actual1[1]} same_as 'start'
        assert ${actual1[2]} same_as 'test'
        assert ${actual1[3]} same_as 'examples-a-command'
        assert ${actual1[4]} same_as ' script containing spaces '
        assert ${actual1[5]} same_as 'script'

        actual2=(${(0)lines[2]})
        assert ${#actual2} equals 1
        assert ${actual2[1]} same_as 'that'

        actual3=(${(0)lines[3]})
        assert ${#actual3} equals 1
        assert ${actual3[1]} same_as 'consists'

        actual4=(${(0)lines[4]})
        assert ${#actual4} equals 1
        assert ${actual4[1]} same_as 'of'

        actual5=(${(0)lines[5]})
        assert ${#actual5} equals 1
        assert ${actual5[1]} same_as 'multiple'

        actual6=(${(0)lines[6]})
        assert ${actual6[1]} same_as 'lines'
    }

    prefix=
    _fzf_complete_yarn 'yarn workspace examples-a '
}

@test 'Testing completion: yarn workspace no-workspace **' {
    popd
    pushd tests/_support/yarn/workspace

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'yarn workspace no-workspace '

        echo 'yarn'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_yarn 'yarn workspace no-workspace '

    assert __fzf_extract_command mock_times 1
    assert $? equals 0
}

@test 'Testing completion: yarn "" run **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'yarn "" run '

        echo 'yarn'
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    _fzf_path_completion() {
        assert $# equals 2
        assert $1 same_as ''
        assert $2 same_as 'yarn "" run '

        assert __fzf_extract_command mock_times 1
    }

    prefix=
    _fzf_complete_yarn 'yarn "" run '
}
