#!/usr/bin/env zunit

@setup {
    load ../fzf-zsh-completions.plugin.zsh
    load _helpers/mock.zsh
    load _helpers/assertions.zsh
    mock gh
    mock _fzf_complete_gh_unknown-subcommand
    mock __fzf_extract_command
}

@teardown {
    (unmock gh)
    (unmock _fzf_complete_gh_pr)
    (unmock _fzf_complete_gh_unknown-subcommand)
    (unmock __fzf_extract_command)
}

@test 'Testing overridden completion: gh pr **' {
    mock _fzf_complete_gh_pr

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'gh pr '

        echo 'gh'
    }

    _fzf_complete_gh_pr_mock_1() {
        assert $# equals 1
        assert $1 same_as 'gh pr '
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_gh 'gh pr '

    assert _fzf_complete_gh_pr mock_times 1
}

@test 'Testing overridden completion: gh unknown-subcommand **' {
    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'gh unknown-subcommand '

        echo 'gh'
    }

    _fzf_complete_gh_unknown-subcommand_mock_1() {
        assert $# equals 1
        assert $1 same_as 'gh unknown-subcommand '
    }

    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    prefix=
    _fzf_complete_gh 'gh unknown-subcommand '

    assert _fzf_complete_gh_unknown-subcommand mock_times 1
}

@test 'Testing completion: gh **' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'gh '

        echo 'gh'
    }

    _fzf_path_completion() {
        assert $# equals 2
        assert $1 same_as ''
        assert $2 same_as 'gh '

        assert __fzf_extract_command mock_times 1
    }

    prefix=
    _fzf_complete_gh 'gh '
}

@test 'Testing completion: TEST1=value1 TEST2=value2 gh **' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'TEST1=value1 TEST2=value2 gh '

        echo 'gh'
    }

    _fzf_path_completion() {
        assert $# equals 2
        assert $1 same_as ''
        assert $2 same_as 'TEST1=value1 TEST2=value2 gh '

        assert $TEST1 same_as value1
        assert $TEST2 same_as value2

        assert __fzf_extract_command mock_times 1
    }

    prefix=
    _fzf_complete_gh 'TEST1=value1 TEST2=value2 gh '

    assert $TEST1 is_empty
    assert $TEST2 is_empty
}

@test 'Testing completion: gh pr **' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'gh pr '

        echo 'gh'
    }

    prefix=
    _fzf_complete_gh 'gh pr '

    assert $? equals 0
    assert __fzf_extract_command mock_times 1
}

@test 'Testing completion: gh pr close **' {
    gh_mock_1() {
        assert $# equals 4
        assert $1 same_as 'pr'
        assert $2 same_as 'list'
        assert $3 same_as '--state'
        assert $4 same_as 'open'

        echo "8\t2nd OPEN PR\t2nd-open\tOPEN"
        echo "7\t2nd DRAFT PR\t2nd-draft\tDRAFT"
        echo "4\t1st OPEN PR\t1st-open\tOPEN"
        echo "3\t1st DRAFT PR\t1st-draft\tDRAFT"
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'gh pr close '

        echo 'gh'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'gh pr close '

        run cat
        assert __fzf_extract_command mock_times 1
        assert gh mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}#${reset_color}  ${reset_color}TITLE       ${reset_color}  ${fg[blue]}HEAD     ${reset_color}  ${fg[green]}STATE${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}8${reset_color}  ${reset_color}2nd OPEN PR ${reset_color}  ${fg[blue]}2nd-open ${reset_color}  ${fg[green]}OPEN ${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}7${reset_color}  ${reset_color}2nd DRAFT PR${reset_color}  ${fg[blue]}2nd-draft${reset_color}  ${fg[green]}DRAFT${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}4${reset_color}  ${reset_color}1st OPEN PR ${reset_color}  ${fg[blue]}1st-open ${reset_color}  ${fg[green]}OPEN ${reset_color}"
        assert ${lines[5]} same_as "${fg[yellow]}3${reset_color}  ${reset_color}1st DRAFT PR${reset_color}  ${fg[blue]}1st-draft${reset_color}  ${fg[green]}DRAFT${reset_color}"
    }

    prefix=
    _fzf_complete_gh 'gh pr close '
}

@test 'Testing completion: gh pr merge **' {
    gh_mock_1() {
        assert $# equals 4
        assert $1 same_as 'pr'
        assert $2 same_as 'list'
        assert $3 same_as '--state'
        assert $4 same_as 'open'

        echo "8\t2nd OPEN PR\t2nd-open\tOPEN"
        echo "7\t2nd DRAFT PR\t2nd-draft\tDRAFT"
        echo "4\t1st OPEN PR\t1st-open\tOPEN"
        echo "3\t1st DRAFT PR\t1st-draft\tDRAFT"
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'gh pr merge '

        echo 'gh'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'gh pr merge '

        run cat
        assert __fzf_extract_command mock_times 1
        assert gh mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}#${reset_color}  ${reset_color}TITLE       ${reset_color}  ${fg[blue]}HEAD     ${reset_color}  ${fg[green]}STATE${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}8${reset_color}  ${reset_color}2nd OPEN PR ${reset_color}  ${fg[blue]}2nd-open ${reset_color}  ${fg[green]}OPEN ${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}7${reset_color}  ${reset_color}2nd DRAFT PR${reset_color}  ${fg[blue]}2nd-draft${reset_color}  ${fg[green]}DRAFT${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}4${reset_color}  ${reset_color}1st OPEN PR ${reset_color}  ${fg[blue]}1st-open ${reset_color}  ${fg[green]}OPEN ${reset_color}"
        assert ${lines[5]} same_as "${fg[yellow]}3${reset_color}  ${reset_color}1st DRAFT PR${reset_color}  ${fg[blue]}1st-draft${reset_color}  ${fg[green]}DRAFT${reset_color}"
    }

    prefix=
    _fzf_complete_gh 'gh pr merge '
}

@test 'Testing completion: gh pr ready **' {
    gh_mock_1() {
        assert $# equals 4
        assert $1 same_as 'pr'
        assert $2 same_as 'list'
        assert $3 same_as '--state'
        assert $4 same_as 'open'

        echo "8\t2nd OPEN PR\t2nd-open\tOPEN"
        echo "7\t2nd DRAFT PR\t2nd-draft\tDRAFT"
        echo "4\t1st OPEN PR\t1st-open\tOPEN"
        echo "3\t1st DRAFT PR\t1st-draft\tDRAFT"
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'gh pr ready '

        echo 'gh'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'gh pr ready '

        run cat
        assert __fzf_extract_command mock_times 1
        assert gh mock_times 1
        assert ${#lines} equals 5
        assert ${lines[1]} same_as "${fg[yellow]}#${reset_color}  ${reset_color}TITLE       ${reset_color}  ${fg[blue]}HEAD     ${reset_color}  ${fg[green]}STATE${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}8${reset_color}  ${reset_color}2nd OPEN PR ${reset_color}  ${fg[blue]}2nd-open ${reset_color}  ${fg[green]}OPEN ${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}7${reset_color}  ${reset_color}2nd DRAFT PR${reset_color}  ${fg[blue]}2nd-draft${reset_color}  ${fg[green]}DRAFT${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}4${reset_color}  ${reset_color}1st OPEN PR ${reset_color}  ${fg[blue]}1st-open ${reset_color}  ${fg[green]}OPEN ${reset_color}"
        assert ${lines[5]} same_as "${fg[yellow]}3${reset_color}  ${reset_color}1st DRAFT PR${reset_color}  ${fg[blue]}1st-draft${reset_color}  ${fg[green]}DRAFT${reset_color}"
    }

    prefix=
    _fzf_complete_gh 'gh pr ready '
}

@test 'Testing completion: gh pr reopen **' {
    gh_mock_1() {
        assert $# equals 4
        assert $1 same_as 'pr'
        assert $2 same_as 'list'
        assert $3 same_as '--state'
        assert $4 same_as 'closed'

        echo "5\t2nd CLOSED PR\t2nd-closed\tCLOSED"
        echo "1\t1st CLOSED PR\t1st-closed\tCLOSED"
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'gh pr reopen '

        echo 'gh'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'gh pr reopen '

        run cat
        assert __fzf_extract_command mock_times 1
        assert gh mock_times 1
        assert ${#lines} equals 3
        assert ${lines[1]} same_as "${fg[yellow]}#${reset_color}  ${reset_color}TITLE        ${reset_color}  ${fg[blue]}HEAD      ${reset_color}  ${fg[green]}STATE ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}5${reset_color}  ${reset_color}2nd CLOSED PR${reset_color}  ${fg[blue]}2nd-closed${reset_color}  ${fg[green]}CLOSED${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}1${reset_color}  ${reset_color}1st CLOSED PR${reset_color}  ${fg[blue]}1st-closed${reset_color}  ${fg[green]}CLOSED${reset_color}"
    }

    prefix=
    _fzf_complete_gh 'gh pr reopen '
}

@test 'Testing completion: gh pr checkout **' {
    gh_mock_1() {
        assert $# equals 4
        assert $1 same_as 'pr'
        assert $2 same_as 'list'
        assert $3 same_as '--state'
        assert $4 same_as 'all'

        echo "8\t2nd OPEN PR\t2nd-open\tOPEN"
        echo "7\t2nd DRAFT PR\t2nd-draft\tDRAFT"
        echo "6\t2nd MERGED PR\t2nd-merged\tMERGED"
        echo "5\t2nd CLOSED PR\t2nd-closed\tCLOSED"
        echo "4\t1st OPEN PR\t1st-open\tOPEN"
        echo "3\t1st DRAFT PR\t1st-draft\tDRAFT"
        echo "2\t1st MERGED PR\t1st-merged\tMERGED"
        echo "1\t1st CLOSED PR\t1st-closed\tCLOSED"
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'gh pr checkout '

        echo 'gh'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'gh pr checkout '

        run cat
        assert __fzf_extract_command mock_times 1
        assert gh mock_times 1
        assert ${#lines} equals 9
        assert ${lines[1]} same_as "${fg[yellow]}#${reset_color}  ${reset_color}TITLE        ${reset_color}  ${fg[blue]}HEAD      ${reset_color}  ${fg[green]}STATE ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}8${reset_color}  ${reset_color}2nd OPEN PR  ${reset_color}  ${fg[blue]}2nd-open  ${reset_color}  ${fg[green]}OPEN  ${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}7${reset_color}  ${reset_color}2nd DRAFT PR ${reset_color}  ${fg[blue]}2nd-draft ${reset_color}  ${fg[green]}DRAFT ${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}6${reset_color}  ${reset_color}2nd MERGED PR${reset_color}  ${fg[blue]}2nd-merged${reset_color}  ${fg[green]}MERGED${reset_color}"
        assert ${lines[5]} same_as "${fg[yellow]}5${reset_color}  ${reset_color}2nd CLOSED PR${reset_color}  ${fg[blue]}2nd-closed${reset_color}  ${fg[green]}CLOSED${reset_color}"
        assert ${lines[6]} same_as "${fg[yellow]}4${reset_color}  ${reset_color}1st OPEN PR  ${reset_color}  ${fg[blue]}1st-open  ${reset_color}  ${fg[green]}OPEN  ${reset_color}"
        assert ${lines[7]} same_as "${fg[yellow]}3${reset_color}  ${reset_color}1st DRAFT PR ${reset_color}  ${fg[blue]}1st-draft ${reset_color}  ${fg[green]}DRAFT ${reset_color}"
        assert ${lines[8]} same_as "${fg[yellow]}2${reset_color}  ${reset_color}1st MERGED PR${reset_color}  ${fg[blue]}1st-merged${reset_color}  ${fg[green]}MERGED${reset_color}"
        assert ${lines[9]} same_as "${fg[yellow]}1${reset_color}  ${reset_color}1st CLOSED PR${reset_color}  ${fg[blue]}1st-closed${reset_color}  ${fg[green]}CLOSED${reset_color}"
    }

    prefix=
    _fzf_complete_gh 'gh pr checkout '
}

@test 'Testing completion: gh pr comment **' {
    gh_mock_1() {
        assert $# equals 4
        assert $1 same_as 'pr'
        assert $2 same_as 'list'
        assert $3 same_as '--state'
        assert $4 same_as 'all'

        echo "8\t2nd OPEN PR\t2nd-open\tOPEN"
        echo "7\t2nd DRAFT PR\t2nd-draft\tDRAFT"
        echo "6\t2nd MERGED PR\t2nd-merged\tMERGED"
        echo "5\t2nd CLOSED PR\t2nd-closed\tCLOSED"
        echo "4\t1st OPEN PR\t1st-open\tOPEN"
        echo "3\t1st DRAFT PR\t1st-draft\tDRAFT"
        echo "2\t1st MERGED PR\t1st-merged\tMERGED"
        echo "1\t1st CLOSED PR\t1st-closed\tCLOSED"
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'gh pr comment '

        echo 'gh'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'gh pr comment '

        run cat
        assert __fzf_extract_command mock_times 1
        assert gh mock_times 1
        assert ${#lines} equals 9
        assert ${lines[1]} same_as "${fg[yellow]}#${reset_color}  ${reset_color}TITLE        ${reset_color}  ${fg[blue]}HEAD      ${reset_color}  ${fg[green]}STATE ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}8${reset_color}  ${reset_color}2nd OPEN PR  ${reset_color}  ${fg[blue]}2nd-open  ${reset_color}  ${fg[green]}OPEN  ${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}7${reset_color}  ${reset_color}2nd DRAFT PR ${reset_color}  ${fg[blue]}2nd-draft ${reset_color}  ${fg[green]}DRAFT ${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}6${reset_color}  ${reset_color}2nd MERGED PR${reset_color}  ${fg[blue]}2nd-merged${reset_color}  ${fg[green]}MERGED${reset_color}"
        assert ${lines[5]} same_as "${fg[yellow]}5${reset_color}  ${reset_color}2nd CLOSED PR${reset_color}  ${fg[blue]}2nd-closed${reset_color}  ${fg[green]}CLOSED${reset_color}"
        assert ${lines[6]} same_as "${fg[yellow]}4${reset_color}  ${reset_color}1st OPEN PR  ${reset_color}  ${fg[blue]}1st-open  ${reset_color}  ${fg[green]}OPEN  ${reset_color}"
        assert ${lines[7]} same_as "${fg[yellow]}3${reset_color}  ${reset_color}1st DRAFT PR ${reset_color}  ${fg[blue]}1st-draft ${reset_color}  ${fg[green]}DRAFT ${reset_color}"
        assert ${lines[8]} same_as "${fg[yellow]}2${reset_color}  ${reset_color}1st MERGED PR${reset_color}  ${fg[blue]}1st-merged${reset_color}  ${fg[green]}MERGED${reset_color}"
        assert ${lines[9]} same_as "${fg[yellow]}1${reset_color}  ${reset_color}1st CLOSED PR${reset_color}  ${fg[blue]}1st-closed${reset_color}  ${fg[green]}CLOSED${reset_color}"
    }

    prefix=
    _fzf_complete_gh 'gh pr comment '
}

@test 'Testing completion: gh pr diff **' {
    gh_mock_1() {
        assert $# equals 4
        assert $1 same_as 'pr'
        assert $2 same_as 'list'
        assert $3 same_as '--state'
        assert $4 same_as 'all'

        echo "8\t2nd OPEN PR\t2nd-open\tOPEN"
        echo "7\t2nd DRAFT PR\t2nd-draft\tDRAFT"
        echo "6\t2nd MERGED PR\t2nd-merged\tMERGED"
        echo "5\t2nd CLOSED PR\t2nd-closed\tCLOSED"
        echo "4\t1st OPEN PR\t1st-open\tOPEN"
        echo "3\t1st DRAFT PR\t1st-draft\tDRAFT"
        echo "2\t1st MERGED PR\t1st-merged\tMERGED"
        echo "1\t1st CLOSED PR\t1st-closed\tCLOSED"
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'gh pr diff '

        echo 'gh'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'gh pr diff '

        run cat
        assert __fzf_extract_command mock_times 1
        assert gh mock_times 1
        assert ${#lines} equals 9
        assert ${lines[1]} same_as "${fg[yellow]}#${reset_color}  ${reset_color}TITLE        ${reset_color}  ${fg[blue]}HEAD      ${reset_color}  ${fg[green]}STATE ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}8${reset_color}  ${reset_color}2nd OPEN PR  ${reset_color}  ${fg[blue]}2nd-open  ${reset_color}  ${fg[green]}OPEN  ${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}7${reset_color}  ${reset_color}2nd DRAFT PR ${reset_color}  ${fg[blue]}2nd-draft ${reset_color}  ${fg[green]}DRAFT ${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}6${reset_color}  ${reset_color}2nd MERGED PR${reset_color}  ${fg[blue]}2nd-merged${reset_color}  ${fg[green]}MERGED${reset_color}"
        assert ${lines[5]} same_as "${fg[yellow]}5${reset_color}  ${reset_color}2nd CLOSED PR${reset_color}  ${fg[blue]}2nd-closed${reset_color}  ${fg[green]}CLOSED${reset_color}"
        assert ${lines[6]} same_as "${fg[yellow]}4${reset_color}  ${reset_color}1st OPEN PR  ${reset_color}  ${fg[blue]}1st-open  ${reset_color}  ${fg[green]}OPEN  ${reset_color}"
        assert ${lines[7]} same_as "${fg[yellow]}3${reset_color}  ${reset_color}1st DRAFT PR ${reset_color}  ${fg[blue]}1st-draft ${reset_color}  ${fg[green]}DRAFT ${reset_color}"
        assert ${lines[8]} same_as "${fg[yellow]}2${reset_color}  ${reset_color}1st MERGED PR${reset_color}  ${fg[blue]}1st-merged${reset_color}  ${fg[green]}MERGED${reset_color}"
        assert ${lines[9]} same_as "${fg[yellow]}1${reset_color}  ${reset_color}1st CLOSED PR${reset_color}  ${fg[blue]}1st-closed${reset_color}  ${fg[green]}CLOSED${reset_color}"
    }

    prefix=
    _fzf_complete_gh 'gh pr diff '
}

@test 'Testing completion: gh pr edit **' {
    gh_mock_1() {
        assert $# equals 4
        assert $1 same_as 'pr'
        assert $2 same_as 'list'
        assert $3 same_as '--state'
        assert $4 same_as 'all'

        echo "8\t2nd OPEN PR\t2nd-open\tOPEN"
        echo "7\t2nd DRAFT PR\t2nd-draft\tDRAFT"
        echo "6\t2nd MERGED PR\t2nd-merged\tMERGED"
        echo "5\t2nd CLOSED PR\t2nd-closed\tCLOSED"
        echo "4\t1st OPEN PR\t1st-open\tOPEN"
        echo "3\t1st DRAFT PR\t1st-draft\tDRAFT"
        echo "2\t1st MERGED PR\t1st-merged\tMERGED"
        echo "1\t1st CLOSED PR\t1st-closed\tCLOSED"
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'gh pr edit '

        echo 'gh'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'gh pr edit '

        run cat
        assert __fzf_extract_command mock_times 1
        assert gh mock_times 1
        assert ${#lines} equals 9
        assert ${lines[1]} same_as "${fg[yellow]}#${reset_color}  ${reset_color}TITLE        ${reset_color}  ${fg[blue]}HEAD      ${reset_color}  ${fg[green]}STATE ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}8${reset_color}  ${reset_color}2nd OPEN PR  ${reset_color}  ${fg[blue]}2nd-open  ${reset_color}  ${fg[green]}OPEN  ${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}7${reset_color}  ${reset_color}2nd DRAFT PR ${reset_color}  ${fg[blue]}2nd-draft ${reset_color}  ${fg[green]}DRAFT ${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}6${reset_color}  ${reset_color}2nd MERGED PR${reset_color}  ${fg[blue]}2nd-merged${reset_color}  ${fg[green]}MERGED${reset_color}"
        assert ${lines[5]} same_as "${fg[yellow]}5${reset_color}  ${reset_color}2nd CLOSED PR${reset_color}  ${fg[blue]}2nd-closed${reset_color}  ${fg[green]}CLOSED${reset_color}"
        assert ${lines[6]} same_as "${fg[yellow]}4${reset_color}  ${reset_color}1st OPEN PR  ${reset_color}  ${fg[blue]}1st-open  ${reset_color}  ${fg[green]}OPEN  ${reset_color}"
        assert ${lines[7]} same_as "${fg[yellow]}3${reset_color}  ${reset_color}1st DRAFT PR ${reset_color}  ${fg[blue]}1st-draft ${reset_color}  ${fg[green]}DRAFT ${reset_color}"
        assert ${lines[8]} same_as "${fg[yellow]}2${reset_color}  ${reset_color}1st MERGED PR${reset_color}  ${fg[blue]}1st-merged${reset_color}  ${fg[green]}MERGED${reset_color}"
        assert ${lines[9]} same_as "${fg[yellow]}1${reset_color}  ${reset_color}1st CLOSED PR${reset_color}  ${fg[blue]}1st-closed${reset_color}  ${fg[green]}CLOSED${reset_color}"
    }

    prefix=
    _fzf_complete_gh 'gh pr edit '
}

@test 'Testing completion: gh pr review **' {
    gh_mock_1() {
        assert $# equals 4
        assert $1 same_as 'pr'
        assert $2 same_as 'list'
        assert $3 same_as '--state'
        assert $4 same_as 'all'

        echo "8\t2nd OPEN PR\t2nd-open\tOPEN"
        echo "7\t2nd DRAFT PR\t2nd-draft\tDRAFT"
        echo "6\t2nd MERGED PR\t2nd-merged\tMERGED"
        echo "5\t2nd CLOSED PR\t2nd-closed\tCLOSED"
        echo "4\t1st OPEN PR\t1st-open\tOPEN"
        echo "3\t1st DRAFT PR\t1st-draft\tDRAFT"
        echo "2\t1st MERGED PR\t1st-merged\tMERGED"
        echo "1\t1st CLOSED PR\t1st-closed\tCLOSED"
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'gh pr review '

        echo 'gh'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'gh pr review '

        run cat
        assert __fzf_extract_command mock_times 1
        assert gh mock_times 1
        assert ${#lines} equals 9
        assert ${lines[1]} same_as "${fg[yellow]}#${reset_color}  ${reset_color}TITLE        ${reset_color}  ${fg[blue]}HEAD      ${reset_color}  ${fg[green]}STATE ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}8${reset_color}  ${reset_color}2nd OPEN PR  ${reset_color}  ${fg[blue]}2nd-open  ${reset_color}  ${fg[green]}OPEN  ${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}7${reset_color}  ${reset_color}2nd DRAFT PR ${reset_color}  ${fg[blue]}2nd-draft ${reset_color}  ${fg[green]}DRAFT ${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}6${reset_color}  ${reset_color}2nd MERGED PR${reset_color}  ${fg[blue]}2nd-merged${reset_color}  ${fg[green]}MERGED${reset_color}"
        assert ${lines[5]} same_as "${fg[yellow]}5${reset_color}  ${reset_color}2nd CLOSED PR${reset_color}  ${fg[blue]}2nd-closed${reset_color}  ${fg[green]}CLOSED${reset_color}"
        assert ${lines[6]} same_as "${fg[yellow]}4${reset_color}  ${reset_color}1st OPEN PR  ${reset_color}  ${fg[blue]}1st-open  ${reset_color}  ${fg[green]}OPEN  ${reset_color}"
        assert ${lines[7]} same_as "${fg[yellow]}3${reset_color}  ${reset_color}1st DRAFT PR ${reset_color}  ${fg[blue]}1st-draft ${reset_color}  ${fg[green]}DRAFT ${reset_color}"
        assert ${lines[8]} same_as "${fg[yellow]}2${reset_color}  ${reset_color}1st MERGED PR${reset_color}  ${fg[blue]}1st-merged${reset_color}  ${fg[green]}MERGED${reset_color}"
        assert ${lines[9]} same_as "${fg[yellow]}1${reset_color}  ${reset_color}1st CLOSED PR${reset_color}  ${fg[blue]}1st-closed${reset_color}  ${fg[green]}CLOSED${reset_color}"
    }

    prefix=
    _fzf_complete_gh 'gh pr review '
}

@test 'Testing completion: gh pr view **' {
    gh_mock_1() {
        assert $# equals 4
        assert $1 same_as 'pr'
        assert $2 same_as 'list'
        assert $3 same_as '--state'
        assert $4 same_as 'all'

        echo "8\t2nd OPEN PR\t2nd-open\tOPEN"
        echo "7\t2nd DRAFT PR\t2nd-draft\tDRAFT"
        echo "6\t2nd MERGED PR\t2nd-merged\tMERGED"
        echo "5\t2nd CLOSED PR\t2nd-closed\tCLOSED"
        echo "4\t1st OPEN PR\t1st-open\tOPEN"
        echo "3\t1st DRAFT PR\t1st-draft\tDRAFT"
        echo "2\t1st MERGED PR\t1st-merged\tMERGED"
        echo "1\t1st CLOSED PR\t1st-closed\tCLOSED"
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'gh pr view '

        echo 'gh'
    }

    _fzf_complete() {
        assert $# equals 5
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--header-lines=1'
        assert $4 same_as '--'
        assert $5 same_as 'gh pr view '

        run cat
        assert __fzf_extract_command mock_times 1
        assert gh mock_times 1
        assert ${#lines} equals 9
        assert ${lines[1]} same_as "${fg[yellow]}#${reset_color}  ${reset_color}TITLE        ${reset_color}  ${fg[blue]}HEAD      ${reset_color}  ${fg[green]}STATE ${reset_color}"
        assert ${lines[2]} same_as "${fg[yellow]}8${reset_color}  ${reset_color}2nd OPEN PR  ${reset_color}  ${fg[blue]}2nd-open  ${reset_color}  ${fg[green]}OPEN  ${reset_color}"
        assert ${lines[3]} same_as "${fg[yellow]}7${reset_color}  ${reset_color}2nd DRAFT PR ${reset_color}  ${fg[blue]}2nd-draft ${reset_color}  ${fg[green]}DRAFT ${reset_color}"
        assert ${lines[4]} same_as "${fg[yellow]}6${reset_color}  ${reset_color}2nd MERGED PR${reset_color}  ${fg[blue]}2nd-merged${reset_color}  ${fg[green]}MERGED${reset_color}"
        assert ${lines[5]} same_as "${fg[yellow]}5${reset_color}  ${reset_color}2nd CLOSED PR${reset_color}  ${fg[blue]}2nd-closed${reset_color}  ${fg[green]}CLOSED${reset_color}"
        assert ${lines[6]} same_as "${fg[yellow]}4${reset_color}  ${reset_color}1st OPEN PR  ${reset_color}  ${fg[blue]}1st-open  ${reset_color}  ${fg[green]}OPEN  ${reset_color}"
        assert ${lines[7]} same_as "${fg[yellow]}3${reset_color}  ${reset_color}1st DRAFT PR ${reset_color}  ${fg[blue]}1st-draft ${reset_color}  ${fg[green]}DRAFT ${reset_color}"
        assert ${lines[8]} same_as "${fg[yellow]}2${reset_color}  ${reset_color}1st MERGED PR${reset_color}  ${fg[blue]}1st-merged${reset_color}  ${fg[green]}MERGED${reset_color}"
        assert ${lines[9]} same_as "${fg[yellow]}1${reset_color}  ${reset_color}1st CLOSED PR${reset_color}  ${fg[blue]}1st-closed${reset_color}  ${fg[green]}CLOSED${reset_color}"
    }

    prefix=
    _fzf_complete_gh 'gh pr view '
}

@test 'Testing completion: gh "" pr view **' {
    _fzf_complete() {
        fail '_fzf_complete should not be invoked'
    }

    __fzf_extract_command_mock_1() {
        assert $# equals 1
        assert $1 same_as 'gh "" pr view '

        echo 'gh'
    }

    _fzf_path_completion() {
        assert $# equals 2
        assert $1 same_as ''
        assert $2 same_as 'gh "" pr view '
    }

    prefix=
    _fzf_complete_gh 'gh "" pr view '

    assert __fzf_extract_command mock_times 1
    assert gh mock_times 0
}

@test 'Testing post: gh-pr' {
    input=(
        '8  2nd OPEN PR  2nd-open  OPEN'
    )

    run _fzf_complete_gh-pr_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 1
    assert ${lines[1]} same_as '8'
}
