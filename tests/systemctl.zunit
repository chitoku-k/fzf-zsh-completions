#!/usr/bin/env zunit

@setup {
    load ../fzf-zsh-completions.plugin.zsh
    FZF_DEFAULT_OPTS=--reverse

    preview() {
        for opt in $fzf_options; do
            if [[ $opt = --preview=* ]]; then
                eval ${${opt/--preview=/}/\{\}/${(q)@}} 2>&1
            fi
        done
    }
}

@teardown {
    rm -f systemctl_mock_times
    rm -f xargs_mock_times
}

@test 'Testing completion: systemctl status **' {
    echo 0 > systemctl_mock_times

    systemctl() {
        systemctl_mock_times=$(($(cat systemctl_mock_times) + 1))
        echo $systemctl_mock_times > systemctl_mock_times

        systemctl_mock_$systemctl_mock_times $@
    }

    systemctl_mock_1() {
        assert $# equals 5
        assert $1 same_as 'list-units'
        assert $2 same_as '--full'
        assert $3 same_as '--no-legend'
        assert $4 same_as '--no-pager'
        assert $5 same_as '*'

        echo '-.mount      loaded active mounted Root Mount'
        echo 'boot.mount   loaded active mounted /boot'
        echo 'dbus.service loaded active running D-Bus System Message Bus'
        echo '-.slice      loaded active active  Root Slice'
        echo 'system.slice loaded active active  System Slice'
        echo 'user.slice   loaded active active  User and Session Slice'
        echo 'basic.target loaded active active  Basic System'
        echo 'dbus.socket  loaded failed running D-Bus System Message Bus Socket'
    }

    _fzf_complete() {
        assert $# equals 7
        assert $1 same_as '--ansi'
        assert $2 same_as '--tiebreak=index'
        assert $3 same_as '--preview-window=right:70%:wrap'
        assert $4 matches '--preview=*'
        assert $5 same_as '--reverse'
        assert $6 same_as '--'
        assert $7 same_as 'systemctl status '

        run cat
        assert ${#lines} equals 8
        assert ${lines[1]} same_as "${fg[green]}●${reset_color} -.mount"
        assert ${lines[2]} same_as "${fg[green]}●${reset_color} -.slice"
        assert ${lines[3]} same_as "${fg[green]}●${reset_color} basic.target"
        assert ${lines[4]} same_as "${fg[green]}●${reset_color} boot.mount"
        assert ${lines[5]} same_as "${fg[green]}●${reset_color} dbus.service"
        assert ${lines[6]} same_as "${fg[red]}●${reset_color} dbus.socket"
        assert ${lines[7]} same_as "${fg[green]}●${reset_color} system.slice"
        assert ${lines[8]} same_as "${fg[green]}●${reset_color} user.slice"
    }

    prefix=
    _fzf_complete_systemctl 'systemctl status '
}

@test 'Testing preview: systemctl status **' {
    echo 0 > xargs_mock_times

    xargs() {
        xargs_mock_times=$(($(cat xargs_mock_times) + 1))
        echo $xargs_mock_times > xargs_mock_times

        xargs_mock_$xargs_mock_times $@
    }

    xargs_mock_1() {
        assert $# equals 3
        assert $1 same_as 'systemctl'
        assert $2 same_as 'status'
        assert $3 same_as '--'

        run cat
        assert ${#lines} equals 1
        assert ${lines[1]} same_as 'basic.target'

        echo '● basic.target - Basic System'
        echo '     Loaded: loaded (/usr/lib/systemd/system/basic.target; static; vendor preset: disabled)'
        echo '     Active: active since Wed 2020-01-01 00:00:00 JST; 2h ago'
        echo '       Docs: man:systemd.special(7)'
    }

    xargs_mock_2() {
        assert $# equals 3
        assert $1 same_as 'systemctl'
        assert $2 same_as 'status'
        assert $3 same_as '--'

        run cat
        assert ${#lines} equals 1
        assert ${lines[1]} same_as 'boot.mount'

        echo '● boot.mount - /boot'
        echo '     Loaded: loaded (/etc/fstab; generated)'
        echo '     Active: active (mounted) since Wed 2020-01-01 00:00:00 JST; 2h ago'
        echo '       Docs: man:systemd.special(7)'
        echo '      Where: /boot'
        echo '       What: /dev/sda2'
        echo '       Docs: man:fstab(5)'
        echo '             man:systemd-fstab-generator(8)'
        echo '      Tasks: 0 (limit: 2367)'
        echo '     Memory: 120.0K'
        echo '     CGroup: /system.slice/boot.mount'
    }

    _fzf_complete() {
        output=$(fzf_options=($@) preview '● basic.target')
        lines=(${(f)output})
        assert ${#lines} equals 4
        assert ${lines[1]} same_as '● basic.target - Basic System'
        assert ${lines[2]} same_as '     Loaded: loaded (/usr/lib/systemd/system/basic.target; static; vendor preset: disabled)'
        assert ${lines[3]} same_as '     Active: active since Wed 2020-01-01 00:00:00 JST; 2h ago'
        assert ${lines[4]} same_as '       Docs: man:systemd.special(7)'

        output=$(fzf_options=($@) preview '● boot.mount')
        lines=(${(f)output})
        assert ${lines[1]} same_as '● boot.mount - /boot'
        assert ${lines[2]} same_as '     Loaded: loaded (/etc/fstab; generated)'
        assert ${lines[3]} same_as '     Active: active (mounted) since Wed 2020-01-01 00:00:00 JST; 2h ago'
        assert ${lines[4]} same_as '       Docs: man:systemd.special(7)'
        assert ${lines[5]} same_as '      Where: /boot'
        assert ${lines[6]} same_as '       What: /dev/sda2'
        assert ${lines[7]} same_as '       Docs: man:fstab(5)'
        assert ${lines[8]} same_as '             man:systemd-fstab-generator(8)'
        assert ${lines[9]} same_as '      Tasks: 0 (limit: 2367)'
        assert ${lines[10]} same_as '     Memory: 120.0K'
        assert ${lines[11]} same_as '     CGroup: /system.slice/boot.mount'
    }

    prefix=
    _fzf_complete_systemctl 'systemctl status '
}

@test 'Testing post: systemctl' {
    input=(
        '● basic.target'
        '● boot.mount'
        '● dbus.service'
        '● dbus.socket'
        '● docker.service'
    )

    run _fzf_complete_systemctl_post <<< ${(F)input}

    assert $state equals 0
    assert ${#lines} equals 5
    assert ${lines[1]} same_as 'basic.target'
    assert ${lines[2]} same_as 'boot.mount'
    assert ${lines[3]} same_as 'dbus.service'
    assert ${lines[4]} same_as 'dbus.socket'
    assert ${lines[5]} same_as 'docker.service'
}
